{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MetaRPC MT5 Python \u2014 Overview","text":"<p>Welcome to the MetaRPC MT5 Python docs. This page gives a fast, structured entry point.</p>"},{"location":"#start-here","title":"\ud83d\udfe2 Start here","text":""},{"location":"#base","title":"BASE","text":"<p>Essential concepts, terminology, and the mental model for the project.</p> <p>Open BASE \u2192</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Environment setup, credentials in <code>.env</code>, first run, and basic checks.</p> <p>Open Getting Started \u2192</p>"},{"location":"#under-the-hood","title":"Under the Hood","text":"<p>Service architecture, modules, and key data contracts.</p> <p>Open Under the Hood \u2192</p>"},{"location":"#project-guides","title":"\ud83d\udfe1 Project guides","text":""},{"location":"#project-map-layers","title":"Project Map &amp; Layers","text":"<p>How pieces fit together, layered responsibilities, and boundaries.</p> <p>Open Project Map &amp; Layers \u2192</p>"},{"location":"#glossary","title":"Glossary","text":"<p>Concise terms you\u2019ll see across code, docs, and logs.</p> <p>Open Glossary \u2192</p>"},{"location":"#architecture-data-flow","title":"Architecture &amp; Data Flow","text":"<p>From request to result: calls, streams, and data transformations.</p> <p>Open Architecture &amp; Data Flow \u2192</p>"},{"location":"#low-level-walkthrough","title":"\ud83d\udd34 low level Walkthrough","text":""},{"location":"#examples-quick-start","title":"Examples \u2014 quick start","text":"<ul> <li> <p> Base example \u00b7 Step number one     Steps 1\u20136, 6f\u20136j, 8 (connect, symbols, params, orders snapshot, history)  Open \u2192</p> </li> <li> <p> Base example \u00b7 Step number two     Steps 7\u201310a (positions total, orders/positions history, DOM, DOM scan)  Open \u2192</p> </li> <li> <p> Base example \u00b7 Step number three     Steps 11\u201316e (trading &amp; streaming)  Open \u2192</p> </li> </ul>"},{"location":"#common-helpers","title":"Common helpers","text":"<ul> <li> <p> pb2 shim     Compatibility layer for enums/fields  Open \u2192</p> </li> <li> <p> utils     Price/volume normalization, printers, safe-get  Open \u2192</p> </li> <li> <p> env     Environment variables &amp; setup  Open \u2192</p> </li> <li> <p> diag_connect     Connectivity diagnostics checklist  Open \u2192</p> </li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#mt5_account","title":"mt5_account","text":""},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account","title":"<code>MT5Account</code>","text":"Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>class MT5Account:\n    def __init__(self, user: int, password: str, grpc_server: Optional[str] = None, id_: Optional[str] = None):\n        self.user = user\n        self.password = password\n        self.grpc_server = grpc_server or \"mt5.mrpc.pro:443\"   # default server\n        self.id = id_\n\n        # Async gRPC secure channel (TLS)\n        self.channel = grpc.aio.secure_channel(\n            self.grpc_server,\n            grpc.ssl_channel_credentials()\n        )\n\n        # Init stubs directly (like in C#)\n        self.connection_client = connection_pb2_grpc.ConnectionStub(self.channel)\n        self.subscription_client = subscriptions_pb2_grpc.SubscriptionServiceStub(self.channel)\n        self.account_client = account_helper_pb2_grpc.AccountHelperStub(self.channel)\n        self.trade_client = trading_helper_pb2_grpc.TradingHelperStub(self.channel)\n        self.market_info_client = market_info_pb2_grpc.MarketInfoStub(self.channel)\n        self.trade_functions_client = trade_functions_pb2_grpc.TradeFunctionsStub(self.channel)\n        self.account_information_client = account_information_pb2_grpc.AccountInformationStub(self.channel)\n\n        # Connection state\n        self.host = None\n        self.port = None\n        self.server_name = None\n        self.base_chart_symbol = None\n        self.connect_timeout_seconds = 30\n\n\n    # === Utility: headers ===\n    def get_headers(self):\n        return [(\"id\", self.id)]\n\n    # === Utility: reconnect ===\n    async def reconnect(self, deadline: Optional[datetime] = None):\n        if self.server_name:\n            await self.connect_by_server_name(self.server_name, self.base_chart_symbol or \"EURUSD\",\n                                              True, self.connect_timeout_seconds, deadline)\n        elif self.host:\n            await self.connect_by_host_port(self.host, self.port or 443,\n                                            self.base_chart_symbol or \"EURUSD\", True,\n                                            self.connect_timeout_seconds, deadline)\n\n    # === Core retry wrapper ===\n    async def execute_with_reconnect(\n        self,\n        grpc_call: Callable[[list[tuple[str, str]]], Awaitable[Any]],\n        error_selector: Callable[[Any], Optional[Any]],\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        while cancellation_event is None or not cancellation_event.is_set():\n            headers = self.get_headers()\n            try:\n                res = await grpc_call(headers)\n            except grpc.aio.AioRpcError as ex:\n                if ex.code() == grpc.StatusCode.UNAVAILABLE:\n                    await asyncio.sleep(0.5)\n                    await self.reconnect(deadline)\n                    continue\n                raise\n\n            error = error_selector(res)\n            if error and error.error_code in (\"TERMINAL_INSTANCE_NOT_FOUND\", \"TERMINAL_REGISTRY_TERMINAL_NOT_FOUND\"):\n                await asyncio.sleep(0.5)\n                await self.reconnect(deadline)\n                continue\n\n            if res.HasField(\"error\") and res.error.message:\n                raise ApiExceptionMT5(res.error)\n\n            return res\n\n        raise asyncio.CancelledError(\"The operation was canceled by the caller.\")\n\n    # === Connect methods ===\n    async def connect_by_host_port(\n        self,\n        host: str,\n        port: int = 443,\n        base_chart_symbol: str = \"EURUSD\",\n        wait_for_terminal_is_alive: bool = True,\n        timeout_seconds: int = 30,\n        deadline: Optional[datetime] = None,\n    ):\n        #Build connect request (from your proto)\n        request = connection_pb2.ConnectRequest(\n            user=self.user,\n            password=self.password,\n            host=host,\n            port=port,\n            base_chart_symbol=base_chart_symbol,\n            wait_for_terminal_is_alive=wait_for_terminal_is_alive,\n            terminal_readiness_waiting_timeout_seconds=timeout_seconds,\n        )\n\n        headers = []\n        if self.id:\n            headers.append((\"id\", str(self.id)))\n\n        res = await self.connection_client.Connect(\n            request,\n            metadata=headers,\n            timeout=30.0 if deadline is None else (deadline - datetime.utcnow()).total_seconds(),\n        )\n\n        if res.HasField(\"error\") and res.error.message:\n            raise ApiExceptionMT5(res.error)\n\n        # Save state\n        self.host = host\n        self.port = port\n        self.base_chart_symbol = base_chart_symbol\n        self.connect_timeout_seconds = timeout_seconds\n        self.id = res.data.terminalInstanceGuid\n\n    async def connect_by_server_name(\n        self,\n        server_name: str,\n        base_chart_symbol: str = \"EURUSD\",\n        wait_for_terminal_is_alive: bool = True,\n        timeout_seconds: int = 30,\n        deadline: Optional[datetime] = None,\n    ):\n        # Build connect request (from your proto)\n        request = connection_pb2.ConnectExRequest(\n            user=self.user,\n            password=self.password,\n            mt_cluster_name=server_name,\n            base_chart_symbol=base_chart_symbol,\n            terminal_readiness_waiting_timeout_seconds=timeout_seconds,\n        )\n\n        headers = []\n        if self.id:\n            headers.append((\"id\", str(self.id)))\n        res = await self.connection_client.ConnectEx(\n            request,\n            metadata=headers,\n            timeout=30.0 if deadline is None else (deadline - datetime.utcnow()).total_seconds(),\n        )\n\n        if res.HasField(\"error\") and res.error.message:\n            raise ApiExceptionMT5(res.error)\n\n        # Save state\n        self.server_name = server_name\n        self.base_chart_symbol = base_chart_symbol\n        self.connect_timeout_seconds = timeout_seconds\n        self.id = res.data.terminal_instance_guid\n\n    async def account_summary(\n        self,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the summary information for a trading account asynchronously.\n\n        Args:\n            deadline (datetime, optional): Deadline after which the request will be canceled\n                if not completed.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            AccountSummaryData: The server's response containing account summary data.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not (self.host or self.server_name):\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.AccountSummaryRequest()\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.AccountSummary(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n\n        return res.data\n\n    async def opened_orders(\n        self,\n        sort_mode: account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE = account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the currently opened orders and positions for the connected account asynchronously.\n\n        Args:\n            sort_mode (BMT5_ENUM_OPENED_ORDER_SORT_TYPE): The sort mode for the opened orders\n                (0 - open time, 1 - close time, 2 - ticket ID).\n            deadline (datetime, optional): Deadline after which the request will be canceled\n                if not completed.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OpenedOrdersData: The result containing opened orders and positions.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.OpenedOrdersRequest(inputSortMode=sort_mode)\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.OpenedOrders(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n\n    async def order_history(\n        self,\n        from_dt: datetime,\n        to_dt: datetime,\n        sort_mode: account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE = account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_ASC,\n        page_number: int = 0,\n        items_per_page: int = 0,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the historical orders for the connected trading account within the specified\n        time range asynchronously.\n\n        Args:\n            from_dt (datetime): The start time for the history query (server time).\n            to_dt (datetime): The end time for the history query (server time).\n            sort_mode (BMT5_ENUM_ORDER_HISTORY_SORT_TYPE, optional):\n                The sort mode (0 - by open time, 1 - by close time, 2 - by ticket ID).\n            page_number (int, optional): Page number for paginated results (default 0).\n            items_per_page (int, optional): Number of items per page (default 0 = all).\n            deadline (datetime, optional): Deadline after which the request will be canceled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrdersHistoryData: The server's response containing paged historical order data.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.OrderHistoryRequest(\n            inputFrom=Timestamp().FromDatetime(from_dt),\n            inputTo=Timestamp().FromDatetime(to_dt),\n            inputSortMode=sort_mode,\n            pageNumber=page_number,\n            itemsPerPage=items_per_page,\n        )\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.OrderHistory(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def opened_orders_tickets(\n        self,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets ticket IDs of all currently opened orders and positions asynchronously.\n\n        Args:\n            deadline (datetime, optional): Deadline after which the request will be canceled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OpenedOrdersTicketsData: Collection of opened order and position tickets.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.OpenedOrdersTicketsRequest()\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.OpenedOrdersTickets(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_params_many(\n        self,\n        request: account_helper_pb2.SymbolParamsManyRequest,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves symbol parameters for multiple instruments asynchronously.\n\n        Args:\n            request (SymbolParamsManyRequest): The request containing filters and pagination.\n            deadline (datetime, optional): Deadline after which the request will be canceled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolParamsManyData: Symbol parameter details.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.SymbolParamsMany(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n\n    async def tick_value_with_size(\n        self,\n        symbols: list[str],\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets tick value and tick size data for the given symbols asynchronously.\n\n        Args:\n            symbols (list[str]): List of symbol names.\n            deadline (datetime, optional): Deadline after which the request will be canceled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            TickValueWithSizeData: Tick value and contract size info per symbol.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.TickValueWithSizeRequest()\n        request.symbol_names.extend(symbols)\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.TickValueWithSize(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def positions_history(\n    self,\n    sort_type: account_helper_pb2.AH_ENUM_POSITIONS_HISTORY_SORT_TYPE,\n    open_from: Optional[datetime] = None,\n    open_to: Optional[datetime] = None,\n    page: int = 0,\n    size: int = 0,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves historical positions based on filter and time range asynchronously.\n\n        Args:\n            sort_type (AH_ENUM_POSITIONS_HISTORY_SORT_TYPE): Sorting type for historical positions.\n            open_from (datetime, optional): Start of open time filter (UTC).\n            open_to (datetime, optional): End of open time filter (UTC).\n            page (int, optional): Page number for paginated results (default 0).\n            size (int, optional): Number of items per page (default 0 = all).\n            deadline (datetime, optional): Deadline after which the request will be canceled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            PositionsHistoryData: Historical position records.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.PositionsHistoryRequest(\n            sort_type=sort_type,\n            pageNumber=page,\n            itemsPerPage=size,\n        )\n\n        if open_from:\n            request.positionOpenTimeFrom.FromDatetime(open_from)\n        if open_to:\n            request.positionOpenTimeTo.FromDatetime(open_to)\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.account_client.PositionsHistory(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n#\n# Trading helper methods --------------------------------------------------------------------------------------------------------\n#\n\n    async def order_send(\n        self,\n        request: Any,  # account_helper_pb2.OrderSendRequest\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Sends a market or pending order to the trading server asynchronously.\n\n        Args:\n            request (OrderSendRequest): The order request to send.\n            deadline (datetime, optional): Deadline for the operation.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrderSendData: Response with deal/order confirmation data.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.trade_client.OrderSend(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n\n    async def order_modify(\n        self,\n        request: Any,  # OrderModifyRequest\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Modifies an existing order or position asynchronously.\n\n        Args:\n            request (OrderModifyRequest): The modification request (SL, TP, price, expiration, etc.).\n            deadline (datetime, optional): Deadline for the operation.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrderModifyData: Response containing updated order/deal info.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.trade_client.OrderModify(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def order_close(\n        self,\n        request: Any,  # OrderCloseRequest\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Closes a market or pending order asynchronously.\n\n        Args:\n            request (OrderCloseRequest): The close request including ticket, volume, and slippage.\n            deadline (datetime, optional): Deadline for the operation.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrderCloseData: The close result and return codes.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                if timeout &lt; 0:\n                    timeout = 0\n            return await self.trade_client.OrderClose(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n\n#\n#    Streams --------------------------------------------------------------------------------------------------------\n#    \n\n    async def execute_stream_with_reconnect(\n        self,\n        request: Any,\n        stream_invoker: Callable[[Any, list[tuple[str, str]]], grpc.aio.StreamStreamCall],\n        get_error: Callable[[Any], Optional[Any]],\n        get_data: Callable[[Any], Any],\n        cancellation_event: Optional[asyncio.Event] = None,\n    ) -&gt; AsyncGenerator[Any, None]:\n        \"\"\"\n        Executes a gRPC server-streaming call with automatic reconnection logic on recoverable errors.\n\n        Args:\n            request: The request object to initiate the stream with.\n            stream_invoker (Callable): A function that opens the stream. It receives the request and metadata headers,\n                and returns an async streaming call.\n            get_error (Callable): A function that extracts the error object (if any) from a reply.\n                Return an object with .error_code == \"TERMINAL_INSTANCE_NOT_FOUND\" to trigger reconnect,\n                or any non-null error to raise ApiExceptionMT5.\n            get_data (Callable): A function that extracts the data object from a reply. If it returns None, the\n                message is skipped.\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming and reconnection attempts.\n\n        Yields:\n            Extracted data items streamed from the server.\n\n        Raises:\n            ConnectExceptionMT5: If reconnection logic fails due to missing account context.\n            ApiExceptionMT5: When the stream response contains a known API error.\n            grpc.aio.AioRpcError: If a non-recoverable gRPC error occurs.\n        \"\"\"\n        while cancellation_event is None or not cancellation_event.is_set():\n            reconnect_required = False\n            stream = None\n            try:\n                stream = stream_invoker(request, self.get_headers())\n                async for reply in stream:\n                    error = get_error(reply)\n\n                    if error and error.error_code in (\n                        \"TERMINAL_INSTANCE_NOT_FOUND\",\n                        \"TERMINAL_REGISTRY_TERMINAL_NOT_FOUND\",\n                    ):\n                        reconnect_required = True\n                        break\n\n                    if error and getattr(error, \"message\", None):\n                        raise ApiExceptionMT5(error)\n\n                    data = get_data(reply)\n                    if data is not None:\n                        yield data\n\n            except grpc.aio.AioRpcError as ex:\n                if ex.code() == grpc.StatusCode.UNAVAILABLE:\n                    reconnect_required = True\n                else:\n                    raise\n\n            finally:\n                if stream:\n                    stream.cancel()  # close stream properly\n\n            if reconnect_required:\n                await asyncio.sleep(0.5)\n                await self.reconnect()\n            else:\n                break\n\n\n    async def on_symbol_tick(\n        self,\n        symbols: list[str],\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Subscribes to real-time tick data for specified symbols.\n\n        Args:\n            symbols (list[str]): The symbol names to subscribe to.\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n        Yields:\n            OnSymbolTickData: Async stream of tick data responses.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected before calling this method.\n            ApiExceptionMT5: If the server returns an error in the stream.\n            grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = subscriptions_pb2.OnSymbolTickRequest()\n        request.symbol_names.extend(symbols)\n\n        async for data in self.execute_stream_with_reconnect(\n            request=request,\n            stream_invoker=lambda req, headers: self.subscription_client.OnSymbolTick(req, metadata=headers),\n            get_error=lambda reply: reply.error,\n            get_data=lambda reply: reply.data,\n            cancellation_event=cancellation_event,\n        ):\n            yield data\n\n    async def on_trade(\n        self,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Subscribes to all trade-related events: orders, deals, positions.\n\n        Args:\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n        Yields:\n            OnTradeData: Trade event data.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns a known API error.\n            grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = subscriptions_pb2.OnTradeRequest()\n\n        async for data in self.execute_stream_with_reconnect(\n            request=request,\n            stream_invoker=lambda req, headers: self.subscription_client.OnTrade(req, metadata=headers),\n            get_error=lambda reply: reply.error,\n            get_data=lambda reply: reply.data,\n            cancellation_event=cancellation_event,\n        ):\n            yield data\n\n\n    async def on_position_profit(\n        self,\n        interval_ms: int,\n        ignore_empty: bool = True,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Subscribes to real-time profit updates for open positions.\n\n        Args:\n            interval_ms (int): Interval in milliseconds to poll the server.\n            ignore_empty (bool, optional): Skip frames with no change.\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n        Yields:\n            OnPositionProfitData: Profit update data.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns a known API error.\n            grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = subscriptions_pb2.OnPositionProfitRequest(\n            timerPeriodMilliseconds=interval_ms,\n            ignoreEmptyData=ignore_empty,\n        )\n\n        async for data in self.execute_stream_with_reconnect(\n            request=request,\n            stream_invoker=lambda req, headers: self.subscription_client.OnPositionProfit(req, metadata=headers),\n            get_error=lambda reply: reply.error,\n            get_data=lambda reply: reply.data,\n            cancellation_event=cancellation_event,\n        ):\n            yield data\n\n\n    async def on_positions_and_pending_orders_tickets(\n        self,\n        interval_ms: int,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Subscribes to updates of position and pending order ticket IDs.\n\n        Args:\n            interval_ms (int): Polling interval in milliseconds.\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n        Yields:\n            OnPositionsAndPendingOrdersTicketsData: Snapshot of tickets.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns a known API error.\n            grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = subscriptions_pb2.OnPositionsAndPendingOrdersTicketsRequest(\n            timerPeriodMilliseconds=interval_ms,\n        )\n\n        async for data in self.execute_stream_with_reconnect(\n            request=request,\n            stream_invoker=lambda req, headers: self.subscription_client.OnPositionsAndPendingOrdersTickets(req, metadata=headers),\n            get_error=lambda reply: reply.error,\n            get_data=lambda reply: reply.data,\n            cancellation_event=cancellation_event,\n        ):\n            yield data\n\n\n    async def on_trade_transaction(\n        self,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Subscribes to real-time trade transaction events such as order creation, update, or execution.\n\n        Args:\n            cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n        Yields:\n            OnTradeTransactionData: Trade transaction replies.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns a known API error.\n            grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = subscriptions_pb2.OnTradeTransactionRequest()\n\n        async for data in self.execute_stream_with_reconnect(\n            request=request,\n            stream_invoker=lambda req, headers: self.subscription_client.OnTradeTransaction(req, metadata=headers),\n            get_error=lambda reply: reply.error,\n            get_data=lambda reply: reply.data,\n            cancellation_event=cancellation_event,\n        ):\n            yield data\n\n\n# Trade functions --------------------------------------------------------------------------------------------------------\n\n\n    async def order_calc_margin(\n        self,\n        request: Any,  # OrderCalcMarginRequest\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Calculates the margin required for a planned trade operation.\n\n        Args:\n            request (OrderCalcMarginRequest): The request containing symbol, order type, volume, and price.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrderCalcMarginData: The required margin in account currency.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                timeout = max(timeout, 0)\n            return await self.trade_functions_client.OrderCalcMargin(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def order_check(\n        self,\n        request: Any,  # OrderCheckRequest\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Checks whether a trade request can be successfully executed under current market conditions.\n\n        Args:\n            request (OrderCheckRequest): The trade request to validate.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            OrderCheckData: Result of the trade request check, including margin and balance details.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                timeout = max(timeout, 0)\n            return await self.trade_functions_client.OrderCheck(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def positions_total(\n        self,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Returns the total number of open positions on the current account.\n\n        Args:\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            PositionsTotalData: The total number of open positions.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = Empty()\n\n        async def grpc_call(headers):\n            timeout = None\n            if deadline:\n                timeout = (deadline - datetime.utcnow()).total_seconds()\n                timeout = max(timeout, 0)\n            return await self.trade_functions_client.PositionsTotal(\n                request,\n                metadata=headers,\n                timeout=timeout,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbols_total(\n        self,\n        selected_only: bool,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Returns the total number of symbols available on the platform.\n\n        Args:\n            selected_only (bool): True to count only Market Watch symbols, false to count all.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolsTotalData: Total symbol count data.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolsTotalRequest(mode=selected_only)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolsTotal(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_exist(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Checks if a symbol with the specified name exists (standard or custom).\n\n        Args:\n            symbol (str): The symbol name to check.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolExistData: Information about symbol existence and type.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolExistRequest(name=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolExist(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_name(\n        self,\n        index: int,\n        selected: bool,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Returns the name of a symbol by index.\n\n        Args:\n            index (int): Symbol index (starting at 0).\n            selected (bool): True to use only Market Watch symbols.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolNameData: The symbol name at the specified index.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolNameRequest(index=index, selected=selected)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolName(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_select(\n        self,\n        symbol: str,\n        select: bool,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Adds or removes a symbol from Market Watch.\n\n        Args:\n            symbol (str): Symbol name.\n            select (bool): True to add, false to remove.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolSelectData: Success status of the operation.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolSelectRequest(symbol=symbol, select=select)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolSelect(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_is_synchronized(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Checks if the symbol's data is synchronized with the server.\n\n        Args:\n            symbol (str): Symbol name to check.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolIsSynchronizedData: True if synchronized, false otherwise.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolIsSynchronizedRequest(symbol=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolIsSynchronized(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_double(\n        self,\n        symbol: str,\n        property: market_info_pb2.SymbolInfoDoubleProperty,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves a double-precision property value of a symbol.\n\n        Args:\n            symbol (str): Symbol name.\n            property (SymbolInfoDoubleProperty): The double-type property to retrieve.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoDoubleData: The double property value.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoDoubleRequest(symbol=symbol, type=property)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoDouble(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_integer(\n        self,\n        symbol: str,\n        property: market_info_pb2.SymbolInfoIntegerProperty,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves an integer-type property value of a symbol.\n\n        Args:\n            symbol (str): Symbol name.\n            property (SymbolInfoIntegerProperty): The integer property to query.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoIntegerData: The integer property value.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoIntegerRequest(symbol=symbol, type=property)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoInteger(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_string(\n        self,\n        symbol: str,\n        property: market_info_pb2.SymbolInfoStringProperty,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves a string-type property value of a symbol.\n\n        Args:\n            symbol (str): Symbol name.\n            property (SymbolInfoStringProperty): The string property to retrieve.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoStringData: The string property value.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoStringRequest(symbol=symbol, type=property)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoString(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_margin_rate(\n        self,\n        symbol: str,\n        order_type: market_info_pb2.ENUM_ORDER_TYPE,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves the margin rates for a given symbol and order type.\n\n        Args:\n            symbol (str): Symbol name.\n            order_type (ENUM_ORDER_TYPE): The order type (buy/sell/etc).\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoMarginRateData: The initial and maintenance margin rates.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoMarginRateRequest(symbol=symbol, orderType=order_type)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoMarginRate(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_tick(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Retrieves the current tick data (bid, ask, last, volume) for a given symbol.\n\n        Args:\n            symbol (str): Symbol name to fetch tick info for.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            MrpcMqlTick: The latest tick information.\n\n        Raises:\n            ConnectExceptionMT5: If the account is not connected.\n            ApiExceptionMT5: If the server returns an error in the response.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoTickRequest(symbol=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoTick(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_session_quote(\n        self,\n        symbol: str,\n        day_of_week: market_info_pb2.DayOfWeek,\n        session_index: int,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the quoting session start and end time for a symbol on a specific day and session index.\n\n        Args:\n            symbol (str): The symbol name.\n            day_of_week (DayOfWeek): The day of the week.\n            session_index (int): Index of the quoting session (starting at 0).\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoSessionQuoteData: The session quote start and end time.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoSessionQuoteRequest(\n            symbol=symbol,\n            dayOfWeek=day_of_week,\n            sessionIndex=session_index,\n        )\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoSessionQuote(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def symbol_info_session_trade(\n        self,\n        symbol: str,\n        day_of_week: market_info_pb2.DayOfWeek,\n        session_index: int,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the trading session start and end time for a symbol on a specific day and session index.\n\n        Args:\n            symbol (str): The symbol name.\n            day_of_week (DayOfWeek): The day of the week.\n            session_index (int): Index of the trading session (starting at 0).\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            SymbolInfoSessionTradeData: The trading session start and end time.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.SymbolInfoSessionTradeRequest(\n            symbol=symbol,\n            dayOfWeek=day_of_week,\n            sessionIndex=session_index,\n        )\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.SymbolInfoSessionTrade(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def market_book_add(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Opens the Depth of Market (DOM) for a symbol and subscribes to updates.\n\n        Args:\n            symbol (str): Symbol name to subscribe.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            MarketBookAddData: True if DOM subscription was successful.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.MarketBookAddRequest(symbol=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.MarketBookAdd(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def market_book_release(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Releases the Depth of Market (DOM) for a symbol and stops receiving updates.\n\n        Args:\n            symbol (str): Symbol name to unsubscribe.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            MarketBookReleaseData: True if DOM release was successful.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.MarketBookReleaseRequest(symbol=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.MarketBookRelease(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n    async def market_book_get(\n        self,\n        symbol: str,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ):\n        \"\"\"\n        Gets the current Depth of Market (DOM) data for a symbol.\n\n        Args:\n            symbol (str): Symbol name.\n            deadline (datetime, optional): Deadline for the gRPC call.\n            cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n        Returns:\n            MarketBookGetData: A list of book entries for the symbol's DOM.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.MarketBookGetRequest(symbol=symbol)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.market_info_client.MarketBookGet(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda r: getattr(r, \"error\", None),\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data\n\n\n # Account info --------------------------------------------------------------------------------------------------------\n\n    async def account_info_double(\n        self,\n        property_id: account_info_pb2.AccountInfoDoublePropertyType,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ) -&gt; float:\n        \"\"\"\n        Retrieves a double-precision account property (e.g. balance, equity, margin).\n\n        Args:\n            property_id (AccountInfoDoublePropertyType): The account double property to retrieve.\n            deadline (datetime, optional): Deadline after which the call will be cancelled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n        Returns:\n            float: The double value of the requested account property.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.AccountInfoDoubleRequest(propertyId=property_id)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.account_information_client.AccountInfoDouble(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda _: None,  # no error field\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data.requestedValue\n\n    async def account_info_integer(\n        self,\n        property_id: account_info_pb2.AccountInfoIntegerPropertyType,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ) -&gt; int:\n        \"\"\"\n        Retrieves an integer account property (e.g. login, leverage, trade mode).\n\n        Args:\n            property_id (AccountInfoIntegerPropertyType): The account integer property to retrieve.\n            deadline (datetime, optional): Deadline after which the call will be cancelled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n        Returns:\n            int: The integer value of the requested account property.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.AccountInfoIntegerRequest(propertyId=property_id)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.account_information_client.AccountInfoInteger(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda _: None,  # no error field\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data.requestedValue\n\n    async def account_info_string(\n        self,\n        property_id: account_info_pb2.AccountInfoStringPropertyType,\n        deadline: Optional[datetime] = None,\n        cancellation_event: Optional[asyncio.Event] = None,\n    ) -&gt; str:\n        \"\"\"\n        Retrieves a string account property (e.g. account name, currency, server).\n\n        Args:\n            property_id (AccountInfoStringPropertyType): The account string property to retrieve.\n            deadline (datetime, optional): Deadline after which the call will be cancelled.\n            cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n        Returns:\n            str: The string value of the requested account property.\n\n        Raises:\n            ConnectExceptionMT5: If the client is not connected.\n            ApiExceptionMT5: If the server returns a business error.\n            grpc.aio.AioRpcError: If the gRPC call fails.\n        \"\"\"\n        if not self.id:\n            raise ConnectExceptionMT5(\"Please call connect method first\")\n\n        request = account_helper_pb2.AccountInfoStringRequest(propertyId=property_id)\n\n        async def grpc_call(headers):\n            timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n            return await self.account_information_client.AccountInfoString(\n                request,\n                metadata=headers,\n                timeout=max(timeout, 0) if timeout else None,\n            )\n\n        res = await self.execute_with_reconnect(\n            grpc_call=grpc_call,\n            error_selector=lambda _: None,  # no error field\n            deadline=deadline,\n            cancellation_event=cancellation_event,\n        )\n        return res.data.requestedValue\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.account_summary","title":"<code>account_summary(deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the summary information for a trading account asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled if not completed.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AccountSummaryData</code> <p>The server's response containing account summary data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def account_summary(\n    self,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the summary information for a trading account asynchronously.\n\n    Args:\n        deadline (datetime, optional): Deadline after which the request will be canceled\n            if not completed.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        AccountSummaryData: The server's response containing account summary data.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not (self.host or self.server_name):\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.AccountSummaryRequest()\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.AccountSummary(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.opened_orders","title":"<code>opened_orders(sort_mode=account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the currently opened orders and positions for the connected account asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>sort_mode</code> <code>BMT5_ENUM_OPENED_ORDER_SORT_TYPE</code> <p>The sort mode for the opened orders (0 - open time, 1 - close time, 2 - ticket ID).</p> <code>BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC</code> <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled if not completed.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OpenedOrdersData</code> <p>The result containing opened orders and positions.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def opened_orders(\n    self,\n    sort_mode: account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE = account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the currently opened orders and positions for the connected account asynchronously.\n\n    Args:\n        sort_mode (BMT5_ENUM_OPENED_ORDER_SORT_TYPE): The sort mode for the opened orders\n            (0 - open time, 1 - close time, 2 - ticket ID).\n        deadline (datetime, optional): Deadline after which the request will be canceled\n            if not completed.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OpenedOrdersData: The result containing opened orders and positions.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.OpenedOrdersRequest(inputSortMode=sort_mode)\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.OpenedOrders(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_history","title":"<code>order_history(from_dt, to_dt, sort_mode=account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_ASC, page_number=0, items_per_page=0, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the historical orders for the connected trading account within the specified time range asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>from_dt</code> <code>datetime</code> <p>The start time for the history query (server time).</p> required <code>to_dt</code> <code>datetime</code> <p>The end time for the history query (server time).</p> required <code>sort_mode</code> <code>BMT5_ENUM_ORDER_HISTORY_SORT_TYPE</code> <p>The sort mode (0 - by open time, 1 - by close time, 2 - by ticket ID).</p> <code>BMT5_SORT_BY_CLOSE_TIME_ASC</code> <code>page_number</code> <code>int</code> <p>Page number for paginated results (default 0).</p> <code>0</code> <code>items_per_page</code> <code>int</code> <p>Number of items per page (default 0 = all).</p> <code>0</code> <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrdersHistoryData</code> <p>The server's response containing paged historical order data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_history(\n    self,\n    from_dt: datetime,\n    to_dt: datetime,\n    sort_mode: account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE = account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_ASC,\n    page_number: int = 0,\n    items_per_page: int = 0,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the historical orders for the connected trading account within the specified\n    time range asynchronously.\n\n    Args:\n        from_dt (datetime): The start time for the history query (server time).\n        to_dt (datetime): The end time for the history query (server time).\n        sort_mode (BMT5_ENUM_ORDER_HISTORY_SORT_TYPE, optional):\n            The sort mode (0 - by open time, 1 - by close time, 2 - by ticket ID).\n        page_number (int, optional): Page number for paginated results (default 0).\n        items_per_page (int, optional): Number of items per page (default 0 = all).\n        deadline (datetime, optional): Deadline after which the request will be canceled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrdersHistoryData: The server's response containing paged historical order data.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.OrderHistoryRequest(\n        inputFrom=Timestamp().FromDatetime(from_dt),\n        inputTo=Timestamp().FromDatetime(to_dt),\n        inputSortMode=sort_mode,\n        pageNumber=page_number,\n        itemsPerPage=items_per_page,\n    )\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.OrderHistory(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.opened_orders_tickets","title":"<code>opened_orders_tickets(deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets ticket IDs of all currently opened orders and positions asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OpenedOrdersTicketsData</code> <p>Collection of opened order and position tickets.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def opened_orders_tickets(\n    self,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets ticket IDs of all currently opened orders and positions asynchronously.\n\n    Args:\n        deadline (datetime, optional): Deadline after which the request will be canceled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OpenedOrdersTicketsData: Collection of opened order and position tickets.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.OpenedOrdersTicketsRequest()\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.OpenedOrdersTickets(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_params_many","title":"<code>symbol_params_many(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves symbol parameters for multiple instruments asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>SymbolParamsManyRequest</code> <p>The request containing filters and pagination.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolParamsManyData</code> <p>Symbol parameter details.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_params_many(\n    self,\n    request: account_helper_pb2.SymbolParamsManyRequest,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves symbol parameters for multiple instruments asynchronously.\n\n    Args:\n        request (SymbolParamsManyRequest): The request containing filters and pagination.\n        deadline (datetime, optional): Deadline after which the request will be canceled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolParamsManyData: Symbol parameter details.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.SymbolParamsMany(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.tick_value_with_size","title":"<code>tick_value_with_size(symbols, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets tick value and tick size data for the given symbols asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>symbols</code> <code>list[str]</code> <p>List of symbol names.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>TickValueWithSizeData</code> <p>Tick value and contract size info per symbol.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def tick_value_with_size(\n    self,\n    symbols: list[str],\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets tick value and tick size data for the given symbols asynchronously.\n\n    Args:\n        symbols (list[str]): List of symbol names.\n        deadline (datetime, optional): Deadline after which the request will be canceled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        TickValueWithSizeData: Tick value and contract size info per symbol.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.TickValueWithSizeRequest()\n    request.symbol_names.extend(symbols)\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.TickValueWithSize(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.positions_history","title":"<code>positions_history(sort_type, open_from=None, open_to=None, page=0, size=0, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves historical positions based on filter and time range asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>sort_type</code> <code>AH_ENUM_POSITIONS_HISTORY_SORT_TYPE</code> <p>Sorting type for historical positions.</p> required <code>open_from</code> <code>datetime</code> <p>Start of open time filter (UTC).</p> <code>None</code> <code>open_to</code> <code>datetime</code> <p>End of open time filter (UTC).</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number for paginated results (default 0).</p> <code>0</code> <code>size</code> <code>int</code> <p>Number of items per page (default 0 = all).</p> <code>0</code> <code>deadline</code> <code>datetime</code> <p>Deadline after which the request will be canceled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PositionsHistoryData</code> <p>Historical position records.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def positions_history(\nself,\nsort_type: account_helper_pb2.AH_ENUM_POSITIONS_HISTORY_SORT_TYPE,\nopen_from: Optional[datetime] = None,\nopen_to: Optional[datetime] = None,\npage: int = 0,\nsize: int = 0,\ndeadline: Optional[datetime] = None,\ncancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves historical positions based on filter and time range asynchronously.\n\n    Args:\n        sort_type (AH_ENUM_POSITIONS_HISTORY_SORT_TYPE): Sorting type for historical positions.\n        open_from (datetime, optional): Start of open time filter (UTC).\n        open_to (datetime, optional): End of open time filter (UTC).\n        page (int, optional): Page number for paginated results (default 0).\n        size (int, optional): Number of items per page (default 0 = all).\n        deadline (datetime, optional): Deadline after which the request will be canceled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        PositionsHistoryData: Historical position records.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.PositionsHistoryRequest(\n        sort_type=sort_type,\n        pageNumber=page,\n        itemsPerPage=size,\n    )\n\n    if open_from:\n        request.positionOpenTimeFrom.FromDatetime(open_from)\n    if open_to:\n        request.positionOpenTimeTo.FromDatetime(open_to)\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.account_client.PositionsHistory(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_send","title":"<code>order_send(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Sends a market or pending order to the trading server asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>OrderSendRequest</code> <p>The order request to send.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the operation.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrderSendData</code> <p>Response with deal/order confirmation data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_send(\n    self,\n    request: Any,  # account_helper_pb2.OrderSendRequest\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Sends a market or pending order to the trading server asynchronously.\n\n    Args:\n        request (OrderSendRequest): The order request to send.\n        deadline (datetime, optional): Deadline for the operation.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrderSendData: Response with deal/order confirmation data.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.trade_client.OrderSend(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_modify","title":"<code>order_modify(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Modifies an existing order or position asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>OrderModifyRequest</code> <p>The modification request (SL, TP, price, expiration, etc.).</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the operation.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrderModifyData</code> <p>Response containing updated order/deal info.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_modify(\n    self,\n    request: Any,  # OrderModifyRequest\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Modifies an existing order or position asynchronously.\n\n    Args:\n        request (OrderModifyRequest): The modification request (SL, TP, price, expiration, etc.).\n        deadline (datetime, optional): Deadline for the operation.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrderModifyData: Response containing updated order/deal info.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.trade_client.OrderModify(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_close","title":"<code>order_close(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Closes a market or pending order asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>OrderCloseRequest</code> <p>The close request including ticket, volume, and slippage.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the operation.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrderCloseData</code> <p>The close result and return codes.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_close(\n    self,\n    request: Any,  # OrderCloseRequest\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Closes a market or pending order asynchronously.\n\n    Args:\n        request (OrderCloseRequest): The close request including ticket, volume, and slippage.\n        deadline (datetime, optional): Deadline for the operation.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrderCloseData: The close result and return codes.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            if timeout &lt; 0:\n                timeout = 0\n        return await self.trade_client.OrderClose(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.execute_stream_with_reconnect","title":"<code>execute_stream_with_reconnect(request, stream_invoker, get_error, get_data, cancellation_event=None)</code>  <code>async</code>","text":"<p>Executes a gRPC server-streaming call with automatic reconnection logic on recoverable errors.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>The request object to initiate the stream with.</p> required <code>stream_invoker</code> <code>Callable</code> <p>A function that opens the stream. It receives the request and metadata headers, and returns an async streaming call.</p> required <code>get_error</code> <code>Callable</code> <p>A function that extracts the error object (if any) from a reply. Return an object with .error_code == \"TERMINAL_INSTANCE_NOT_FOUND\" to trigger reconnect, or any non-null error to raise ApiExceptionMT5.</p> required <code>get_data</code> <code>Callable</code> <p>A function that extracts the data object from a reply. If it returns None, the message is skipped.</p> required <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming and reconnection attempts.</p> <code>None</code> <p>Yields:</p> Type Description <code>AsyncGenerator[Any, None]</code> <p>Extracted data items streamed from the server.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If reconnection logic fails due to missing account context.</p> <code>ApiExceptionMT5</code> <p>When the stream response contains a known API error.</p> <code>AioRpcError</code> <p>If a non-recoverable gRPC error occurs.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def execute_stream_with_reconnect(\n    self,\n    request: Any,\n    stream_invoker: Callable[[Any, list[tuple[str, str]]], grpc.aio.StreamStreamCall],\n    get_error: Callable[[Any], Optional[Any]],\n    get_data: Callable[[Any], Any],\n    cancellation_event: Optional[asyncio.Event] = None,\n) -&gt; AsyncGenerator[Any, None]:\n    \"\"\"\n    Executes a gRPC server-streaming call with automatic reconnection logic on recoverable errors.\n\n    Args:\n        request: The request object to initiate the stream with.\n        stream_invoker (Callable): A function that opens the stream. It receives the request and metadata headers,\n            and returns an async streaming call.\n        get_error (Callable): A function that extracts the error object (if any) from a reply.\n            Return an object with .error_code == \"TERMINAL_INSTANCE_NOT_FOUND\" to trigger reconnect,\n            or any non-null error to raise ApiExceptionMT5.\n        get_data (Callable): A function that extracts the data object from a reply. If it returns None, the\n            message is skipped.\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming and reconnection attempts.\n\n    Yields:\n        Extracted data items streamed from the server.\n\n    Raises:\n        ConnectExceptionMT5: If reconnection logic fails due to missing account context.\n        ApiExceptionMT5: When the stream response contains a known API error.\n        grpc.aio.AioRpcError: If a non-recoverable gRPC error occurs.\n    \"\"\"\n    while cancellation_event is None or not cancellation_event.is_set():\n        reconnect_required = False\n        stream = None\n        try:\n            stream = stream_invoker(request, self.get_headers())\n            async for reply in stream:\n                error = get_error(reply)\n\n                if error and error.error_code in (\n                    \"TERMINAL_INSTANCE_NOT_FOUND\",\n                    \"TERMINAL_REGISTRY_TERMINAL_NOT_FOUND\",\n                ):\n                    reconnect_required = True\n                    break\n\n                if error and getattr(error, \"message\", None):\n                    raise ApiExceptionMT5(error)\n\n                data = get_data(reply)\n                if data is not None:\n                    yield data\n\n        except grpc.aio.AioRpcError as ex:\n            if ex.code() == grpc.StatusCode.UNAVAILABLE:\n                reconnect_required = True\n            else:\n                raise\n\n        finally:\n            if stream:\n                stream.cancel()  # close stream properly\n\n        if reconnect_required:\n            await asyncio.sleep(0.5)\n            await self.reconnect()\n        else:\n            break\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.on_symbol_tick","title":"<code>on_symbol_tick(symbols, cancellation_event=None)</code>  <code>async</code>","text":"<p>Subscribes to real-time tick data for specified symbols.</p> <p>Parameters:</p> Name Type Description Default <code>symbols</code> <code>list[str]</code> <p>The symbol names to subscribe to.</p> required <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming.</p> <code>None</code> <p>Yields:</p> Name Type Description <code>OnSymbolTickData</code> <p>Async stream of tick data responses.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected before calling this method.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the stream.</p> <code>AioRpcError</code> <p>If the stream fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def on_symbol_tick(\n    self,\n    symbols: list[str],\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Subscribes to real-time tick data for specified symbols.\n\n    Args:\n        symbols (list[str]): The symbol names to subscribe to.\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n    Yields:\n        OnSymbolTickData: Async stream of tick data responses.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected before calling this method.\n        ApiExceptionMT5: If the server returns an error in the stream.\n        grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = subscriptions_pb2.OnSymbolTickRequest()\n    request.symbol_names.extend(symbols)\n\n    async for data in self.execute_stream_with_reconnect(\n        request=request,\n        stream_invoker=lambda req, headers: self.subscription_client.OnSymbolTick(req, metadata=headers),\n        get_error=lambda reply: reply.error,\n        get_data=lambda reply: reply.data,\n        cancellation_event=cancellation_event,\n    ):\n        yield data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.on_trade","title":"<code>on_trade(cancellation_event=None)</code>  <code>async</code>","text":"<p>Subscribes to all trade-related events: orders, deals, positions.</p> <p>Parameters:</p> Name Type Description Default <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming.</p> <code>None</code> <p>Yields:</p> Name Type Description <code>OnTradeData</code> <p>Trade event data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a known API error.</p> <code>AioRpcError</code> <p>If the stream fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def on_trade(\n    self,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Subscribes to all trade-related events: orders, deals, positions.\n\n    Args:\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n    Yields:\n        OnTradeData: Trade event data.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns a known API error.\n        grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = subscriptions_pb2.OnTradeRequest()\n\n    async for data in self.execute_stream_with_reconnect(\n        request=request,\n        stream_invoker=lambda req, headers: self.subscription_client.OnTrade(req, metadata=headers),\n        get_error=lambda reply: reply.error,\n        get_data=lambda reply: reply.data,\n        cancellation_event=cancellation_event,\n    ):\n        yield data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.on_position_profit","title":"<code>on_position_profit(interval_ms, ignore_empty=True, cancellation_event=None)</code>  <code>async</code>","text":"<p>Subscribes to real-time profit updates for open positions.</p> <p>Parameters:</p> Name Type Description Default <code>interval_ms</code> <code>int</code> <p>Interval in milliseconds to poll the server.</p> required <code>ignore_empty</code> <code>bool</code> <p>Skip frames with no change.</p> <code>True</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming.</p> <code>None</code> <p>Yields:</p> Name Type Description <code>OnPositionProfitData</code> <p>Profit update data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a known API error.</p> <code>AioRpcError</code> <p>If the stream fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def on_position_profit(\n    self,\n    interval_ms: int,\n    ignore_empty: bool = True,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Subscribes to real-time profit updates for open positions.\n\n    Args:\n        interval_ms (int): Interval in milliseconds to poll the server.\n        ignore_empty (bool, optional): Skip frames with no change.\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n    Yields:\n        OnPositionProfitData: Profit update data.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns a known API error.\n        grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = subscriptions_pb2.OnPositionProfitRequest(\n        timerPeriodMilliseconds=interval_ms,\n        ignoreEmptyData=ignore_empty,\n    )\n\n    async for data in self.execute_stream_with_reconnect(\n        request=request,\n        stream_invoker=lambda req, headers: self.subscription_client.OnPositionProfit(req, metadata=headers),\n        get_error=lambda reply: reply.error,\n        get_data=lambda reply: reply.data,\n        cancellation_event=cancellation_event,\n    ):\n        yield data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.on_positions_and_pending_orders_tickets","title":"<code>on_positions_and_pending_orders_tickets(interval_ms, cancellation_event=None)</code>  <code>async</code>","text":"<p>Subscribes to updates of position and pending order ticket IDs.</p> <p>Parameters:</p> Name Type Description Default <code>interval_ms</code> <code>int</code> <p>Polling interval in milliseconds.</p> required <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming.</p> <code>None</code> <p>Yields:</p> Name Type Description <code>OnPositionsAndPendingOrdersTicketsData</code> <p>Snapshot of tickets.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a known API error.</p> <code>AioRpcError</code> <p>If the stream fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def on_positions_and_pending_orders_tickets(\n    self,\n    interval_ms: int,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Subscribes to updates of position and pending order ticket IDs.\n\n    Args:\n        interval_ms (int): Polling interval in milliseconds.\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n    Yields:\n        OnPositionsAndPendingOrdersTicketsData: Snapshot of tickets.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns a known API error.\n        grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = subscriptions_pb2.OnPositionsAndPendingOrdersTicketsRequest(\n        timerPeriodMilliseconds=interval_ms,\n    )\n\n    async for data in self.execute_stream_with_reconnect(\n        request=request,\n        stream_invoker=lambda req, headers: self.subscription_client.OnPositionsAndPendingOrdersTickets(req, metadata=headers),\n        get_error=lambda reply: reply.error,\n        get_data=lambda reply: reply.data,\n        cancellation_event=cancellation_event,\n    ):\n        yield data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.on_trade_transaction","title":"<code>on_trade_transaction(cancellation_event=None)</code>  <code>async</code>","text":"<p>Subscribes to real-time trade transaction events such as order creation, update, or execution.</p> <p>Parameters:</p> Name Type Description Default <code>cancellation_event</code> <code>Event</code> <p>Event to cancel streaming.</p> <code>None</code> <p>Yields:</p> Name Type Description <code>OnTradeTransactionData</code> <p>Trade transaction replies.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a known API error.</p> <code>AioRpcError</code> <p>If the stream fails due to communication or protocol errors.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def on_trade_transaction(\n    self,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Subscribes to real-time trade transaction events such as order creation, update, or execution.\n\n    Args:\n        cancellation_event (asyncio.Event, optional): Event to cancel streaming.\n\n    Yields:\n        OnTradeTransactionData: Trade transaction replies.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns a known API error.\n        grpc.aio.AioRpcError: If the stream fails due to communication or protocol errors.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = subscriptions_pb2.OnTradeTransactionRequest()\n\n    async for data in self.execute_stream_with_reconnect(\n        request=request,\n        stream_invoker=lambda req, headers: self.subscription_client.OnTradeTransaction(req, metadata=headers),\n        get_error=lambda reply: reply.error,\n        get_data=lambda reply: reply.data,\n        cancellation_event=cancellation_event,\n    ):\n        yield data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_calc_margin","title":"<code>order_calc_margin(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Calculates the margin required for a planned trade operation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>OrderCalcMarginRequest</code> <p>The request containing symbol, order type, volume, and price.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrderCalcMarginData</code> <p>The required margin in account currency.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If gRPC fails to connect or respond.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_calc_margin(\n    self,\n    request: Any,  # OrderCalcMarginRequest\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Calculates the margin required for a planned trade operation.\n\n    Args:\n        request (OrderCalcMarginRequest): The request containing symbol, order type, volume, and price.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrderCalcMarginData: The required margin in account currency.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            timeout = max(timeout, 0)\n        return await self.trade_functions_client.OrderCalcMargin(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.order_check","title":"<code>order_check(request, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Checks whether a trade request can be successfully executed under current market conditions.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>OrderCheckRequest</code> <p>The trade request to validate.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>OrderCheckData</code> <p>Result of the trade request check, including margin and balance details.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If gRPC fails to connect or respond.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def order_check(\n    self,\n    request: Any,  # OrderCheckRequest\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Checks whether a trade request can be successfully executed under current market conditions.\n\n    Args:\n        request (OrderCheckRequest): The trade request to validate.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        OrderCheckData: Result of the trade request check, including margin and balance details.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            timeout = max(timeout, 0)\n        return await self.trade_functions_client.OrderCheck(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.positions_total","title":"<code>positions_total(deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Returns the total number of open positions on the current account.</p> <p>Parameters:</p> Name Type Description Default <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PositionsTotalData</code> <p>The total number of open positions.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If gRPC fails to connect or respond.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def positions_total(\n    self,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Returns the total number of open positions on the current account.\n\n    Args:\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        PositionsTotalData: The total number of open positions.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If gRPC fails to connect or respond.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = Empty()\n\n    async def grpc_call(headers):\n        timeout = None\n        if deadline:\n            timeout = (deadline - datetime.utcnow()).total_seconds()\n            timeout = max(timeout, 0)\n        return await self.trade_functions_client.PositionsTotal(\n            request,\n            metadata=headers,\n            timeout=timeout,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbols_total","title":"<code>symbols_total(selected_only, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Returns the total number of symbols available on the platform.</p> <p>Parameters:</p> Name Type Description Default <code>selected_only</code> <code>bool</code> <p>True to count only Market Watch symbols, false to count all.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolsTotalData</code> <p>Total symbol count data.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbols_total(\n    self,\n    selected_only: bool,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Returns the total number of symbols available on the platform.\n\n    Args:\n        selected_only (bool): True to count only Market Watch symbols, false to count all.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolsTotalData: Total symbol count data.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolsTotalRequest(mode=selected_only)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolsTotal(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_exist","title":"<code>symbol_exist(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Checks if a symbol with the specified name exists (standard or custom).</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol name to check.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolExistData</code> <p>Information about symbol existence and type.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_exist(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Checks if a symbol with the specified name exists (standard or custom).\n\n    Args:\n        symbol (str): The symbol name to check.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolExistData: Information about symbol existence and type.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolExistRequest(name=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolExist(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_name","title":"<code>symbol_name(index, selected, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Returns the name of a symbol by index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Symbol index (starting at 0).</p> required <code>selected</code> <code>bool</code> <p>True to use only Market Watch symbols.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolNameData</code> <p>The symbol name at the specified index.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_name(\n    self,\n    index: int,\n    selected: bool,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Returns the name of a symbol by index.\n\n    Args:\n        index (int): Symbol index (starting at 0).\n        selected (bool): True to use only Market Watch symbols.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolNameData: The symbol name at the specified index.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolNameRequest(index=index, selected=selected)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolName(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_select","title":"<code>symbol_select(symbol, select, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Adds or removes a symbol from Market Watch.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>select</code> <code>bool</code> <p>True to add, false to remove.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolSelectData</code> <p>Success status of the operation.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_select(\n    self,\n    symbol: str,\n    select: bool,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Adds or removes a symbol from Market Watch.\n\n    Args:\n        symbol (str): Symbol name.\n        select (bool): True to add, false to remove.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolSelectData: Success status of the operation.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolSelectRequest(symbol=symbol, select=select)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolSelect(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_is_synchronized","title":"<code>symbol_is_synchronized(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Checks if the symbol's data is synchronized with the server.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name to check.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolIsSynchronizedData</code> <p>True if synchronized, false otherwise.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_is_synchronized(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Checks if the symbol's data is synchronized with the server.\n\n    Args:\n        symbol (str): Symbol name to check.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolIsSynchronizedData: True if synchronized, false otherwise.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolIsSynchronizedRequest(symbol=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolIsSynchronized(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_double","title":"<code>symbol_info_double(symbol, property, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves a double-precision property value of a symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>property</code> <code>SymbolInfoDoubleProperty</code> <p>The double-type property to retrieve.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoDoubleData</code> <p>The double property value.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_double(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoDoubleProperty,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves a double-precision property value of a symbol.\n\n    Args:\n        symbol (str): Symbol name.\n        property (SymbolInfoDoubleProperty): The double-type property to retrieve.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoDoubleData: The double property value.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoDoubleRequest(symbol=symbol, type=property)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoDouble(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_integer","title":"<code>symbol_info_integer(symbol, property, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves an integer-type property value of a symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>property</code> <code>SymbolInfoIntegerProperty</code> <p>The integer property to query.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoIntegerData</code> <p>The integer property value.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_integer(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoIntegerProperty,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves an integer-type property value of a symbol.\n\n    Args:\n        symbol (str): Symbol name.\n        property (SymbolInfoIntegerProperty): The integer property to query.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoIntegerData: The integer property value.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoIntegerRequest(symbol=symbol, type=property)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoInteger(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_string","title":"<code>symbol_info_string(symbol, property, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves a string-type property value of a symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>property</code> <code>SymbolInfoStringProperty</code> <p>The string property to retrieve.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoStringData</code> <p>The string property value.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_string(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoStringProperty,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves a string-type property value of a symbol.\n\n    Args:\n        symbol (str): Symbol name.\n        property (SymbolInfoStringProperty): The string property to retrieve.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoStringData: The string property value.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoStringRequest(symbol=symbol, type=property)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoString(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_margin_rate","title":"<code>symbol_info_margin_rate(symbol, order_type, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves the margin rates for a given symbol and order type.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>order_type</code> <code>ENUM_ORDER_TYPE</code> <p>The order type (buy/sell/etc).</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoMarginRateData</code> <p>The initial and maintenance margin rates.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_margin_rate(\n    self,\n    symbol: str,\n    order_type: market_info_pb2.ENUM_ORDER_TYPE,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves the margin rates for a given symbol and order type.\n\n    Args:\n        symbol (str): Symbol name.\n        order_type (ENUM_ORDER_TYPE): The order type (buy/sell/etc).\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoMarginRateData: The initial and maintenance margin rates.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoMarginRateRequest(symbol=symbol, orderType=order_type)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoMarginRate(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_tick","title":"<code>symbol_info_tick(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves the current tick data (bid, ask, last, volume) for a given symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name to fetch tick info for.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MrpcMqlTick</code> <p>The latest tick information.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the account is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns an error in the response.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_tick(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Retrieves the current tick data (bid, ask, last, volume) for a given symbol.\n\n    Args:\n        symbol (str): Symbol name to fetch tick info for.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        MrpcMqlTick: The latest tick information.\n\n    Raises:\n        ConnectExceptionMT5: If the account is not connected.\n        ApiExceptionMT5: If the server returns an error in the response.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoTickRequest(symbol=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoTick(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_session_quote","title":"<code>symbol_info_session_quote(symbol, day_of_week, session_index, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the quoting session start and end time for a symbol on a specific day and session index.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol name.</p> required <code>day_of_week</code> <code>DayOfWeek</code> <p>The day of the week.</p> required <code>session_index</code> <code>int</code> <p>Index of the quoting session (starting at 0).</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoSessionQuoteData</code> <p>The session quote start and end time.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_session_quote(\n    self,\n    symbol: str,\n    day_of_week: market_info_pb2.DayOfWeek,\n    session_index: int,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the quoting session start and end time for a symbol on a specific day and session index.\n\n    Args:\n        symbol (str): The symbol name.\n        day_of_week (DayOfWeek): The day of the week.\n        session_index (int): Index of the quoting session (starting at 0).\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoSessionQuoteData: The session quote start and end time.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoSessionQuoteRequest(\n        symbol=symbol,\n        dayOfWeek=day_of_week,\n        sessionIndex=session_index,\n    )\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoSessionQuote(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.symbol_info_session_trade","title":"<code>symbol_info_session_trade(symbol, day_of_week, session_index, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the trading session start and end time for a symbol on a specific day and session index.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The symbol name.</p> required <code>day_of_week</code> <code>DayOfWeek</code> <p>The day of the week.</p> required <code>session_index</code> <code>int</code> <p>Index of the trading session (starting at 0).</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SymbolInfoSessionTradeData</code> <p>The trading session start and end time.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def symbol_info_session_trade(\n    self,\n    symbol: str,\n    day_of_week: market_info_pb2.DayOfWeek,\n    session_index: int,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the trading session start and end time for a symbol on a specific day and session index.\n\n    Args:\n        symbol (str): The symbol name.\n        day_of_week (DayOfWeek): The day of the week.\n        session_index (int): Index of the trading session (starting at 0).\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        SymbolInfoSessionTradeData: The trading session start and end time.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.SymbolInfoSessionTradeRequest(\n        symbol=symbol,\n        dayOfWeek=day_of_week,\n        sessionIndex=session_index,\n    )\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.SymbolInfoSessionTrade(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.market_book_add","title":"<code>market_book_add(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Opens the Depth of Market (DOM) for a symbol and subscribes to updates.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name to subscribe.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MarketBookAddData</code> <p>True if DOM subscription was successful.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def market_book_add(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Opens the Depth of Market (DOM) for a symbol and subscribes to updates.\n\n    Args:\n        symbol (str): Symbol name to subscribe.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        MarketBookAddData: True if DOM subscription was successful.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.MarketBookAddRequest(symbol=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.MarketBookAdd(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.market_book_release","title":"<code>market_book_release(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Releases the Depth of Market (DOM) for a symbol and stops receiving updates.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name to unsubscribe.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MarketBookReleaseData</code> <p>True if DOM release was successful.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def market_book_release(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Releases the Depth of Market (DOM) for a symbol and stops receiving updates.\n\n    Args:\n        symbol (str): Symbol name to unsubscribe.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        MarketBookReleaseData: True if DOM release was successful.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.MarketBookReleaseRequest(symbol=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.MarketBookRelease(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.market_book_get","title":"<code>market_book_get(symbol, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Gets the current Depth of Market (DOM) data for a symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol name.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline for the gRPC call.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MarketBookGetData</code> <p>A list of book entries for the symbol's DOM.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def market_book_get(\n    self,\n    symbol: str,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n):\n    \"\"\"\n    Gets the current Depth of Market (DOM) data for a symbol.\n\n    Args:\n        symbol (str): Symbol name.\n        deadline (datetime, optional): Deadline for the gRPC call.\n        cancellation_event (asyncio.Event, optional): Event to cancel the request.\n\n    Returns:\n        MarketBookGetData: A list of book entries for the symbol's DOM.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.MarketBookGetRequest(symbol=symbol)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.market_info_client.MarketBookGet(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda r: getattr(r, \"error\", None),\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.account_info_double","title":"<code>account_info_double(property_id, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves a double-precision account property (e.g. balance, equity, margin).</p> <p>Parameters:</p> Name Type Description Default <code>property_id</code> <code>AccountInfoDoublePropertyType</code> <p>The account double property to retrieve.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline after which the call will be cancelled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the operation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The double value of the requested account property.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def account_info_double(\n    self,\n    property_id: account_info_pb2.AccountInfoDoublePropertyType,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n) -&gt; float:\n    \"\"\"\n    Retrieves a double-precision account property (e.g. balance, equity, margin).\n\n    Args:\n        property_id (AccountInfoDoublePropertyType): The account double property to retrieve.\n        deadline (datetime, optional): Deadline after which the call will be cancelled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n    Returns:\n        float: The double value of the requested account property.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.AccountInfoDoubleRequest(propertyId=property_id)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.account_information_client.AccountInfoDouble(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda _: None,  # no error field\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data.requestedValue\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.account_info_integer","title":"<code>account_info_integer(property_id, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves an integer account property (e.g. login, leverage, trade mode).</p> <p>Parameters:</p> Name Type Description Default <code>property_id</code> <code>AccountInfoIntegerPropertyType</code> <p>The account integer property to retrieve.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline after which the call will be cancelled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the operation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The integer value of the requested account property.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def account_info_integer(\n    self,\n    property_id: account_info_pb2.AccountInfoIntegerPropertyType,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n) -&gt; int:\n    \"\"\"\n    Retrieves an integer account property (e.g. login, leverage, trade mode).\n\n    Args:\n        property_id (AccountInfoIntegerPropertyType): The account integer property to retrieve.\n        deadline (datetime, optional): Deadline after which the call will be cancelled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n    Returns:\n        int: The integer value of the requested account property.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.AccountInfoIntegerRequest(propertyId=property_id)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.account_information_client.AccountInfoInteger(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda _: None,  # no error field\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data.requestedValue\n</code></pre>"},{"location":"api/#package.MetaRpcMT5.mt5_account.MT5Account.account_info_string","title":"<code>account_info_string(property_id, deadline=None, cancellation_event=None)</code>  <code>async</code>","text":"<p>Retrieves a string account property (e.g. account name, currency, server).</p> <p>Parameters:</p> Name Type Description Default <code>property_id</code> <code>AccountInfoStringPropertyType</code> <p>The account string property to retrieve.</p> required <code>deadline</code> <code>datetime</code> <p>Deadline after which the call will be cancelled.</p> <code>None</code> <code>cancellation_event</code> <code>Event</code> <p>Event to cancel the operation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string value of the requested account property.</p> <p>Raises:</p> Type Description <code>ConnectExceptionMT5</code> <p>If the client is not connected.</p> <code>ApiExceptionMT5</code> <p>If the server returns a business error.</p> <code>AioRpcError</code> <p>If the gRPC call fails.</p> Source code in <code>package/MetaRpcMT5/mt5_account.py</code> <pre><code>async def account_info_string(\n    self,\n    property_id: account_info_pb2.AccountInfoStringPropertyType,\n    deadline: Optional[datetime] = None,\n    cancellation_event: Optional[asyncio.Event] = None,\n) -&gt; str:\n    \"\"\"\n    Retrieves a string account property (e.g. account name, currency, server).\n\n    Args:\n        property_id (AccountInfoStringPropertyType): The account string property to retrieve.\n        deadline (datetime, optional): Deadline after which the call will be cancelled.\n        cancellation_event (asyncio.Event, optional): Event to cancel the operation.\n\n    Returns:\n        str: The string value of the requested account property.\n\n    Raises:\n        ConnectExceptionMT5: If the client is not connected.\n        ApiExceptionMT5: If the server returns a business error.\n        grpc.aio.AioRpcError: If the gRPC call fails.\n    \"\"\"\n    if not self.id:\n        raise ConnectExceptionMT5(\"Please call connect method first\")\n\n    request = account_helper_pb2.AccountInfoStringRequest(propertyId=property_id)\n\n    async def grpc_call(headers):\n        timeout = (deadline - datetime.utcnow()).total_seconds() if deadline else None\n        return await self.account_information_client.AccountInfoString(\n            request,\n            metadata=headers,\n            timeout=max(timeout, 0) if timeout else None,\n        )\n\n    res = await self.execute_with_reconnect(\n        grpc_call=grpc_call,\n        error_selector=lambda _: None,  # no error field\n        deadline=deadline,\n        cancellation_event=cancellation_event,\n    )\n    return res.data.requestedValue\n</code></pre>"},{"location":"Examples/Base_example/Step_number_one/","title":"Step number one","text":"<p>Covers: Steps 1\u20136</p> <p>This part focuses on read-only and safe operations. No trading actions here.</p>"},{"location":"Examples/Base_example/Step_number_one/#helpers-used-in-this-part","title":"Helpers used in this part","text":"<p>Paths are relative to this page (<code>docs/Examples/Base_example/Step_number_one.md</code>).</p> <ul> <li>Env &amp; connection diagnostics \u2014 see:  </li> <li><code>env.md</code> </li> <li><code>diag_connect.md</code></li> <li>Getting familiar with the base API \u2014 see:  </li> <li><code>Getting_Started.md</code> </li> <li><code>BASE.md</code> </li> <li><code>Under_the_Hood.md</code></li> </ul>"},{"location":"Examples/Base_example/Step_number_one/#prerequisites","title":"Prerequisites \ud83e\uddf0","text":"<ul> <li>Python 3.13.x (virtual environment recommended).</li> <li>Reachable gRPC endpoint.</li> <li>Valid MT5 credentials.</li> </ul>"},{"location":"Examples/Base_example/Step_number_one/#environment-variables-used-here","title":"Environment variables used here","text":"Name Default Purpose <code>GRPC_SERVER</code> <code>mt5.mrpc.pro:443</code> gRPC backend endpoint <code>MT5_LOGIN</code> <code>0</code> MT5 login <code>MT5_PASSWORD</code> <code>\"\"</code> MT5 password <code>MT5_SERVER</code> <code>\"\"</code> MT5 server name (for ConnectEx) <code>MT5_SYMBOL</code> <code>EURUSD</code> Base symbol for examples <code>TIMEOUT_SECONDS</code> <code>90</code> Deadline for most RPC calls <p>No trading flags required in this part (<code>RUN_TRADING</code> not used).</p>"},{"location":"Examples/Base_example/Step_number_one/#step-1-one-shot-account_summary","title":"Step 1: one-shot account_summary \ud83d\udcca","text":"<p>Goal: Connect via <code>server_name</code> (ConnectEx) and print key account metrics: equity, balance, margin, free, free_ratio, drawdown, server_time. Docs: <code>account_summary.md</code></p> <p>Method signatures: <pre><code>ConnectEx(request: ConnectExRequest) -&gt; ConnectExReply\nAccountSummary(request: AccountSummaryRequest) -&gt; AccountSummaryReply\n</code></pre> Gotchas: Ensure <code>MT5_SERVER</code> is correct; increase <code>TIMEOUT_SECONDS</code> if latency is high.</p>"},{"location":"Examples/Base_example/Step_number_one/#step-2-account_info","title":"Step 2: account_info \ud83e\uddfe","text":"<p>Goal: Demonstrate direct pb2 calls <code>AccountInfo*</code> and safe field extraction. Docs: <code>account_info_double.md</code>, <code>account_info_integer.md</code>, <code>account_info_string.md</code></p> <p>Method signatures (pb): <pre><code>AccountInfoDouble(request: AccountInfoDoubleRequest) -&gt; AccountInfoDoubleReply\nAccountInfoInteger(request: AccountInfoIntegerRequest) -&gt; AccountInfoIntegerReply\nAccountInfoString(request: AccountInfoStringRequest) -&gt; AccountInfoStringReply\n</code></pre> Gotchas: Some fields may be absent depending on the server \u2014 always use safe getters.</p>"},{"location":"Examples/Base_example/Step_number_one/#step-3-symbols_market","title":"Step 3: Symbols_Market \ud83c\udff7\ufe0f","text":"<p>Goal: Ensure the symbol is available and read key attributes. Docs: <code>SymbolsandMarket_Overview.md</code></p>"},{"location":"Examples/Base_example/Step_number_one/#step-4-symbol_params_many","title":"Step 4: symbol_params_many \u2699\ufe0f","text":"<p>Goal: Read a compact set of parameters for one/many symbols: spread, tick size/value, lot step and volume limits, etc. Docs: <code>symbol_params_many.md</code></p> <p>Method signatures (pb): <pre><code>SymbolParamsMany(request: SymbolParamsManyRequest) -&gt; SymbolParamsManyReply\n</code></pre> Gotchas: Respect <code>lot_step</code>, <code>min_volume</code>, <code>max_volume</code> when planning trade logic.</p>"},{"location":"Examples/Base_example/Step_number_one/#step-5-opened_orders","title":"Step 5: opened_orders \ud83d\uddc2\ufe0f","text":"<p>Goal: Print active pending orders in compact rows. Docs: <code>opened_orders.md</code></p> <p>Method signatures: <pre><code>OpenedOrders(request: OpenedOrdersRequest) -&gt; OpenedOrdersReply\n</code></pre> Gotchas: Normalize times to UTC and handle empty lists gracefully.</p>"},{"location":"Examples/Base_example/Step_number_one/#step-6-opened_orders_tickets","title":"Step 6: opened_orders_tickets \ud83c\udf9f\ufe0f","text":"<p>Goal: Fetch only tickets of current pending orders (useful for targeted operations later). Docs: <code>opened_orders_tickets.md</code></p> <p>Method signatures: <pre><code>OpenedOrdersTickets(request: OpenedOrdersTicketsRequest) -&gt; OpenedOrdersTicketsReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#step-6f-symbol_info_tick","title":"Step 6f: symbol_info_tick \u23f1\ufe0f","text":"<p>Goal: Get last tick for the symbol. Docs: <code>symbol_info_tick.md</code></p> <p>Method signatures: <pre><code>SymbolInfoTick(request: SymbolInfoTickRequest) -&gt; SymbolInfoTickRequestReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#step-6g-symbol_info_session_quote","title":"Step 6g: symbol_info_session_quote","text":"<p>Goal: Read current quote session info for the symbol. Docs: <code>symbol_info_session_quote.md</code></p> <p>Method signatures (pb): <pre><code>SymbolInfoSessionQuote(request: SymbolInfoSessionQuoteRequest) -&gt; SymbolInfoSessionQuoteReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#step-6h-symbol_info_session_trade","title":"Step 6h: symbol_info_session_trade","text":"<p>Goal: Read current trade session info for the symbol. Docs: <code>symbol_info_session_trade.md</code></p> <p>Method signatures: <pre><code>SymbolInfoSessionTrade(request: SymbolInfoSessionTradeRequest) -&gt; SymbolInfoSessionTradeReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#step-6i-symbol_info_margin_rate","title":"Step 6i: symbol_info_margin_rate \ud83e\uddee","text":"<p>Goal: Read margin rate information for the symbol. Docs: <code>symbol_info_margin_rate.md</code></p> <p>Method signatures: <pre><code>SymbolInfoMarginRate(request: SymbolInfoMarginRateRequest) -&gt; SymbolInfoMarginRateReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#step-6j-symbol_name","title":"Step 6j: symbol_name \ud83c\udff7\ufe0f","text":"<p>Goal: Read the canonical symbol name. Docs: <code>symbol_name.md</code></p> <p>Method signatures: <pre><code>SymbolName(request: SymbolNameRequest) -&gt; SymbolNameReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_one/#gotchas","title":"Gotchas","text":"<ul> <li><code>MT5_SERVER</code> must exactly match the broker\u2019s server string.</li> <li>If symbol details return empty values \u2014 call <code>symbol_select(SYMBOL, True)</code> first.</li> <li>Normalize time to UTC for history endpoints.</li> <li>Increase <code>TIMEOUT_SECONDS</code> if you observe high latency.</li> </ul>"},{"location":"Examples/Base_example/Step_number_one/#how-to-run-this-part","title":"How to run this part","text":"<p>PowerShell (Windows): <pre><code>$env:MT5_LOGIN=1234567\n$env:MT5_PASSWORD='pass'\n$env:MT5_SERVER='MetaQuotes-Demo'\n$env:GRPC_SERVER='mt5.mrpc.pro:443'\npython - &lt;&lt;'PY'\nimport asyncio\n# Ensure the shim is applied before any pb2 usage\nfrom examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main  # entrypoint\nasyncio.run(main(only_steps=range(1,9)))  # run steps 1..8 (Step 7 is handled in part two)\nPY\n</code></pre></p> <p>Bash: <pre><code>export MT5_LOGIN=1234567\nexport MT5_PASSWORD='pass'\nexport MT5_SERVER=\"MetaQuotes-Demo\"\nexport GRPC_SERVER=\"mt5.mrpc.pro:443\"\npython - &lt;&lt;'PY'\nimport asyncio\nfrom examples.common.pb2_shim import apply_patch  # comments in English only\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main\nasyncio.run(main(only_steps=range(1,9)))  # 1..8 (Step 7 is handled in part two)\nPY\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_three/","title":"Step number three","text":"<p>Covers: Steps 11\u201316 (trading and event streaming).</p> <p>\u26a0\ufe0f This is where account state changes begin. Use a demo account or minimal volumes.</p>"},{"location":"Examples/Base_example/Step_number_three/#step-11-trading-order_calc_margin","title":"Step 11: Trading \u2014 order_calc_margin \ud83e\uddee","text":"<p>Goal: dry\u2011run margin calculation for the selected parameters (symbol/side/volume).</p> <p>Docs: <code>order_calc_margin.md</code></p> <p>Method signatures:</p> <pre><code>OrderCalcMargin(OrderCalcMarginRequest) -&gt; OrderCalcMarginReply\n</code></pre> <p>Tips: use values from <code>SymbolParamsMany</code> (tick_size, lot_step, min/max volume) to keep inputs valid.</p>"},{"location":"Examples/Base_example/Step_number_three/#step-12-tf-ordercheck-market-mandatory-expiration","title":"Step 12: TF OrderCheck \u2014 MARKET + mandatory expiration \u2705","text":"<p>Goal: validate placing a MARKET order with a mandatory <code>expiration</code>.</p> <p>Docs: <code>order_check.md</code></p> <p>Method signatures:</p> <pre><code>OrderCheck(OrderCheckRequest) -&gt; OrderCheckReply\n</code></pre> <p>Notes: validate SL/TP against <code>tick_size</code> and minimum stop distances; set <code>expiration</code> per broker policy.</p>"},{"location":"Examples/Base_example/Step_number_three/#step-12b-ordercheck-diag-print-payload-with-expiration-1-day","title":"Step 12b: OrderCheck DIAG \u2014 print payload with expiration = +1 day \ud83d\udd0d","text":"<p>Goal: repeat the check with <code>expiration = now + 1 day</code>, and print the full response (diagnostic field/reason breakdown).</p> <p>Docs: <code>order_check.md</code></p> <p>Method signatures:</p> <pre><code>OrderCheck(OrderCheckRequest) -&gt; OrderCheckReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-13-order_send-market-tradinghelper","title":"Step 13: order_send (market \u2014 TradingHelper) \ud83d\ude80","text":"<p>Goal: send a market order using env parameters (<code>TRADE_SIDE</code>, <code>TRADE_VOLUME</code>, <code>SL/TP</code>, <code>DEVIATION</code>, <code>TIME</code>, <code>FILLING</code>).</p> <p>Docs: <code>order_send.md</code></p> <p>Method signatures:</p> <pre><code>OrderSend(OrderSendRequest) -&gt; OrderSendReply\n</code></pre> <p>Precautions: check <code>lot_step</code> / <code>min_volume</code> / <code>max_volume</code>; ensure SL/TP align to tick size and do not violate minimum distances.</p>"},{"location":"Examples/Base_example/Step_number_three/#step-13a-discover-position_ticket-via-oneshot-stream","title":"Step 13a: discover POSITION_TICKET via one\u2011shot stream \ud83c\udfaf","text":"<p>Goal: if a position ticket is not provided, obtain it from the tickets stream (short\u2011lived subscription).</p> <p>Docs: <code>on_positions_and_pending_orders_tickets.md</code></p> <p>Method signatures:</p> <pre><code>OnPositionsAndPendingOrdersTickets(OnPositionsAndPendingOrdersTicketsRequest) -&gt; stream OnPositionsAndPendingOrdersTicketsReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-14-order_modify_sltp-tradinghelper","title":"Step 14: order_modify_sltp \u2014 TradingHelper \u270f\ufe0f","text":"<p>Goal: modify SL/TP for an existing position.</p> <p>Docs: <code>order_modify.md</code></p> <p>Method signatures:</p> <pre><code>OrderModify(OrderModifyRequest) -&gt; OrderModifyReply\n</code></pre> <p>Notes: respect tick size and minimum distances; the ticket is taken from <code>POSITION_TICKET</code> or Step 13a.</p>"},{"location":"Examples/Base_example/Step_number_three/#step-15-order_close-tradinghelper","title":"Step 15: order_close \u2014 TradingHelper \ud83e\uddf9","text":"<p>Goal: close a position fully or partially (<code>CLOSE_VOLUME</code>).</p> <p>Docs: <code>order_close.md</code></p> <p>Method signatures:</p> <pre><code>OrderClose(OrderCloseRequest) -&gt; OrderCloseReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-16a-on_symbol_tick","title":"Step 16a: on_symbol_tick \u23f1\ufe0f","text":"<p>Goal: subscribe to symbol ticks and handle several events; terminate cleanly via <code>STREAM_RUN_SECONDS</code>.</p> <p>Docs: <code>on_symbol_tick.md</code></p> <p>Method signatures:</p> <pre><code>OnSymbolTick(OnSymbolTickRequest) -&gt; stream OnSymbolTickReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-16b-on_trade","title":"Step 16b: on_trade \ud83d\udcb9","text":"<p>Goal: listen to trade (deal) events and print key fields.</p> <p>Docs: <code>on_trade.md</code></p> <p>Method signatures:</p> <pre><code>OnTrade(OnTradeRequest) -&gt; stream OnTradeReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-16c-on_position_profit","title":"Step 16c: on_position_profit \ud83d\udcb0","text":"<p>Goal: subscribe to profit updates for open positions.</p> <p>Docs: <code>on_position_profit.md</code></p> <p>Method signatures:</p> <pre><code>OnPositionProfit(OnPositionProfitRequest) -&gt; stream OnPositionProfitReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-16d-on_positions_and_pending_orders_tickets","title":"Step 16d: on_positions_and_pending_orders_tickets \ud83c\udf9f\ufe0f","text":"<p>Goal: receive tickets for positions and pending orders (also used in Step 13a).</p> <p>Docs: <code>on_positions_and_pending_orders_tickets.md</code></p> <p>Method signatures:</p> <pre><code>OnPositionsAndPendingOrdersTickets(OnPositionsAndPendingOrdersTicketsRequest) -&gt; stream OnPositionsAndPendingOrdersTicketsReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#step-16e-on_trade_transaction","title":"Step 16e: on_trade_transaction \ud83d\udd04","text":"<p>Goal: subscribe to trade\u2011transaction events (low\u2011level changes of orders/positions).</p> <p>Docs: <code>on_trade_transaction.md</code></p> <p>Method signatures:</p> <pre><code>OnTradeTransaction(OnTradeTransactionRequest) -&gt; stream OnTradeTransactionReply\n</code></pre>"},{"location":"Examples/Base_example/Step_number_three/#quick-tips","title":"Quick tips","text":"<ul> <li>For OrderCheck/Send/Modify/Close, always validate parameters using symbol data (tick_size, lot_step, min/max volume, stop levels).</li> <li>Don\u2019t forget <code>TRADE_DEVIATION</code>, <code>TRADE_TIME</code> (GTC/DAY/\u2026), <code>TRADE_FILLING</code> (FOK/IOC/\u2026).</li> <li>For streams, set <code>STREAM_RUN_SECONDS</code> and always unsubscribe/close cleanly.</li> </ul>"},{"location":"Examples/Base_example/Step_number_three/#how-to-run","title":"How to run","text":"<p>PowerShell (Windows):</p> <pre><code>$env:RUN_TRADING=1\n$env:STREAM_RUN_SECONDS=15\n\n@'\nimport asyncio\nfrom examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main\n# Execute trading steps and streaming\nasyncio.run(main(only_steps=[11,12,13,14,15,16]))\n'@ | python -\n</code></pre> <p>Bash:</p> <pre><code>export RUN_TRADING=1\nexport STREAM_RUN_SECONDS=15\npython - &lt;&lt;'PY'\nimport asyncio\nfrom examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main\nasyncio.run(main(only_steps=[11,12,13,14,15,16]))\nPY\n</code></pre>"},{"location":"Examples/Base_example/Step_number_two/","title":"Step number two","text":"<p>Covers: Steps 7\u201310 (positions total, order/positions history, Market Book DOM, DOM scan).  </p> <p>This part remains read-only (no order placement). DOM subscriptions are opened and released safely.</p>"},{"location":"Examples/Base_example/Step_number_two/#step-7-positions_total","title":"Step 7: positions_total \ud83d\udcca","text":"<p>Goal: Return the count of open positions (with a hard fallback to the direct stub if helper path fails). Docs: <code>positions_total.md</code></p> <p>Method signatures: <pre><code>PositionsTotal(request: Empty) -&gt; PositionsTotalReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_two/#step-8-order_history-last-7-days","title":"Step 8: order_history (last 7 days) \ud83d\udd70\ufe0f","text":"<p>Goal: Fetch order history within a time window using pb2 <code>Timestamp</code> (UTC). Docs: <code>order_history.md</code></p> <p>Method signatures: <pre><code>OrderHistory(request: OrderHistoryRequest) -&gt; OrderHistoryReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_two/#step-9-positions_history","title":"Step 9: positions_history \ud83d\udcdc","text":"<p>Goal: Fetch positions history within a time window; prints compact rows with key PnL/time fields. Docs: <code>positions_history.md</code></p> <p>Method signatures (pb): <pre><code>PositionsHistory(request: PositionsHistoryRequest) -&gt; PositionsHistoryReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_two/#step-10-market-book-dom","title":"Step 10: Market Book (DOM) \ud83d\udcc8","text":"<p>Goal: Probe DOM carefully \u2014 check depth, subscribe, read a few snapshots, then release. Docs: <code>market_book_add.md</code>, <code>market_book_get.md</code>, <code>market_book_release.md</code></p> <p>Method signatures: <pre><code>MarketBookAdd(request: MarketBookAddRequest) -&gt; MarketBookAddReply\nMarketBookGet(request: MarketBookGetRequest) -&gt; MarketBookGetReply\nMarketBookRelease(request: MarketBookReleaseRequest) -&gt; MarketBookReleaseReply\n</code></pre> Gotchas: Not every server or symbol exposes DOM. If unavailable, log a clear warning and continue \u2014 that\u2019s expected.</p>"},{"location":"Examples/Base_example/Step_number_two/#step-10a-scan-symbols-that-have-dom","title":"Step 10a: scan symbols that have DOM \ud83d\udd0e","text":"<p>Goal: Iterate symbols and print those with available DOM by attempting a lightweight subscribe/release.  </p> <p>Method signatures: <pre><code>SymbolsTotal(SymbolsTotalRequest) -&gt; SymbolsTotalReply\nMarketBookAdd(MarketBookAddRequest) -&gt; MarketBookAddReply\nMarketBookRelease(MarketBookReleaseRequest) -&gt; MarketBookReleaseReply\n</code></pre></p>"},{"location":"Examples/Base_example/Step_number_two/#how-to-run-this-part","title":"How to run this part","text":"<p>PowerShell (Windows): <pre><code># Optional toggles for DOM steps\n$env:RUN_DOM=1        # enables Step 10\n$env:RUN_DOM_SCAN=1   # enables Step 10a\n\n@'\nimport asyncio\nfrom examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main\n# Run steps 7..10; Step 10a is gated by RUN_DOM_SCAN=1\nasyncio.run(main(only_steps=[7,8,9,10]))\n'@ | python -\n</code></pre></p> <p>Bash: <pre><code>export RUN_DOM=1        # enables Step 10\nexport RUN_DOM_SCAN=1   # enables Step 10a\npython - &lt;&lt;'PY'\nimport asyncio\nfrom examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom examples.base_example.lowlevel_walkthrough import main\nasyncio.run(main(only_steps=[7,8,9,10]))\nPY\n</code></pre></p>"},{"location":"Examples/Common/diag_connect/","title":"\ud83d\udd0c <code>examples/common/diag_connect.py</code>","text":"<p>Tiny network sanity check for your <code>GRPC_SERVER</code> \u2014 from DNS all the way to gRPC TLS channel readiness. Perfect for answering: \u201cIs the network broken or is it my code?\u201d </p>"},{"location":"Examples/Common/diag_connect/#plain-english","title":"\ud83e\udded Plain English","text":"<p>Runs four checks in order and stops at the first failure:</p> <ol> <li>DNS \u2192 resolve host.</li> <li>TCP \u2192 open a raw TCP socket to <code>host:port</code>.</li> <li>TLS \u2192 perform the handshake (SNI = <code>HOST</code>).</li> <li>gRPC \u2192 create a secure aio channel and await <code>channel_ready()</code>.</li> </ol> <p>Prints <code>OK</code> / <code>FAIL \u2026</code> for each step.</p> <p>The script does not set a process exit code. Read the text output.</p>"},{"location":"Examples/Common/diag_connect/#source","title":"\ud83d\udcc1 Source","text":"<p><code>PyMT5/examples/common/diag_connect.py</code></p> <p>Deps: stdlib + <code>grpc</code> (aio channel).</p>"},{"location":"Examples/Common/diag_connect/#environment","title":"\u2699\ufe0f Environment","text":"<p>Single env var (with default):</p> <pre><code>GRPC_SERVER=mt5.mrpc.pro:443\n</code></pre>"},{"location":"Examples/Common/diag_connect/#quick-ways-to-set-grpc_server","title":"Quick ways to set <code>GRPC_SERVER</code>","text":"<p>PowerShell (Windows):</p> <pre><code>$env:GRPC_SERVER = \"your.host.com:443\"\n</code></pre> <p>CMD (Windows):</p> <pre><code>set GRPC_SERVER=your.host.com:443\n</code></pre> <p>Bash (Linux/macOS):</p> <pre><code>export GRPC_SERVER=your.host.com:443\n</code></pre>"},{"location":"Examples/Common/diag_connect/#how-to-run","title":"\u25b6\ufe0f How to run","text":"<p>Pick the command that matches where you run it from.</p> <p>A. From the parent of the <code>PyMT5/</code> package folder:</p> <pre><code>python -m PyMT5.examples.common.diag_connect\n</code></pre> <p>B. From inside the <code>PyMT5/</code> package folder:</p> <pre><code>python -m examples.common.diag_connect\n</code></pre> <p>C. Directly by path:</p> <pre><code>python PyMT5/examples/common/diag_connect.py\n# or, if your CWD is PyMT5/:\npython examples/common/diag_connect.py\n</code></pre> <p>If you use a virtual env, replace <code>python</code> with <code>.venv/Scripts/python</code> (Windows) or <code>.venv/bin/python</code> (Unix).</p>"},{"location":"Examples/Common/diag_connect/#sample-output","title":"\ud83d\udda8\ufe0f Sample output","text":"<pre><code>[1] DNS resolve myhost\u2026\n    OK: ['203.0.113.10', '203.0.113.12']\n[2] TCP connect myhost:443\u2026\n    OK\n[3] TLS handshake myhost:443\u2026\n    OK\n[4] gRPC channel_ready (TLS) myhost:443\u2026\n    OK (channel ready)\n</code></pre>"},{"location":"Examples/Common/diag_connect/#troubleshooting-by-step","title":"\ud83e\uddef Troubleshooting (by step)","text":"<p>[1] FAIL DNS \u2014 host typo, DNS override (hosts/VPN/adbocker), DNS server down.</p> <p>\u2705 Check: <code>nslookup your.host.com</code> / <code>dig your.host.com</code>.</p> <p>[2] FAIL TCP \u2014 port closed by server/firewall, corporate proxy/DPI, routing issue.</p> <p>\u2705 Check: <code>telnet host 443</code> / <code>Test-NetConnection -Port 443</code>.</p> <p>[3] FAIL TLS \u2014 wrong SNI/cert, MITM proxy without trusted root, bad system clock.</p> <p>\u2705 Check: <code>openssl s_client -connect host:443 -servername host</code>.</p> <p>[4] FAIL gRPC TLS \u2014 service is HTTP(S) but not gRPC/HTTP2, ALPN quirks, requires special creds/mTLS.</p> <p>\u2705 Ensure it is a gRPC endpoint and intermediates are valid.</p>"},{"location":"Examples/Common/diag_connect/#notes","title":"\ud83d\udca1 Notes","text":"<ul> <li><code>channel_ready()</code> waits 10s. In high\u2011latency nets you may bump the timeout in code if needed.</li> <li><code>CERTIFICATE_VERIFY_FAILED</code> often means a corporate TLS proxy. Install the proxy CA certificate into your OS store (no code change required).</li> <li>Some proxies/firewalls break ALPN/TLS \u2192 step [3] OK, step [4] fails.</li> </ul>"},{"location":"Examples/Common/diag_connect/#next","title":"Next","text":"<p>If all four steps are OK, infra is fine. Jump to root <code>examples/</code> (market/history/streaming/trading). If a step fails, use the Troubleshooting hints to fix the corresponding network layer first.</p> <p>\ud83e\uddf1 Slow and steady: DNS \u2192 TCP \u2192 TLS \u2192 gRPC.</p>"},{"location":"Examples/Common/env/","title":"\u2699\ufe0f <code>examples/common/env.py</code>","text":"<p>Helpers for loading environment, auto\u2011patching protobuf shims, and creating a ready\u2011to\u2011use MT5 account (with graceful shutdown). No code changes required in your examples \u2014 just <code>await connect()</code> / <code>await shutdown(acc)</code></p>"},{"location":"Examples/Common/env/#what-this-module-does","title":"\ud83e\udded What this module does","text":"<ul> <li>Applies pb2 shim on import (<code>pb2_shim.apply_patch()</code>), so you can import enums/messages from <code>MetaRpcMT5.*</code> consistently.</li> <li>Loads environment via <code>python-dotenv</code> if available (<code>.env</code> is optional).</li> <li>Picks the best adapter: prefers <code>MetaRpcMT5Ex.MT5AccountEx</code>, falls back to <code>MetaRpcMT5.mt5_account.MT5Account</code>.</li> <li> <p>Connects with retries: tries</p> </li> <li> <p><code>connect_by_server_name(server_name, \u2026)</code></p> </li> <li><code>connect_by_host_port(host, port, \u2026)</code></li> <li><code>connect(host=\u2026, port=\u2026, timeout_seconds=\u2026)</code> (or <code>deadline</code> variant)</li> <li>Shuts down nicely: attempts <code>disconnect()</code> \u2192 <code>close()</code> \u2192 <code>shutdown()</code> (awaits if coroutine).</li> </ul>"},{"location":"Examples/Common/env/#public-api","title":"\ud83d\udd0c Public API","text":"<pre><code>async def connect() -&gt; MT5Account:\n    \"\"\"Returns a connected MT5 account using env vars and small backoff between retries.\"\"\"\n\nasync def shutdown(acc) -&gt; None:\n    \"\"\"Best\u2011effort graceful disconnect. Safe to call multiple times; ignores errors.\"\"\"\n</code></pre>"},{"location":"Examples/Common/env/#environment-variables","title":"\ud83c\udf0d Environment variables","text":"<p>These are read at import / connect time (with defaults where noted):</p> <pre><code># credentials &amp; routing\nMT5_LOGIN=12345678\nMT5_PASSWORD=secret\nMT5_SERVER=MetaQuotes-Demo\nGRPC_SERVER=mt5.mrpc.pro:443\n\n# connection behavior\nTIMEOUT_SECONDS=90\nCONNECT_RETRIES=3\n\n# app behavior\nMT5_ENABLE_TRADING=0     # 1 = allow trading examples\nMT5_SYMBOL=EURUSD        # default symbol\nMT5_VOLUME=0.10          # default lot size\n</code></pre> <p>Tip: If <code>.env</code> exists, it will be auto\u2011loaded by <code>python-dotenv</code> (if installed). Otherwise use your shell to export variables.</p>"},{"location":"Examples/Common/env/#minimal-usage-example","title":"\ud83e\uddea Minimal usage example","text":"<pre><code># comments intentionally in English\nimport asyncio\nfrom examples.common.env import connect, shutdown\n\nasync def main():\n    acc = await connect()\n    try:\n        print(\"[OK] connected as:\", getattr(acc, \"user\", None))\n        # ... do your calls here ...\n    finally:\n        await shutdown(acc)\n        print(\"[OK] shutdown\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"Examples/Common/env/#troubleshooting","title":"\ud83e\uddef Troubleshooting","text":"<ul> <li>Wrong creds / server \u2192 adapter raises on <code>connect_*</code>; check <code>MT5_LOGIN/MT5_PASSWORD/MT5_SERVER</code>.</li> <li>gRPC unreachable \u2192 verify <code>GRPC_SERVER</code> (host:port), firewall/VPN, and run <code>diag_connect.py</code> first.</li> <li>Timeouts \u2192 increase <code>TIMEOUT_SECONDS</code> or <code>CONNECT_RETRIES</code>.</li> <li>Trading examples skip actions \u2192 you likely have <code>MT5_ENABLE_TRADING=0</code>.</li> </ul>"},{"location":"Examples/Common/env/#adapter-preference","title":"Adapter preference","text":"<pre><code>try:\n    from MetaRpcMT5Ex import MT5AccountEx as MT5Account\nexcept Exception:\n    from MetaRpcMT5.mt5_account import MT5Account\n</code></pre> <p>If the extended adapter is present, you\u2019ll get extra capabilities for free \u2014 the rest of your code doesn\u2019t change.</p>"},{"location":"Examples/Common/env/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Adds project roots to <code>sys.path</code> (<code>ROOT</code>, <code>package</code>, <code>ext</code>) so that imports work in example runs.</li> <li>Uses a small incremental sleep between retries (0.5s, 1.0s, \u2026) for friendlier backoff.</li> <li><code>shutdown()</code> is idempotent-ish: safe even if the connection partially failed.</li> </ul> <p>That\u2019s it. Keep calm and <code>await connect()</code>.</p>"},{"location":"Examples/Common/pb2_shim/","title":"\ud83e\udde9 <code>examples/common/pb2_shim.py</code>","text":"<p>Compatibility shim that keeps the examples working across different <code>MetaRpcMT5</code> wheel builds. It exposes commonly used pb2 modules on the package and re\u2011exports request classes so callers can import them from <code>MetaRpcMT5.mt5_term_api_account_helper_pb2</code> even if the real classes live in other pb2s.</p>"},{"location":"Examples/Common/pb2_shim/#plain-english","title":"\ud83e\udded Plain English","text":"<p>Some wheels ship <code>Symbol*Request</code> and friends in <code>mt5_term_api_market_info_pb2</code> (MI), while code expects them under <code>mt5_term_api_account_helper_pb2</code> (AH). This shim:</p> <ol> <li>Exposes pb2 / *_grpc modules as attributes of <code>MetaRpcMT5</code> (best\u2011effort).</li> <li>Aliases <code>AccountHelperServiceStub</code> \u2192 <code>AccountHelperStub</code> when only the latter exists.</li> <li>Re\u2011exports request classes from MarketInfo and AccountInformation pb2s onto AccountHelper pb2.</li> </ol> <p>Idempotent and safe: if a class is already present, nothing happens. If a module is missing, it silently skips.</p>"},{"location":"Examples/Common/pb2_shim/#public-api","title":"\ud83d\udd0c Public API","text":"<pre><code>from examples.common.pb2_shim import apply_patch\napply_patch()  # call once, as early as possible\n</code></pre> <p>Put it at the very top of your example scripts, before importing enums/messages from <code>MetaRpcMT5.*</code>.</p>"},{"location":"Examples/Common/pb2_shim/#what-it-exposes-aliases","title":"\ud83d\udce6 What it exposes / aliases","text":"<p>Modules exposed on <code>MetaRpcMT5</code> (best\u2011effort):</p> <ul> <li><code>mt5_term_api_account_helper_pb2</code> (+ <code>_grpc</code>)</li> <li><code>mt5_term_api_market_info_pb2</code> (+ <code>_grpc</code>)</li> <li><code>mt5_term_api_account_information_pb2</code> (+ <code>_grpc</code>)</li> </ul> <p>Service alias (grpc):</p> <ul> <li>If <code>AccountHelperServiceStub</code> is missing but <code>AccountHelperStub</code> exists, create <code>AccountHelperServiceStub = AccountHelperStub</code>.</li> </ul> <p>Request classes re\u2011exported onto <code>account_helper_pb2</code>:</p> <ul> <li> <p>From MarketInfo:</p> </li> <li> <p><code>SymbolsTotalRequest</code>, <code>SymbolExistRequest</code>, <code>SymbolNameRequest</code>, <code>SymbolSelectRequest</code></p> </li> <li><code>SymbolInfoTickRequest</code>, <code>SymbolInfoDoubleRequest</code>, <code>SymbolInfoIntegerRequest</code>, <code>SymbolInfoStringRequest</code></li> <li><code>SymbolInfoMarginRateRequest</code>, <code>SymbolInfoSessionQuoteRequest</code>, <code>SymbolInfoSessionTradeRequest</code></li> <li><code>SymbolIsSynchronizedRequest</code>, <code>MarketBookAddRequest</code>, <code>MarketBookGetRequest</code>, <code>MarketBookReleaseRequest</code></li> <li> <p>From AccountInformation:</p> </li> <li> <p><code>AccountInfoDoubleRequest</code>, <code>AccountInfoIntegerRequest</code>, <code>AccountInfoStringRequest</code></p> </li> </ul> <p>Result: code can keep importing all these from <code>MetaRpcMT5.mt5_term_api_account_helper_pb2</code>, regardless of where they physically live in your wheel.</p>"},{"location":"Examples/Common/pb2_shim/#quick-selftest-optional","title":"\ud83e\uddea Quick self\u2011test (optional)","text":"<p>Run in your project root (<code>PyMT5/</code>):</p> <pre><code>python - &lt;&lt;'PY'\nimport importlib\nfrom examples.common.pb2_shim import apply_patch; apply_patch()\nah = importlib.import_module('MetaRpcMT5.mt5_term_api_account_helper_pb2')\nmi = importlib.import_module('MetaRpcMT5.mt5_term_api_market_info_pb2')\nfor n in [\n  'SymbolSelectRequest','SymbolInfoDoubleRequest','SymbolInfoIntegerRequest','SymbolInfoStringRequest'\n]:\n    print(f\"{n:24} AH:\", hasattr(ah,n), '| MI:', hasattr(mi,n))\nPY\n</code></pre> <p>You should see <code>AH: True</code> (either native or added by the shim). If not, the class is not present in the wheel at all.</p>"},{"location":"Examples/Common/pb2_shim/#typical-usage","title":"\ud83e\uddf0 Typical usage","text":"<pre><code>from examples.common.pb2_shim import apply_patch\napply_patch()\n\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as AH\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as MI\n# Now both AH and MI expose the request classes used by examples.\n</code></pre>"},{"location":"Examples/Common/pb2_shim/#troubleshooting","title":"\ud83e\uddef Troubleshooting","text":"<ul> <li><code>AttributeError: ... has no attribute 'Symbol...Request'</code>   Call <code>apply_patch()</code> before any imports from <code>MetaRpcMT5.*</code> and re\u2011run. If it persists, the class likely does not exist in this wheel.</li> <li><code>ImportError</code> for pb2 modules   Ensure your Python path includes the project <code>package/</code> directory (the examples\u2019 <code>env.py</code> already adds it).</li> <li>Service name mismatch   If your gRPC stub class is only <code>AccountHelperStub</code>, the shim auto\u2011creates <code>AccountHelperServiceStub</code> alias.</li> </ul>"},{"location":"Examples/Common/pb2_shim/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>The shim is no\u2011op when a symbol already exists on AH (avoids overriding the real thing).</li> <li>The module list is conservative; add more <code>_expose(...)</code> entries if you introduce new pb2s.</li> <li>Silent failures are by design: examples should remain runnable across multiple wheel layouts without blowing up on import.</li> </ul>"},{"location":"Examples/Common/pb2_shim/#minimal-footprint","title":"\ud83d\udd12 Minimal footprint","text":"<p>This file does not touch the package itself and lives entirely under <code>examples/common/</code>. Removing it simply removes the compatibility layer \u2014 your core SDK remains unchanged.</p> <p>That\u2019s it. Keep it at the top of your examples and enjoy smoother runs across different MetaRpcMT5 builds.</p>"},{"location":"Examples/Common/utils/","title":"\ud83d\udee0\ufe0f <code>examples/common/utils.py</code>","text":"<p>Tiny helpers for console UX in examples: section headers, pretty printing, and a safe async wrapper with uniform logs.</p>"},{"location":"Examples/Common/utils/#whats-inside","title":"\ud83e\udded What\u2019s inside","text":"<pre><code>def title(s: str) -&gt; None: ...\ndef pprint(obj: Any) -&gt; None: ...\nasync def safe_async(name: str, fn: Callable[..., Awaitable], *args, **kwargs) -&gt; Optional[Any]: ...\n</code></pre> <ul> <li><code>title()</code> \u2014 prints a clear section header: <code>==================== Name ====================</code></li> <li><code>pprint()</code> \u2014 JSON pretty\u2011prints Python objects (falls back to <code>str(obj)</code> if not JSON\u2011serializable).</li> <li><code>safe_async()</code> \u2014 runs an async call with consistent logging, pretty\u2011prints the result, catches exceptions, and returns the result (or <code>None</code> if there was an error or no return value).</li> </ul>"},{"location":"Examples/Common/utils/#how-to-use","title":"\ud83d\udd0c How to use","text":""},{"location":"Examples/Common/utils/#1-headers","title":"1) Headers","text":"<pre><code>from examples.common.utils import title\n\ntitle(\"Quick Start\")\n</code></pre>"},{"location":"Examples/Common/utils/#2-pretty-print","title":"2) Pretty print","text":"<pre><code>from examples.common.utils import pprint\n\ndata = {\"symbol\": \"EURUSD\", \"bid\": 1.09234}\npprint(data)\n</code></pre>"},{"location":"Examples/Common/utils/#3-safe-async-calls","title":"3) Safe async calls","text":"<pre><code>from examples.common.utils import safe_async\n\n# simplest form \u2014 no args\nawait safe_async(\"account_summary\", acc.account_summary)\n\n# with positional args\nawait safe_async(\"symbol_select\", acc.symbol_select, \"EURUSD\", True)\n\n# with kwargs (will be shown in the call line)\nawait safe_async(\"positions_history\", acc.positions_history, from_ts=..., to_ts=...)\n</code></pre> <p>You\u2019ll see a line like:</p> <pre><code>&gt; symbol_select('EURUSD', True)\nOK (no return)\n</code></pre> <p>Or, if it returns a value, a JSON pretty dump of the result.</p>"},{"location":"Examples/Common/utils/#with-grpc-stubs-metadata-timeouts","title":"\ud83e\udd1d With gRPC stubs (metadata, timeouts)","text":"<p><code>safe_async</code> accepts the target callable and its args. For gRPC stubs that require <code>metadata=</code> or <code>timeout=</code>, use <code>functools.partial</code> or pass them as kwargs if your wrapper supports it:</p> <pre><code>from functools import partial\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as MI\n\nreq = MI.SymbolInfoDoubleRequest(symbol=\"EURUSD\", type=MI.SymbolInfoDoubleProperty.SYMBOL_BID)\nawait safe_async(\n    \"symbol_info_double(BID)\",\n    partial(acc.market_info_client.SymbolInfoDouble, req),\n    metadata=acc.get_headers(),\n    timeout=30.0,\n)\n</code></pre>"},{"location":"Examples/Common/utils/#output-rules","title":"\ud83d\udccb Output rules","text":"<ul> <li>Prelude line: <code>&gt; {name}({args_repr})</code></li> <li>Success with value: prints JSON (<code>ensure_ascii=False</code>, <code>indent=2</code>, <code>default=str</code>).</li> <li>Success with no value: prints <code>OK (no return)</code>.</li> <li>Error: prints <code>[ERROR] {ExceptionType}: {message}</code> and returns <code>None</code>.</li> </ul> <p>Note: Non\u2011JSON objects (e.g., datetime, Decimal, protobuf messages) are rendered via <code>str(obj)</code> because of <code>default=str</code>.</p>"},{"location":"Examples/Common/utils/#troubleshooting-tips","title":"\ud83e\uddef Troubleshooting &amp; tips","text":"<ul> <li>Nothing printed after the prelude? Your function likely returned <code>None</code> \u2192 you\u2019ll see <code>OK (no return)</code>.</li> <li>Protobuf objects look too terse? Convert them yourself before printing, e.g. with <code>google.protobuf.json_format.MessageToDict</code>.</li> <li>Need to keep going on errors? <code>safe_async</code> already catches and returns <code>None</code>, so your script won\u2019t crash \u2014 just check for <code>None</code> if you need branching.</li> </ul> <pre><code>res = await safe_async(\"symbol_info_double(BID)\", ...)\nif res is None:\n    print(\"skip spread calc \u2014 no data\")\n</code></pre>"},{"location":"Examples/Common/utils/#minimal-pattern-all-together","title":"\ud83e\uddea Minimal pattern (all together)","text":"<pre><code>from examples.common.utils import title, safe_async\n\ntitle(\"Symbols &amp; Market\")\nawait safe_async(\"symbol_select\", acc.symbol_select, SYMBOL, True)\nbid = await safe_async(\"symbol_info_double(BID)\", acc.symbol_info_double, SYMBOL, SDouble.SYMBOL_BID)\nask = await safe_async(\"symbol_info_double(ASK)\", acc.symbol_info_double, SYMBOL, SDouble.SYMBOL_ASK)\nif isinstance(bid, (int, float)) and isinstance(ask, (int, float)):\n    print(\"spread:\", float(ask) - float(bid))\n</code></pre>"},{"location":"Examples/Common/utils/#design-notes","title":"\ud83d\udcdd Design notes","text":"<ul> <li>Output format is stable and greppable, handy for quick logs and CI.</li> </ul> <p>That\u2019s it \u2014 small, predictable, and copy\u2011paste friendly. \ud83d\ude80</p>"},{"location":"I_want_to_add/Architecture_DataFlow/","title":"\ud83c\udfd7\ufe0f Architecture &amp; Data Flow (PyMT5 + MT5)","text":"<p>A practical map of how our Python SDK, gRPC services, and the MT5 terminal talk to each other \u2014 with just enough humor to keep the margin level above 100%.</p>"},{"location":"I_want_to_add/Architecture_DataFlow/#big-picture","title":"\ud83d\uddfa\ufe0f Big Picture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 MT5 Terminal                  \u2502\n\u2502      (broker login, quotes, trades)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502 local/IPC\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      mt5_term_api.* (gRPC server)             \u2502\n\u2502      Services: MarketInfo, Trade...           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502 gRPC\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Python SDK (MetaRpcMT5)                  \u2502\n\u2502      MT5Account (package/MetaRpcMT5/...)      \u2502\n\u2502      + generated pb2/pb2_grpc stubs           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502 async/await\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Your App / Examples                      \u2502\n\u2502      (docs, examples, services)               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>You write: high\u2011level <code>await acct.method(...)</code> calls. SDK does: request building, metadata, deadlines, retries, unwraps <code>.reply.data</code>. Server does: talks to the real MT5 terminal and executes.</p>"},{"location":"I_want_to_add/Architecture_DataFlow/#main-components-by-folders","title":"\u2699\ufe0f Main Components (by folders)","text":""},{"location":"I_want_to_add/Architecture_DataFlow/#sdk-grpc-contracts-client-side","title":"\ud83d\udd29 SDK &amp; gRPC contracts (client side)","text":"<ul> <li><code>package/MetaRpcMT5/mt5_account.py</code> \u2014 MT5Account wrappers (public API).</li> <li><code>package/MetaRpcMT5/mt5_term_api_*.py</code> \u2014 pb2 messages (requests/replies/enums).</li> <li><code>package/MetaRpcMT5/mt5_term_api_*_pb2_grpc.py</code> \u2014 stubs (client bindings).</li> <li><code>package/MetaRpcMT5/mrpc_mt5_error_pb2.py</code> \u2014 errors/retcodes mapping.</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#app-layer-helpers-optional-services","title":"\ud83e\udde0 App layer &amp; helpers (optional services)","text":"<ul> <li><code>app/core/mt5_connect_helper.py</code> \u2014 connection bootstrap, metadata.</li> <li><code>app/core/mt5_service.py</code> \u2014 higher\u2011level service orchestration.</li> <li><code>app/services/streams_service.py</code> \u2014 stream fan\u2011out (ticks/trade events).</li> <li><code>app/services/trading_service.py</code> \u2014 trading flows (send/modify/close).</li> <li><code>app/services/history_service.py</code> \u2014 history pagination &amp; caching.</li> <li><code>app/patches/*.py</code> \u2014 compatibility tweaks (symbol params, market info, etc.).</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#docs-examples","title":"\ud83d\udcda Docs &amp; Examples","text":"<ul> <li><code>docs/MT5Account/**</code> \u2014 method specs &amp; overviews (what you read now).</li> <li><code>examples/quick_start_connect.py</code> \u2014 minimal bootstrap.</li> <li><code>examples/mt5_account_ex.py</code> \u2014 end\u2011to\u2011end usage playground.</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#data-flow-unary","title":"\ud83d\udd00 Data Flow (Unary)","text":"<ol> <li>Your call \u2192 `await acct.symbol_info_double(...)</li> <li>Wrapper builds <code>Request</code>, sets <code>metadata</code>, computes <code>timeout</code> from <code>deadline</code>.</li> <li>Stub \u2192 <code>ServiceStub.Method(request, metadata, timeout)</code>.</li> <li>Server performs the operation via MT5 terminal.</li> <li>Reply \u2192 SDK unwraps <code>reply.data</code> \u2192 you get clean <code>*.Data</code> (or a primitive like <code>float</code>).</li> </ol> <pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as ai_pb2\nvalue = await acct.account_info_double(ai_pb2.AccountInfoDoublePropertyType.ACCOUNT_EQUITY)\nprint(f\"Equity: {value:.2f}\")\n</code></pre>"},{"location":"I_want_to_add/Architecture_DataFlow/#data-flow-streaming","title":"\ud83d\udd04 Data Flow (Streaming)","text":"<p>Streams keep a channel open and push events. Use cancellation_event and keep handlers non\u2011blocking.</p> <pre><code>import asyncio\nstop = asyncio.Event()\nasync for ev in acct.on_trade(cancellation_event=stop):\n    queue.put_nowait(ev)  # heavy work elsewhere\n    if should_stop(ev):\n        stop.set()\n</code></pre> <p>Common streams:</p> <ul> <li><code>on_symbol_tick</code> \u2014 live ticks per symbol.</li> <li><code>on_trade</code> \u2014 high\u2011level deltas (orders/positions/deals) + account snapshot.</li> <li><code>on_trade_transaction</code> \u2014 low\u2011level transaction + request + result.</li> <li><code>on_position_profit</code> \u2014 timed P/L frames for positions.</li> <li><code>on_positions_and_pending_orders_tickets</code> \u2014 IDs\u2011only snapshots for set\u2011diff.</li> </ul> <p>Links: Subscriptions Overview</p>"},{"location":"I_want_to_add/Architecture_DataFlow/#rpc-domains-where-to-look","title":"\ud83e\udde9 RPC Domains &amp; Where to Look","text":"<ul> <li>Account Info \u2192 balance/equity/margins:   Overview</li> <li>Orders \u00b7 Positions \u00b7 History \u2192 live &amp; past trading objects:   Overview</li> <li>Symbols &amp; Market \u2192 symbol catalog, properties, sessions, DOM:   Overview</li> <li>Trading Ops \u2192 send/modify/close, checks, margin calc:   Overview</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#highlights","title":"\u2728 Highlights","text":"<ul> <li>Wrappers return payloads (<code>*.Data</code>) already unwrapped from replies.</li> <li>Deadlines become stub timeouts; pass them for predictable latency.</li> <li>Retries &amp; reconnects handled in wrappers (<code>execute_with_reconnect(...)</code>).</li> <li>UTC timestamps everywhere; convert once near UI.</li> <li>Server\u2011side sorting via enums; client\u2011side filtering for symbol lists is often cheaper.</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#developer-notes","title":"\ud83d\udee0\ufe0f Developer Notes","text":"<ul> <li>Prefer enums from pb2 (no \u201cmagic numbers\u201d).</li> <li>For Market Book use the trio:   market_book_add \u2192 market_book_get \u2192 market_book_release.</li> <li>Cold\u2011start: get a full snapshot once (OpenedOrders), then maintain via streams.</li> <li>Cheap change detection: IDs\u2011only stream \u2192 fetch details only on change.</li> </ul>"},{"location":"I_want_to_add/Architecture_DataFlow/#minimal-bootstrap-example","title":"\ud83d\udce6 Minimal Bootstrap (Example)","text":"<pre><code>from MetaRpcMT5.mt5_account import MT5Account\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nacct = MT5Account(...)\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\nprint(len(od.opened_orders), len(od.position_infos))\n</code></pre>"},{"location":"I_want_to_add/Architecture_DataFlow/#debug-troubleshooting","title":"\ud83e\uddea Debug &amp; Troubleshooting","text":"<ul> <li>Log transport issues with <code>app/utils/grpc_debug.py</code>.</li> <li>Keep both retcode int and string (see <code>mrpc_mt5_error_pb2.py</code>).</li> <li>If a stream \"goes quiet\", check that your handler isn\u2019t blocking and the release was not called prematurely (DOM).</li> </ul>"},{"location":"I_want_to_add/Glossary/","title":"\ud83d\udcd6 Glossary","text":""},{"location":"I_want_to_add/Glossary/#quick-cheat-sheet","title":"Quick Cheat Sheet","text":"Term Example Meaning Symbol <code>EURUSD</code>, <code>XAUUSD</code> Trading instrument identifier. Lot <code>1.00</code> \u2192 usually 100,000 units Standard trade size. Volume <code>0.10</code>, <code>2.50</code> Lots to trade (can be fractional). SL <code>1.09500</code> Stop Loss \u2014 protective exit level. TP <code>1.10500</code> Take Profit \u2014 target exit level. Ticket <code>12345678</code> Unique order/position/deal ID (uint64 in most RPCs). Digits <code>5</code> Quote precision; e.g., 1.23456 for 5 digits. Point <code>0.00001</code> (EURUSD) Smallest price step for the symbol. Pip <code>0.0001</code> (most FX majors) Conventional 1 \u00abpip\u00bb (may differ from <code>point</code>). Margin <code>100.00</code> Funds locked for open exposure. Equity <code>1000.00</code> Balance \u00b1 floating P/L. Free Margin <code>900.00</code> Equity \u2212 Margin. Leverage <code>1:500</code> Borrowed funds ratio. Market Watch selected symbols in the terminal The watchlist used by <code>selected_only=True</code> in some RPCs. DOM/Book Market Depth Level\u20112 price ladder; see Market Book methods. Enum <code>BMT5_ENUM_*</code>, <code>MRPC_ENUM_*</code> Strongly\u2011typed constants \u2014 no \u00abmagic numbers\u00bb. Retcode <code>10009</code>, <code>TRADE_RETCODE_DONE</code> Trade server return code (see error mapping). Deadline <code>now() + 3s</code> Per\u2011call absolute deadline \u2192 turned into gRPC timeout. Cancellation <code>asyncio.Event()</code> Cooperative stop for retry/stream wrappers. Stream <code>on_trade()</code>, <code>on_symbol_tick()</code> Long\u2011lived server push (events until cancelled)."},{"location":"I_want_to_add/Glossary/#order-position-lifecycle","title":"\ud83d\udcca Order &amp; Position Lifecycle","text":"<pre><code>   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502  New Order  \u2502  (market or pending)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502 executed \u2192 DEAL_ADD (may create/affect POSITION)\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Opened    \u2502  (POSITION with floating P/L)\n   \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n      SL     TP\n      \u2502      \u2502\n      \u25bc      \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      pending order can be\n   \u2502   Closed    \u2502 \u25c4\u2500\u2500\u2500 deleted/cancelled before fill\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>MT5 note: in hedging mode multiple positions per symbol can coexist; in netting \u2014 one net position per symbol.</p>"},{"location":"I_want_to_add/Glossary/#account-terms","title":"\ud83e\uddd1\u200d\ud83d\udcbb Account Terms","text":"<ul> <li>Login / Server \u2014 broker account ID and server name.</li> <li> <p>Balance / Equity / Margin / Free \u2014 see cheat sheet; numbers come from:</p> </li> <li> <p>Account Information Overview</p> </li> <li>Currency Digits \u2014 use <code>ACCOUNT_CURRENCY_DIGITS</code> (integer) to format money correctly.</li> </ul>"},{"location":"I_want_to_add/Glossary/#market-info-terms","title":"\ud83d\udcc8 Market Info Terms","text":"<ul> <li> <p>Symbol Inventory \u2014 size &amp; presence checks:</p> </li> <li> <p>symbols_total.md</p> </li> <li>symbol_exist.md</li> <li>symbol_name.md</li> <li> <p>symbol_select.md</p> </li> <li> <p>Properties \u2014 double/int/string getters &amp; bulk params:</p> </li> <li> <p>symbol_info_double.md</p> </li> <li>symbol_info_integer.md</li> <li>symbol_info_string.md</li> <li> <p>symbol_params_many.md</p> </li> <li> <p>Quotes &amp; Sessions \u2014 tick snapshot and trading/quote sessions:</p> </li> <li> <p>symbol_info_tick.md</p> </li> <li>symbol_info_session_quote.md</li> <li> <p>symbol_info_session_trade.md</p> </li> <li> <p>Margin model \u2014 per\u2011order type margin rate &amp; calc helpers:</p> </li> <li> <p>symbol_info_margin_rate.md</p> </li> <li>order_calc_margin.md</li> <li> <p>tick_value_with_size.md</p> </li> <li> <p>Market Book (DOM) \u2014 subscribe/read/release:</p> </li> <li> <p>market_book_add.md</p> </li> <li>market_book_get.md</li> <li>market_book_release.md</li> </ul>"},{"location":"I_want_to_add/Glossary/#orders-history-terms","title":"\ud83d\udce6 Orders &amp; History Terms","text":"<ul> <li> <p>Live snapshot</p> </li> <li> <p>opened_orders.md</p> </li> <li> <p>opened_orders_tickets.md (IDs\u2011only)</p> </li> <li> <p>History</p> </li> <li> <p>order_history.md (orders + deals)</p> </li> <li> <p>positions_history.md</p> </li> <li> <p>Count</p> </li> <li> <p>positions_total.md</p> </li> </ul>"},{"location":"I_want_to_add/Glossary/#rpc-streaming-terms","title":"\ud83d\udd0c RPC &amp; Streaming Terms","text":"<ul> <li> <p>Unary RPC \u2014 one request \u2192 one reply; returns <code>*.Data</code> payload already unwrapped.</p> </li> <li> <p>Streaming RPC \u2014 server pushes events until you cancel:</p> </li> <li> <p>on_symbol_tick.md</p> </li> <li>on_trade.md</li> <li>on_trade_transaction.md</li> <li>on_position_profit.md</li> <li> <p>on_positions_and_pending_orders_tickets.md</p> </li> <li> <p>Deadline &amp; Cancellation \u2014 pass <code>deadline</code> (to set timeout) and <code>cancellation_event</code> (to stop cleanly).</p> </li> </ul>"},{"location":"I_want_to_add/Glossary/#errors-codes","title":"\ud83d\udee1\ufe0f Errors &amp; Codes","text":"<ul> <li>gRPC transport \u2014 timeouts, unavailables; wrappers auto\u2011retry via <code>execute_with_reconnect(...)</code>.</li> <li>Trade retcodes \u2014 see numeric+string mapping in <code>package/MetaRpcMT5/mrpc_mt5_error_pb2.py</code> and docs for <code>order_*</code> / <code>on_trade_transaction</code>.</li> <li>Validation \u2014 prefer enums over raw ints/strings to avoid typos.</li> </ul>"},{"location":"I_want_to_add/Glossary/#onepage-summary","title":"\u2705 One\u2011page Summary","text":"<ul> <li>Account \u2014 who you are &amp; your limits.</li> <li>Market Info \u2014 what you can trade and how it\u2019s specified.</li> <li>Orders/History \u2014 what\u2019s live &amp; what happened before.</li> <li>RPC \u2014 unary vs streaming, with deadlines &amp; cancellation.</li> <li>Errors \u2014 retcodes &amp; transport issues, surfaced cleanly by the SDK.</li> </ul>"},{"location":"I_want_to_add/Project_Map_and_Layers/","title":"PyMT5 \u2014 Project Map &amp; Layers","text":""},{"location":"I_want_to_add/Project_Map_and_Layers/#0-tldr","title":"0) TL;DR","text":"<ul> <li>You edit (green): <code>app/</code>, <code>examples/</code>, <code>ext/</code>, <code>docs/</code>, <code>main.py</code>, <code>settings.json</code>.</li> <li>Don\u2019t edit (lock): <code>package/MetaRpcMT5/*_pb2*.py</code> (generated gRPC stubs), build artifacts.</li> <li>Start here: <code>examples/quickstart.py</code> \u2192 verify connection \u2192 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432 <code>app/services/*</code>.</li> <li>Danger zone: \u0432\u0441\u0451, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0432\u0438\u0442\u044c/\u043c\u0435\u043d\u044f\u0442\u044c/\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043e\u0440\u0434\u0435\u0440\u0430 \u2014 \u0441\u043c. <code>app/services/trading_service.py</code>. \u2622\ufe0f</li> </ul> <p>Legend: \ud83d\udfe2 = safe to edit, \ud83d\udd12 = generated/infra, \ud83e\udde9 = extension/adapters, \ud83d\udcda = docs, \ud83e\uddea = tests, \ud83e\udde0 = core logic, \ud83d\udd0c = integration, \ud83e\udded = examples.</p>"},{"location":"I_want_to_add/Project_Map_and_Layers/#1-high-level-project-map","title":"1) High-Level Project Map","text":"<pre><code>PyMT5/\n\u251c\u2500\u2500 app/                    \ud83d\udfe2 \ud83e\udde0 Project application code (services, patches, utils)\n\u251c\u2500\u2500 docs/                   \ud83d\udfe2 \ud83d\udcda MkDocs content (guides, API, site)\n\u251c\u2500\u2500 examples/               \ud83d\udfe2 \ud83e\udded Minimal runnable scripts &amp; how-tos\n\u251c\u2500\u2500 ext/                    \ud83d\udfe2 \ud83e\udde9 Local adapters/shims that wrap the base package\n\u251c\u2500\u2500 package/                \ud83d\udd12 Published package sources (incl. generated pb2)\n\u251c\u2500\u2500 main.py                 \ud83d\udfe2 Entry point (optional)\n\u251c\u2500\u2500 settings.json           \ud83d\udfe2 Local/dev settings\n\u251c\u2500\u2500 README.md               \ud83d\udfe2 Project overview\n\u2514\u2500\u2500 mkdocs.yml              \ud83d\udfe2 Docs site config\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#11-app-you-will-work-here-80-of-the-time","title":"1.1 <code>app/</code> (you will work here 80% of the time)","text":"<pre><code>\ud83d\udfe2 app/\n\u251c\u2500\u2500 calc/                    Helpers for trading/math (e.g., P&amp;L, margin)\n\u251c\u2500\u2500 compat/                  Patches for pb2/terminal compatibility\n\u251c\u2500\u2500 core/                    Core service &amp; connection glue\n\u251c\u2500\u2500 patches/                 Small, focused monkey-patches\n\u251c\u2500\u2500 playground/              Local sandboxes (don\u2019t ship to prod)\n\u251c\u2500\u2500 services/                High-level APIs (history, streams, trading)\n\u251c\u2500\u2500 utils/                   Debug and helper utilities\n\u2514\u2500\u2500 __init__.py\n</code></pre> <p>Key files:</p> <ul> <li><code>core/mt5_service.py</code> \u2014 central async client/service wrapper. \ud83d\udd0c</li> <li><code>core/mt5_connect_helper.py</code> \u2014 resilient connect/disconnect/ensure logic. \ud83e\udde0</li> <li><code>services/trading_service.py</code> \u2014 high-level trading ops (market/pending, mgmt). \u2622\ufe0f</li> <li><code>services/streams_service.py</code> \u2014 subscriptions/streaming helpers. \ud83d\udd0c</li> <li><code>services/history_service.py</code> \u2014 historical queries. \ud83d\udd0c</li> <li><code>services/phases.py</code> \u2014 reusable step sequences (\u201cphases\u201d) for scenarios. \ud83e\udde0</li> <li><code>compat/mt5_patch.py</code> &amp; <code>patches/*</code> \u2014 targeted fallbacks/aliases for shaky pb2s. \ud83e\udde9</li> <li><code>utils/grpc_debug.py</code> \u2014 introspection/log helpers for gRPC calls. \ud83d\udee0\ufe0f</li> </ul>"},{"location":"I_want_to_add/Project_Map_and_Layers/#12-examples-actual-runnable-scripts","title":"1.2 <code>examples/</code> (actual runnable scripts)","text":"<pre><code>\ud83e\uddedexamples/\n\u251c\u2500\u2500 base_example/\n\u2502   \u2514\u2500\u2500 lowlevel_walkthrough           Driver for Steps 1\u201316 (select steps via env/CLI)\n\u251c\u2500\u2500 common/\n\u2502   \u251c\u2500\u2500 env.py                         Env helpers (creds, defaults)\n\u2502   \u251c\u2500\u2500 pb2_shim.py                    Patch/aliases for pb2 quirks\n\u2502   \u251c\u2500\u2500 diag_connect.py                Connectivity diagnostics\n\u2502   \u2514\u2500\u2500 utils.py                       Print/normalize helpers\n\u251c\u2500\u2500 legacy_examples/\n\u2502   \u2514\u2500\u2500 quick_start_connect.py         Old minimal connect (kept for reference)\n\u251c\u2500\u2500 account_info.py                    AccountInfo* demo\n\u251c\u2500\u2500 list_account_methods.py            Introspect callable methods\n\u251c\u2500\u2500 opened_snapshot.py                 Pending orders snapshot\n\u251c\u2500\u2500 orders_history.py                  Orders history\n\u251c\u2500\u2500 positions_history.py               Positions history\n\u251c\u2500\u2500 market_book.py                     DOM (book) demo\n\u251c\u2500\u2500 symbols_market.py                  Symbol info &amp; params\n\u251c\u2500\u2500 streaming_position_profit.py       Stream: position profit\n\u251c\u2500\u2500 streaming_positions_tickets.py     Stream: positions &amp; pending tickets\n\u251c\u2500\u2500 streaming_trade_events.py          Stream: trade deals\n\u251c\u2500\u2500 streaming_trade_tx.py              Stream: trade transactions\n\u251c\u2500\u2500 trading_basics.py                  Pre-trade checks\n\u251c\u2500\u2500 trading_safe.py                    Safe trading flow (checks \u2192 send/modify/close)\n\u251c\u2500\u2500 quickstart.py                      Quick start (connect &amp; ping)\n\u251c\u2500\u2500 cli.py                             CLI runner (wraps scenarios)\n\u2514\u2500\u2500 __main__.py\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#13-ext-local-adapters","title":"1.3 <code>ext/</code> (local adapters)","text":"<pre><code>ext/\n\u2514\u2500\u2500 MetaRpcMT5Ex/\n    \u251c\u2500\u2500 mt5_account_ex.py   \ud83d\udfe2 Server-name connect shim; auto-fallback to ConnectEx\n    \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#14-packagemetarpcmt5-generated-stubs-vendor-code-dont-touch","title":"1.4 <code>package/MetaRpcMT5</code> (generated stubs &amp; vendor code \u2014 don\u2019t touch)","text":"<pre><code>MetaRpcMT5/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mrpc_mt5_error_pb2(.py|_grpc.py)          \ud83d\udd12\n\u251c\u2500\u2500 mt5_term_api_*_pb2(.py|_grpc.py)          \ud83d\udd12 Generated request/response messages &amp; service stubs\n\u251c\u2500\u2500 mt5_account.py                             \ud83d\udfe1 Thin convenience wrapper (read-only edits recommended)\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#2-who-edits-what-policy","title":"2) Who edits what (policy)","text":"<ul> <li>\ud83d\udfe2 Edit freely: <code>app/*</code>, <code>examples/*</code>, <code>ext/*</code>, <code>main.py</code>, <code>settings.json</code>.</li> <li>\ud83d\uded1 Don\u2019t edit: <code>package/MetaRpcMT5/*_pb2*.py</code> (regenerate from proto instead).</li> <li>\ud83e\uddea Tests: put local tests in <code>package/tests</code> or add <code>tests/</code> at repo root.</li> </ul>"},{"location":"I_want_to_add/Project_Map_and_Layers/#3-project-trees","title":"3) Project Trees","text":""},{"location":"I_want_to_add/Project_Map_and_Layers/#31-top-level-depth-2","title":"3.1 Top-level (depth 2)","text":"<pre><code>PyMT5/\n\u251c\u2500\u2500 app/\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 ext/\n\u251c\u2500\u2500 package/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 settings.json\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#32-app-depth-3","title":"3.2 <code>app/</code> (depth 3)","text":"<pre><code>app/\n\u251c\u2500\u2500 calc/mt5_calc.py\n\u251c\u2500\u2500 compat/{mt5_patch.py, __init__.py}\n\u251c\u2500\u2500 core/{config.py, constants.py, mt5_connect_helper.py, mt5_service.py}\n\u251c\u2500\u2500 patches/{charts_copy_patch.py, market_info_patch.py, mt5_bind_patch.py,\n\u2502           patch_mt5_pb2_aliases.py, quiet_connect_patch.py, symbol_params_patch.py}\n\u251c\u2500\u2500 playground/live_test.py\n\u251c\u2500\u2500 services/{history_service.py, phases.py, streams_service.py, trading_probe.py, trading_service.py}\n\u251c\u2500\u2500 utils/grpc_debug.py\n\u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#33-examples-selected","title":"3.3 <code>examples/</code> (selected)","text":"<pre><code>examples/\n\u251c\u2500\u2500 base_example/lowlevel_walkthrough\n\u251c\u2500\u2500 common/{env.py, pb2_shim.py, diag_connect.py, utils.py}\n\u251c\u2500\u2500 legacy_examples/quick_start_connect.py\n\u251c\u2500\u2500 {quickstart.py, account_info.py, opened_snapshot.py, orders_history.py,\n\u2502    positions_history.py, market_book.py, symbols_market.py,\n\u2502    streaming_position_profit.py, streaming_positions_tickets.py,\n\u2502    streaming_trade_events.py, streaming_trade_tx.py,\n\u2502    trading_basics.py, trading_safe.py, list_account_methods.py, cli.py}\n\u2514\u2500\u2500 __main__.py\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#34-packagemetarpcmt5-excerpt","title":"3.4 <code>package/MetaRpcMT5</code> (excerpt)","text":"<pre><code>MetaRpcMT5/\n\u251c\u2500\u2500 mt5_account.py\n\u251c\u2500\u2500 mt5_term_api_..._pb2.py\n\u251c\u2500\u2500 mt5_term_api_..._pb2_grpc.py\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"I_want_to_add/Project_Map_and_Layers/#4-how-to-build-a-scenario-step-by-step","title":"4) How to build a scenario (step-by-step)","text":"<ol> <li>Start in <code>examples/</code> \u2014 sketch a minimal script that calls one or two <code>MT5Service</code> methods.</li> <li>Promote it into <code>app/services/</code> as a function (<code>async def your_scenario(...)</code>).</li> <li>Compose phases using <code>app/services/phases.py</code> if the scenario has multiple steps.</li> <li>Patch carefully \u2014 if you hit pb2 differences, look at <code>app/compat/mt5_patch.py</code> and <code>app/patches/*</code>.</li> <li>Stream or poll \u2014 for ticks/transactions use <code>streams_service.py</code>; for history use <code>history_service.py</code>.</li> <li>Wire up config via <code>core/config.py</code> (env, defaults) and reuse <code>core/mt5_connect_helper.py</code>.</li> </ol> <p>\u201cWishing you green candles, quiet terminals, and reproducible wins. \ud83d\udfe2\u201d</p>"},{"location":"MT5Account/BASE/","title":"MT5Account \u2014 Master Overview","text":"<p>One page to orient fast: what lives where, how to choose the right API, and jump links to every overview and method spec in this docs set.</p>"},{"location":"MT5Account/BASE/#start-here-section-overviews","title":"\ud83d\udea6 Start here \u2014 Section Overviews","text":"<ul> <li> <p>Account_Information \u2014 Overview   Account balance/equity/margins, single\u2011value getters &amp; summary.</p> </li> <li> <p>Orders.Positions.History \u2014 Overview   What\u2019s open now, tickets, orders/deals history, positions history.</p> </li> <li> <p>Symbols_and_Market \u2014 Overview   Symbols inventory, properties, sessions, margin rates, market book (DOM).</p> </li> <li> <p>Trading_Operations \u2014 Overview   Place/modify/close orders, preflight checks, margin calculations.</p> </li> <li> <p>Subscriptions_Streaming \u2014 Overview   Live streams: ticks, trade deltas, transactions, P/L snapshots, IDs\u2011only.</p> </li> </ul>"},{"location":"MT5Account/BASE/#how-to-pick-an-api","title":"\ud83e\udded How to pick an API","text":"If you need\u2026 Go to\u2026 Typical calls A single account metric Account_Information <code>account_info_double/integer/string</code>, <code>account_summary</code> Live objects or history Orders.Positions.History <code>opened_orders</code>, <code>opened_orders_tickets</code>, <code>order_history</code>, <code>positions_history</code>, <code>positions_total</code> Symbol specs &amp; market plumbing Symbols_and_Market <code>symbol_info_*</code>, <code>symbols_total</code>, <code>market_book_*</code> Trading actions / feasibility Trading_Operations <code>order_send/modify/close</code>, <code>order_check</code>, <code>order_calc_margin</code> Realtime updates Subscriptions_Streaming <code>on_symbol_tick</code>, <code>on_trade</code>, <code>on_trade_transaction</code>, <code>on_position_profit</code>, <code>on_positions_and_pending_orders_tickets</code>"},{"location":"MT5Account/BASE/#usage-pattern-sdk-wrappers","title":"\ud83d\udd0c Usage pattern (SDK wrappers)","text":"<p>Every method follows the same shape:</p> <ul> <li>Service/Method (gRPC): <code>Service.Method(Request) \u2192 Reply</code></li> <li>Low-level stub: <code>ServiceStub.Method(request, metadata, timeout)</code></li> <li>SDK wrapper (what you call): <code>await MT5Account.method_name(..., deadline=None, cancellation_event=None)</code></li> <li>Reply: SDK returns <code>.data</code> payload (already unwrapped) unless otherwise noted.</li> </ul> <p>Timestamps = UTC (<code>google.protobuf.Timestamp</code>). For long\u2011lived streams, pass a <code>cancellation_event</code>.</p>"},{"location":"MT5Account/BASE/#full-index-all-method-specs","title":"\ud83d\udcda Full Index \u00b7 All Method Specs","text":""},{"location":"MT5Account/BASE/#account-information","title":"\ud83d\udcc4 Account Information","text":"<ul> <li>Overview: Account_Information_Overview.md</li> <li>Single\u2011value getters   \u2013 account_info_double.md   \u2013 account_info_integer.md   \u2013 account_info_string.md</li> <li>Summary   \u2013 account_summary.md</li> </ul>"},{"location":"MT5Account/BASE/#orders-positions-history","title":"\ud83d\udce6 Orders \u00b7 Positions \u00b7 History","text":"<ul> <li>Overview: OrdersPositionsHistory_Overview.md</li> <li>Live now   \u2013 opened_orders.md   \u2013 opened_orders_tickets.md   \u2013 positions_total.md</li> <li>History   \u2013 order_history.md   \u2013 positions_history.md</li> </ul>"},{"location":"MT5Account/BASE/#symbols-and-market","title":"\ud83c\udff7\ufe0f Symbols and Market","text":"<ul> <li>Overview: SymbolsandMarket_Overview.md</li> </ul>"},{"location":"MT5Account/BASE/#inventory","title":"Inventory","text":"<ul> <li>symbols_total.md</li> <li>symbol_exist.md</li> <li>symbol_name.md</li> <li>symbol_select.md</li> <li>symbol_is_synchronized.md</li> </ul>"},{"location":"MT5Account/BASE/#properties-quotes","title":"Properties &amp; Quotes","text":"<ul> <li>symbol_params_many.md</li> <li>symbol_info_double.md</li> <li>symbol_info_integer.md</li> <li>symbol_info_string.md</li> <li>symbol_info_tick.md</li> </ul>"},{"location":"MT5Account/BASE/#sessions-margin","title":"Sessions &amp; Margin","text":"<ul> <li>symbol_info_session_quote.md</li> <li>symbol_info_session_trade.md</li> <li>symbol_info_margin_rate.md</li> <li>Pricing utils: tick_value_with_size.md</li> </ul>"},{"location":"MT5Account/BASE/#market-book-dom","title":"Market Book (DOM)","text":"<ul> <li>market_book_add.md</li> <li>market_book_get.md</li> <li>market_book_release.md</li> </ul>"},{"location":"MT5Account/BASE/#trading-operations","title":"\ud83d\udee0 Trading Operations","text":"<ul> <li>Overview: TradingOperations_Overview.md</li> <li>Placement &amp; lifecycle   \u2013 order_send.md   \u2013 order_modify.md   \u2013 order_close.md</li> <li>Feasibility &amp; costs   \u2013 order_check.md   \u2013 order_calc_margin.md</li> </ul>"},{"location":"MT5Account/BASE/#subscriptions-streaming","title":"\ud83d\udce1 Subscriptions \u00b7 Streaming","text":"<ul> <li>Overview: SubscriptionsStreaming_Overview.md</li> <li>Prices &amp; symbols   \u2013 on_symbol_tick.md</li> <li>Trading events   \u2013 on_trade.md   \u2013 on_trade_transaction.md</li> <li>P/L &amp; IDs snapshots   \u2013 on_position_profit.md   \u2013 on_positions_and_pending_orders_tickets.md</li> </ul> <p>\u201cMay your risk stay capped and your curiosity uncapped.\u201d</p>"},{"location":"MT5Account/Getting_Started/","title":"PyMT5 \u2014 Getting Started \ud83d\ude80","text":""},{"location":"MT5Account/Getting_Started/#1-requirements","title":"1) Requirements \ud83e\uddf0","text":"<ul> <li>Windows with PowerShell.</li> <li>Python 3.13.x (project verified with 3.13.7).</li> <li>MetaTrader 5 terminal and valid account (Demo or Live).</li> <li>Network access to a gRPC gateway (default <code>mt5.mrpc.pro:443</code>).</li> </ul>"},{"location":"MT5Account/Getting_Started/#2-project-checkout","title":"2) Project checkout \ud83d\udce6","text":"<pre><code>cd C:\\Users\\&lt;YOU&gt;\\\n# Download/unzip the project into C:\\Users\\&lt;YOU&gt;\\PyMT5\ncd C:\\Users\\&lt;YOU&gt;\\PyMT5\n</code></pre> <p><code>main.py</code> is your entry point (a phase-based PLAYBOOK).</p>"},{"location":"MT5Account/Getting_Started/#3-virtual-environment","title":"3) Virtual environment \ud83e\uddea","text":"<pre><code># Create venv (one time)\npython -m venv .venv\n\n# Activate (every session)\n.\\.venv\\Scripts\\Activate.ps1\n\n# Check version\npython --version   # expecting Python 3.13.x\n</code></pre>"},{"location":"MT5Account/Getting_Started/#4-credentials-configuration-env","title":"4) Credentials &amp; configuration (ENV) \ud83d\udd10","text":"<p>This project does not hardcode credentials. They are read from environment variables (see <code>main.py</code>):</p> <ul> <li><code>MT5_LOGIN</code> (int)</li> <li><code>MT5_PASSWORD</code> (string)</li> <li><code>MT5_SERVER</code> (e.g., <code>MetaQuotes-Demo</code>)</li> <li><code>GRPC_SERVER</code> (e.g., <code>mt5.mrpc.pro:443</code>)</li> <li>Optional: <code>TIMEOUT_SECONDS</code>, <code>MT5_VERBOSE</code></li> </ul>"},{"location":"MT5Account/Getting_Started/#a-set-env-in-powershell-session-only","title":"A) Set ENV in PowerShell (session-only)","text":"<pre><code>$env:MT5_LOGIN    = \"&lt;YOUR_LOGIN&gt;\"\n$env:MT5_PASSWORD = \"&lt;YOUR_PASSWORD&gt;\"\n$env:MT5_SERVER   = \"&lt;YOUR_MT5_SERVER&gt;\"   # e.g., MetaQuotes-Demo\n$env:GRPC_SERVER  = \"mt5.mrpc.pro:443\"\n$env:TIMEOUT_SECONDS = \"120\"\n$env:MT5_VERBOSE  = \"1\"\n\necho \"login=$($env:MT5_LOGIN) server=$($env:MT5_SERVER) grpc=$($env:GRPC_SERVER) t=$($env:TIMEOUT_SECONDS)\"\n</code></pre>"},{"location":"MT5Account/Getting_Started/#b-use-a-env-file-recommended","title":"B) Use a <code>.env</code> file (recommended) \ud83d\udcc4","text":"<p>Create <code>.env</code> in the project root:</p> <pre><code>MT5_LOGIN=YOUR_LOGIN\nMT5_PASSWORD=YOUR_PASSWORD\nMT5_SERVER=MetaQuotes-Demo\nGRPC_SERVER=mt5.mrpc.pro:443\nTIMEOUT_SECONDS=120\nMT5_VERBOSE=1\n</code></pre> <p><code>.env</code> is loaded via <code>python-dotenv</code> in <code>main.py</code>. Add <code>.env</code> to <code>.gitignore</code>.</p>"},{"location":"MT5Account/Getting_Started/#5-run-the-project","title":"5) Run the project \u25b6\ufe0f","text":"<pre><code>python .\\main.py\n</code></pre> <p>You should see <code>[connect] ...</code> logs and phase sections (0\u20137). A healthy run shows <code>server_time</code>, <code>account_summary</code>, symbol ticks, etc.</p>"},{"location":"MT5Account/Getting_Started/#6-phases-fine-grained-control","title":"6) Phases (fine-grained control) \ud83e\udded","text":"<p><code>main.py</code> executes demo phases. You can turn them on/off via ENV without changing code:</p> <ul> <li>PHASE0 \u2014 Connectivity &amp; Account: connection check, <code>server_time</code>, <code>account_summary</code>.</li> <li>PHASE1 \u2014 Symbols &amp; Market info: symbol params, ticks, margin/session data.</li> <li>PHASE2 \u2014 Opened state snapshot: positions/orders quick snapshot.</li> <li>PHASE3 \u2014 Calculations &amp; dry\u2011run: <code>order_calc_*</code> sanity checks.</li> <li>PHASE4 \u2014 Charts/Copy &amp; DOM: optional/placeholder in current build.</li> <li>PHASE5 \u2014 History &amp; lookups: history for <code>HISTORY_DAYS</code>, ticket lookups.</li> <li>PHASE6 \u2014 Streaming (compact): short live stream (ticks + open tickets) with throttle.</li> <li>TRADE_PRESET \u2014 Safe trading preset: demo market/close/pending; can be dry\u2011run.</li> <li>LIVE_TEST \u2014 Developer mini\u2011test: see <code>app/playground/live_test.py</code>.</li> </ul>"},{"location":"MT5Account/Getting_Started/#toggle-phases-via-env","title":"Toggle phases via ENV","text":"<pre><code># Minimal run (PHASE0 only)\n$env:RUN_PHASE0 = \"1\"\n$env:RUN_PHASE1 = \"0\"\n$env:RUN_PHASE2 = \"0\"\n$env:RUN_PHASE3 = \"0\"\n$env:RUN_PHASE4 = \"0\"\n$env:RUN_PHASE5 = \"0\"\n$env:RUN_PHASE6 = \"0\"\n\n# Make sure trading preset is off during learning\n$env:RUN_TRADE_PRESET = \"0\"   # or keep TRADE_PRESET=0 in .env\n</code></pre> <p>Internally <code>main.py</code> maps ENV flags to a <code>RUN[...]</code> dictionary; defaults are applied if ENV not set.</p>"},{"location":"MT5Account/Getting_Started/#7-helpful-env-knobs","title":"7) Helpful ENV knobs \u2699\ufe0f","text":"<ul> <li><code>SELECTED_SYMBOL</code> (default <code>EURUSD</code>) \u2014 primary example symbol.</li> <li><code>ALT_SYMBOL</code> (default <code>GBPUSD</code>).</li> <li><code>CRYPTO_SYMBOL</code> (default <code>BTCUSD</code>).</li> <li><code>HISTORY_DAYS</code> (default <code>7</code>).</li> <li><code>STREAM_TIMEOUT_SECONDS</code> (default <code>45</code>).</li> <li><code>BASE_CHART_SYMBOL</code> \u2014 fallback symbol for pings/tick requests if your broker uses suffixes (e.g., <code>.m</code>).</li> </ul>"},{"location":"MT5Account/Getting_Started/#8-typical-signals-what-they-mean","title":"8) Typical signals &amp; what they mean \ud83d\udd0e","text":"<ul> <li><code>AttributeError('terminalInstanceGuid')</code> during <code>connect_by_host_port</code> \u2192 expected for some builds; code auto\u2011falls back to <code>ConnectEx/Connect</code> and may enter LITE mode.</li> <li><code>LITE mode: skip session/terminal handshake (pb2 missing)</code> \u2192 your protobuf set lacks some methods (Ping/handshake). The project handles this and still works.</li> <li>Post\u2011connect ping fails on <code>symbols_total(False)</code> \u2192 temporarily skip that call in <code>_try_post_connect_ping</code> in <code>app/core/mt5_connect_helper.py</code>.</li> <li>Final <code>KeyboardInterrupt</code> after cancel \u2192 cosmetic on Python 3.13; catch <code>CancelledError/KeyboardInterrupt</code> in the lowest <code>try/except</code> in <code>main.py</code> if you want clean logs.</li> </ul>"},{"location":"MT5Account/Getting_Started/#9-quick-start-checklist","title":"9) Quick start checklist \u2705","text":"<ol> <li>Activate venv \u2192 verify <code>python --version</code>.</li> <li>Provide ENV (login/password/server/GRPC) \u2192 increase <code>TIMEOUT_SECONDS</code> if needed.</li> <li>First run with PHASE0 only.</li> <li>If okay \u2192 enable PHASE1\u2013PHASE6.</li> <li>Only then try trading: <code>TRADE_PRESET=1</code> and <code>TRADE_DRY_RUN=0</code> \u2014 on demo only.</li> </ol>"},{"location":"MT5Account/Getting_Started/#10-example-env-for-development","title":"10) Example <code>.env</code> for development \ud83e\uddfe","text":""},{"location":"MT5Account/Getting_Started/#mt5_login12345678-mt5_password-mt5_servermetaquotes-demo-grpc_servermt5mrpcpro443-timeout_seconds120-mt5_verbose1-history_days7-stream_timeout_seconds45-selected_symboleurusd-alt_symbolgbpusd-crypto_symbolbtcusd-base_chart_symboleurusd-phases-run_phase01-run_phase11-run_phase21-run_phase31-run_phase40-run_phase51-run_phase61-trading-preset-trade_preset0-trade_dry_run1","title":"<pre><code>MT5_LOGIN=12345678\nMT5_PASSWORD=***\nMT5_SERVER=MetaQuotes-Demo\nGRPC_SERVER=mt5.mrpc.pro:443\n\nTIMEOUT_SECONDS=120\nMT5_VERBOSE=1\nHISTORY_DAYS=7\nSTREAM_TIMEOUT_SECONDS=45\n\nSELECTED_SYMBOL=EURUSD\nALT_SYMBOL=GBPUSD\nCRYPTO_SYMBOL=BTCUSD\nBASE_CHART_SYMBOL=EURUSD\n\n# Phases\nRUN_PHASE0=1\nRUN_PHASE1=1\nRUN_PHASE2=1\nRUN_PHASE3=1\nRUN_PHASE4=0\nRUN_PHASE5=1\nRUN_PHASE6=1\n\n# Trading preset\nTRADE_PRESET=0\nTRADE_DRY_RUN=1\n</code></pre>","text":""},{"location":"MT5Account/Getting_Started/#11-run-after-setting-env","title":"11) Run after setting <code>.env</code> \u25b6\ufe0f","text":"<pre><code>.\\.venv\\Scripts\\Activate.ps1\npython .\\main.py\n</code></pre> <p>You should see phase sections like \u201c0) \u25b6 Connectivity &amp; Account\u201d, \u201c1) \ud83d\udcc8 Symbols &amp; Market info\u201d, etc. If logs are clean \u2014 you\u2019re ready to go.</p>"},{"location":"MT5Account/Under_the_Hood/","title":"\ud83d\ude97 Under the Hood \u2014 a friendly RPC guide","text":""},{"location":"MT5Account/Under_the_Hood/#tldr","title":"TL;DR","text":"<ol> <li>Protocol method \u2192 <code>Service.Method(Request) \u2192 Reply</code></li> <li>Low\u2011level stub \u2192 <code>ServiceStub.Method(request, metadata, timeout)</code></li> <li>SDK wrapper \u2192 <code>await MT5Account.method_name(..., deadline=None, cancellation_event=None)</code> and it returns the <code>*.Data</code> payload (already unwrapped).</li> <li>UTC timestamps everywhere. Convert once at the UI boundary.</li> <li>Streams are infinite \u2192 always pass a <code>cancellation_event</code> and keep handlers non\u2011blocking.</li> </ol> <p>Full map: see BASE. Overviews:  Account Info \u00b7 Orders/Positions/History \u00b7 Symbols &amp; Market \u00b7 Trading Ops \u00b7 Subscriptions</p>"},{"location":"MT5Account/Under_the_Hood/#anatomy-of-a-call","title":"Anatomy of a call","text":"<pre><code># Unary call pattern\nfrom datetime import datetime, timedelta, timezone\nvalue = await acct.account_info_double(\n    property_id=...,  # enum\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n)\n# value is already the float from *.Data\n</code></pre> <p>Deadline? Becomes gRPC <code>timeout</code>. Cancellation? Graceful stop for retries/streams.</p> <p>The wrappers use <code>execute_with_reconnect(...)</code> for retries on transient errors and terminal reconnects. Practical upshot:</p> <ul> <li>You don\u2019t need try/except around every call \u2014 only where you act differently by error type.</li> <li>Focus on business logic (what to do on timeout/retcode), not plumbing.</li> </ul>"},{"location":"MT5Account/Under_the_Hood/#unary-vs-streaming","title":"Unary vs. Streaming","text":"<p>Unary \u2014 most <code>*Info*</code>, <code>*History*</code>, <code>order_*</code>. Streaming \u2014 on_symbol_tick, on_trade, on_trade_transaction, on_position_profit, on_positions_and_pending_orders_tickets.</p> <p>Streaming pattern:</p> <pre><code>import asyncio\nstop = asyncio.Event()\nasync for ev in acct.on_trade(cancellation_event=stop):\n    queue.put_nowait(ev)  # heavy lifting goes to workers\n    if should_stop(ev):\n        stop.set()\n</code></pre> <p>Back\u2011pressure 101: keep the per\u2011event handler light \u2192 fan\u2011out to queues/workers \u2192 aggregate in your store \u2192 render.</p>"},{"location":"MT5Account/Under_the_Hood/#enums-types-the-magic-numbers-ban","title":"Enums, types &amp; the \u201cmagic numbers\u201d ban","text":"<ul> <li>Don\u2019t hardcode integers. Use the enums from the relevant <code>pb2</code>.</li> <li>Common sets:   \u2013 Order types / filling / time \u2192 Trading Ops docs and order_send, order_check.   \u2013 Order/Position states \u2192 OpenedOrders.</li> </ul> <pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as ai_pb2\nlevel = await acct.account_info_double(ai_pb2.AccountInfoDoublePropertyType.ACCOUNT_MARGIN_LEVEL)\nprint(f\"Margin Level: {level:.1f}%\")\n</code></pre>"},{"location":"MT5Account/Under_the_Hood/#time-handling","title":"Time handling","text":"<ul> <li>Everything is UTC (<code>google.protobuf.Timestamp</code> or <code>time_msc</code>).</li> <li>Convert to local time once at the UI edge.</li> <li>For history, use closed\u2011open ranges (<code>from &lt;= x &lt; to</code>) and let the server sort via enum.</li> </ul>"},{"location":"MT5Account/Under_the_Hood/#live-history-best-friends","title":"Live + History: best friends","text":"<p>Cold start: take one snapshot (e.g., OpenedOrders), then keep it fresh via a stream \u2014 on_trade or on_trade_transaction. Cheap monitoring: use the IDs\u2011only stream on_positions_and_pending_orders_tickets and pull details only on change.</p>"},{"location":"MT5Account/Under_the_Hood/#trade-lifecycle-send-check-modify-close","title":"Trade lifecycle: send \u2192 check \u2192 modify \u2192 close","text":"<ul> <li>Pre\u2011flight: order_check and/or order_calc_margin.</li> <li>Send: order_send (always set filling/time explicitly).</li> <li>Modify / Close: order_modify, order_close.</li> <li>Diagnostics: on_trade_transaction \u2014 pairs <code>request + result</code> with retcodes.</li> </ul> <pre><code>from MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\nrq = tf_pb2.MqlTradeRequest(\n    order_type_filling=tf_pb2.SUB_ENUM_ORDER_TYPE_FILLING.ORDER_FILLING_FOK,\n    type_time=tf_pb2.SUB_ENUM_ORDER_TYPE_TIME.ORDER_TIME_GTC,\n)\n</code></pre>"},{"location":"MT5Account/Under_the_Hood/#market-book-dom","title":"\ud83d\udfe2 Market Book (DOM)","text":"<p>The trio: market_book_add \u2192 market_book_get \u2192 market_book_release.</p> <p>Subscribe \u2192 read \u2192 always release when leaving the page. DOM subscriptions are not houseplants; don\u2019t forget to water them\u2026 with a <code>release()</code>.</p>"},{"location":"MT5Account/Under_the_Hood/#errors-retcodes","title":"Errors &amp; retcodes","text":"<ul> <li>gRPC/network issues \u2014 wrappers retry.</li> <li>Trading retcodes \u2014 see <code>mrpc_mt5_error_pb2.py</code> and the <code>order_*</code>/<code>on_trade_transaction</code> pages.</li> <li>For UX/logging, keep both numeric code and human string.</li> </ul> <p>Normalization sketch:</p> <pre><code>def normalize_trade_result(r):\n    return {\n        \"retcode\": r.trade_return_int_code,\n        \"code\": int(r.trade_return_code),\n        \"desc\": getattr(r, \"retcode_code_description\", \"\"),\n        \"price\": r.deal_price or r.price,\n    }\n</code></pre>"},{"location":"MT5Account/Under_the_Hood/#performance-notes","title":"Performance notes","text":"<ul> <li>Sort server\u2011side via enums; symbol filters are often cheaper client\u2011side.</li> <li>Batch/aggregate inside workers for streaming P/L rather than re\u2011rendering every tick.</li> <li>For big tables: combine RPC pagination (history) with a local cache.</li> </ul>"},{"location":"MT5Account/Under_the_Hood/#minirecipes","title":"Mini\u2011recipes","text":"<p>1) Stable snapshot of live objects</p> <pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\n</code></pre> <p>2) Set\u2011diff via IDs stream</p> <pre><code>prev = (set(), set())\nasync for ev in acct.on_positions_and_pending_orders_tickets(750):\n    pos, ords = set(ev.opened_position_tickets), set(ev.opened_orders_tickets)\n    if (pos, ords) != prev:\n        # fetch heavy details only on change\n        prev = (pos, ords)\n</code></pre> <p>3) De\u2011noise P/L streaming</p> <pre><code>async for ev in acct.on_position_profit(1000, True):\n    if not (ev.new_positions or ev.updated_positions or ev.deleted_positions):\n        continue\n    process(ev)\n</code></pre>"},{"location":"MT5Account/Under_the_Hood/#faq","title":"\ud83d\udfe1 FAQ","text":"<ul> <li>Why enums over strings? \u2014 Fewer typos, clearer intent, linters help.</li> <li>Can I skip <code>deadline</code>? \u2014 You can, but deterministic timeouts make ops happier.</li> <li>Why IDs\u2011only streams? \u2014 They\u2019re cheap and perfect for change detection; pull details on demand.</li> </ul>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/","title":"MT5Account \u00b7 Account Information \u2014 Overview","text":"<p>Quick guide to the four primitives that expose account metadata via gRPC. Use this page to choose the right call fast. Links below jump to the full specs.</p>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/#what-lives-here","title":"\ud83d\udcc1 What lives here","text":"<ul> <li>AccountSummary \u2014 one call, core metrics bundle (balance, equity, leverage, currency, trade mode, server time, credit).</li> <li>AccountInfoDouble \u2014 one numeric metric by enum (equity, margin, margin level, etc.).</li> <li>AccountInfoInteger \u2014 one integer property by enum (login, leverage, flags/modes, currency digits).</li> <li>AccountInfoString \u2014 one label by enum (name, server, currency, company).</li> </ul>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/#plain-english","title":"\ud83e\udded Plain English","text":"<ul> <li>AccountSummary \u2192 the \"full blood panel\" for your account: a compact bundle you can print to see if things look sane.</li> <li>AccountInfoDouble \u2192 one gauge reading (a single float).</li> <li>AccountInfoInteger \u2192 switches &amp; knobs (integers, often 0/1 flags or mode codes).</li> <li>AccountInfoString \u2192 labels on the dashboard (human names/brands/currency codes).</li> </ul> <p>Rule of thumb: need many basics at once \u2192 <code>AccountSummary</code>. Need one specific field \u2192 pick one of the <code>AccountInfo*</code> calls.</p>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/#quick-choose","title":"Quick choose","text":"If you need\u2026 Use Returns Input params Core metrics in one call <code>AccountSummary</code> <code>AccountSummaryData</code> (bundle) (none) + optional <code>deadline</code>, <code>cancellation_event</code> One float (equity, margin, profit, margin level, \u2026) <code>AccountInfoDouble</code> <code>double</code> <code>property_id: AccountInfoDoublePropertyType</code> + optional <code>deadline</code>, <code>cancellation_event</code> One integer (login, leverage, flags/modes, currency digits) <code>AccountInfoInteger</code> <code>int64</code> <code>property_id: AccountInfoIntegerPropertyType</code> + optional <code>deadline</code>, <code>cancellation_event</code> One string (name, server, currency, company) <code>AccountInfoString</code> <code>string</code> <code>property_id: AccountInfoStringPropertyType</code> + optional <code>deadline</code>, <code>cancellation_event</code>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/#crossrefs-gotchas","title":"\ud83d\udfe1 Cross\u2011refs &amp; gotchas","text":"<ul> <li>Formatting money? Combine <code>AccountInfoString.ACCOUNT_CURRENCY</code> with <code>AccountInfoInteger.ACCOUNT_CURRENCY_DIGITS</code>.</li> <li>Margin level is percent. <code>AccountInfoDouble.ACCOUNT_MARGIN_LEVEL</code> is already %, not a fraction.</li> <li>Flags are ints. Many boolean-like fields are <code>0/1</code> integers (e.g., <code>ACCOUNT_TRADE_ALLOWED</code>).</li> </ul>"},{"location":"MT5Account/Account_Information/Account_Information_Overview/#minimal-snippets","title":"Minimal snippets","text":"<pre><code># Summary (bundle)\nsum = await acct.account_summary()\nprint(sum.account_equity, sum.account_currency)\n</code></pre> <pre><code># One float\nequity = await acct.account_info_double(account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_EQUITY)\n</code></pre> <pre><code># One int (digits)\ndigits = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_CURRENCY_DIGITS)\n</code></pre> <pre><code># One string (currency)\ncurr = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_CURRENCY)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_double/","title":"\u2705 Account Info Double","text":"<p>Request: single numeric account property (double) from MT5. Fetch one metric (e.g., Balance, Equity, Margin, MarginLevel, \u2026) by enum.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>account_info_double(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_information_pb2.py</code> \u2014 <code>AccountInfoDouble*</code>, <code>AccountInfoDoublePropertyType</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_double/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountInformation</code></li> <li>Method: <code>AccountInfoDouble(AccountInfoDoubleRequest) \u2192 AccountInfoDoubleReply</code></li> <li>Low\u2011level client: <code>AccountInformationStub.AccountInfoDouble(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.account_info_double(property_id, deadline=None, cancellation_event=None) -&gt; float</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_double/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: get Balance\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nvalue = await acct.account_info_double(\n    account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_BALANCE\n)\nprint(f\"Balance: {value:.2f}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_double/#method-signature","title":"Method Signature","text":"<pre><code>async def account_info_double(\n    self,\n    property_id: account_info_pb2.AccountInfoDoublePropertyType,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; float\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_double/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. Returns one numeric account metric by enum (balance, equity, margin, margin level, etc.).</li> <li>Why. Dashboards, alerts, quick checks without pulling the full summary.</li> <li> <p>Be careful.</p> </li> <li> <p><code>ACCOUNT_MARGIN_LEVEL</code> is a percentage (not a fraction).</p> </li> <li>Do your own formatting/rounding; pair with currency digits from integer/string info if needed.</li> <li>Some metrics (assets/liabilities) may be unsupported by a broker.</li> <li>When to call. When you need one number, not the full <code>AccountSummary</code>.</li> <li>Quick check. Return type is <code>float</code>; on transport/proto error you\u2019ll get an exception from the wrapper (or <code>None</code> if you wrap with your own <code>safe_async</code>).</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_double/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>property_id</code> <code>AccountInfoDoublePropertyType</code> (enum, required) Which metric to request. <code>deadline</code> <code>datetime \\| None</code> Absolute deadline; converted to client\u2011side timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancellation for reconnect/retry logic. <p>Request message: <code>AccountInfoDoubleRequest { propertyId }</code></p>"},{"location":"MT5Account/Account_Information/account_info_double/#output","title":"\u2b06\ufe0f Output","text":"<ul> <li>SDK return: <code>float</code> \u2014 the requested numeric value.</li> <li>Underlying proto: <code>AccountInfoDoubleReply { data: AccountInfoDoubleData { requestedValue: double } }</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_double/#enum-accountinfodoublepropertytype","title":"Enum: <code>AccountInfoDoublePropertyType</code>","text":"Value Meaning <code>ACCOUNT_BALANCE</code> Balance (closed P/L incl.) <code>ACCOUNT_CREDIT</code> Credit <code>ACCOUNT_PROFIT</code> Floating P/L <code>ACCOUNT_EQUITY</code> Equity <code>ACCOUNT_MARGIN</code> Used margin <code>ACCOUNT_MARGIN_FREE</code> Free margin <code>ACCOUNT_MARGIN_LEVEL</code> Margin level, % <code>ACCOUNT_MARGIN_SO_CALL</code> Stop\u2011out Call level, % <code>ACCOUNT_MARGIN_SO_SO</code> Stop\u2011out level, % <code>ACCOUNT_MARGIN_INITIAL</code> Initial margin <code>ACCOUNT_MARGIN_MAINTENANCE</code> Maintenance margin <code>ACCOUNT_ASSETS</code> Assets (if supported) <code>ACCOUNT_LIABILITIES</code> Liabilities (if supported) <code>ACCOUNT_COMMISSION_BLOCKED</code> Blocked commissions"},{"location":"MT5Account/Account_Information/account_info_double/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Show a single number in UI/CLI efficiently.</li> <li>Pre\u2011trade checks (e.g., margin level, equity).</li> <li>Lightweight telemetry/logging.</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_double/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For money formatting, pair with currency digits from integer/string account info.</li> <li>For multiple metrics at once, prefer <code>AccountSummary</code> (one RPC instead of several).</li> <li>The SDK path typically wraps calls with reconnect/back\u2011off logic.</li> </ul> <p>See also: AccountInfoInteger \u00b7 AccountInfoString \u00b7 AccountSummary</p>"},{"location":"MT5Account/Account_Information/account_info_double/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Account_Information/account_info_double/#1-equity-margin-level","title":"1) Equity / Margin Level","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nequity = await acct.account_info_double(account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_EQUITY)\nlevel  = await acct.account_info_double(account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_MARGIN_LEVEL)\nprint(f\"Eq={equity:.2f} | ML={level:.1f}%\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_double/#2-free-vs-used-margin","title":"2) Free vs Used Margin","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nfree = await acct.account_info_double(account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_MARGIN_FREE)\nused = await acct.account_info_double(account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_MARGIN)\nprint(f\"Margin: used={used:.2f} / free={free:.2f}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_double/#3-with-deadline-cancellation","title":"3) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncancel_event = asyncio.Event()\nvalue = await acct.account_info_double(\n    account_info_pb2.AccountInfoDoublePropertyType.ACCOUNT_BALANCE,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(value)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/","title":"\u2705 Account Info Integer","text":"<p>Request: single integer account property from MT5. Fetch one integer metric (login, leverage, flags/modes, currency digits) by enum.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>account_info_integer(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_information_pb2.py</code> \u2014 <code>AccountInfoInteger*</code>, <code>AccountInfoIntegerPropertyType</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_integer/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountInformation</code></li> <li>Method: <code>AccountInfoInteger(AccountInfoIntegerRequest) \u2192 AccountInfoIntegerReply</code></li> <li>Low-level client: <code>AccountInformationStub.AccountInfoInteger(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.account_info_integer(property_id, deadline=None, cancellation_event=None) -&gt; int</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_integer/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: get Leverage\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nlev = await acct.account_info_integer(\n    account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_LEVERAGE\n)\nprint(f\"Leverage: {lev}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/#method-signature","title":"Method Signature","text":"<pre><code>async def account_info_integer(\n    self,\n    property_id: account_info_pb2.AccountInfoIntegerPropertyType,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; int\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A vending machine for single integer facts about your account \u2014   you insert the right enum, it drops one number: login, leverage, flags, modes, currency digits.</li> <li>Why you care. You often need one integer fast (e.g., <code>LEVERAGE</code> or <code>CURRENCY_DIGITS</code>) without pulling the whole summary.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Booleans are usually returned as 0/1 integers (e.g., <code>ACCOUNT_TRADE_ALLOWED</code>).</p> </li> <li>Modes (e.g., stop\u2011out mode) are numeric codes \u2014 map them to labels in your UI.</li> <li><code>CURRENCY_DIGITS</code> is crucial for money formatting; use it with doubles from <code>AccountInfoDouble</code>.</li> <li>When to call. Targeted checks, formatting decisions, guards for UI/flows.</li> <li>Quick check. You get a Python <code>int</code>. If it explodes/None \u2192 check connectivity and the error doc.</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_integer/#input","title":"\ud83d\udd3d Input","text":"<p>No required input besides the enum.</p> Parameter Type Description <code>property_id</code> <code>AccountInfoIntegerPropertyType</code> (enum, required) Which integer metric to fetch (see list below). <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>AccountInfoIntegerRequest { propertyId }</code></p>"},{"location":"MT5Account/Account_Information/account_info_integer/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Account_Information/account_info_integer/#payload-accountinfointegerdata","title":"Payload: <code>AccountInfoIntegerData</code>","text":"Field Proto Type Description <code>value</code> <code>int64</code> The value of the selected property."},{"location":"MT5Account/Account_Information/account_info_integer/#enum-accountinfointegerpropertytype","title":"Enum: <code>AccountInfoIntegerPropertyType</code>","text":"Number Value Meaning 0 <code>ACCOUNT_LOGIN</code> Account login (ID). 1 <code>ACCOUNT_TRADE_MODE</code> Trade mode code (map to label if needed). 2 <code>ACCOUNT_LEVERAGE</code> Leverage (e.g., 100 for 1:100). 3 <code>ACCOUNT_LIMIT_ORDERS</code> Current limit for pending orders (if set). 4 <code>ACCOUNT_MARGIN_SO_MODE</code> Stop-out mode code (percent/money). 5 <code>ACCOUNT_TRADE_ALLOWED</code> Trading allowed flag (0/1). 6 <code>ACCOUNT_TRADE_EXPERT</code> Expert Advisors allowed flag (0/1). 7 <code>ACCOUNT_MARGIN_MODE</code> Margin mode code (netting/hedging). 8 <code>ACCOUNT_CURRENCY_DIGITS</code> Number of digits for money formatting. 9 <code>ACCOUNT_FIFO_CLOSE</code> FIFO close flag (0/1), if supported. 10 <code>ACCOUNT_HEDGE_ALLOWED</code> Hedging allowed flag (0/1)."},{"location":"MT5Account/Account_Information/account_info_integer/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fetch one integer property fast for UI formatting and guards.</li> <li>Build conditions/alerts based on leverage, modes, or flags.</li> <li>Keep code decoupled: business/UI depend on enums, not on pb internals.</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_integer/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Combine with <code>AccountInfoDouble</code> (for values) and <code>AccountInfoString</code> (for currency) to format amounts correctly.</li> <li>Map mode/flag integers to human labels near the UI (don\u2019t leak raw codes to users).</li> <li>The wrapper handles transient gRPC errors via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: AccountInfoDouble, AccountInfoString, AccountSummary.</p>"},{"location":"MT5Account/Account_Information/account_info_integer/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Account_Information/account_info_integer/#1-leverage-currency-digits","title":"1) Leverage &amp; Currency Digits","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nlev = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_LEVERAGE)\ndigits = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_CURRENCY_DIGITS)\nprint(f\"Lev={lev} | Digits={digits}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/#2-trading-allowed-expert-allowed","title":"2) Trading allowed / expert allowed","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ntrade_ok = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_TRADE_ALLOWED)\nexpert_ok = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_TRADE_EXPERT)\nprint(f\"TradeAllowed={bool(trade_ok)} | ExpertAllowed={bool(expert_ok)}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/#3-stopout-mode-code-label","title":"3) Stop\u2011out mode code \u2192 label","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nmode = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_MARGIN_SO_MODE)\nmode_label = {0: \"PERCENT\", 1: \"MONEY\"}.get(int(mode), f\"UNKNOWN({mode})\")\nprint(f\"StopOutMode={mode_label}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_integer/#4-with-deadline-cancellation","title":"4) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncancel_event = asyncio.Event()\nvalue = await acct.account_info_integer(\n    account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_LOGIN,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(value)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/","title":"\u2705 Account Info String","text":"<p>Request: single string account property from MT5. Fetch one label (name, server, currency, company) by enum.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>account_info_string(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_information_pb2.py</code> \u2014 <code>AccountInfoString*</code>, <code>AccountInfoStringPropertyType</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_string/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountInformation</code></li> <li>Method: <code>AccountInfoString(AccountInfoStringRequest) \u2192 AccountInfoStringReply</code></li> <li>Low-level client: <code>AccountInformationStub.AccountInfoString(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.account_info_string(property_id, deadline=None, cancellation_event=None) -&gt; str</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_info_string/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: get Deposit Currency (\"USD\"/\"EUR\"/...)\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncur = await acct.account_info_string(\n    account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_CURRENCY\n)\nprint(f\"Currency: {cur}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/#method-signature","title":"Method Signature","text":"<pre><code>async def account_info_string(\n    self,\n    property_id: account_info_pb2.AccountInfoStringPropertyType,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; str\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A polite one-question-at-the-counter: \u201cWhat\u2019s the account\u2019s name/server/currency/company?\u201d You provide an enum ticket; it hands you one label \u2014 a string.</li> <li>Why you care. You need labels for UI, logs, or formatting (e.g., show <code>USD</code>, display broker/company, greet by account name).</li> <li> <p>Mind the traps.</p> </li> <li> <p>Values are strings; don\u2019t parse numbers from here \u2014 use <code>AccountInfoInteger/Double</code> for numerics.</p> </li> <li>Broker naming can vary (<code>SERVER</code>/<code>COMPANY</code> branding). Treat them as display-only labels.</li> <li>Currency codes are ISO-like (e.g., <code>\"USD\"</code>), but formatting still depends on <code>ACCOUNT_CURRENCY_DIGITS</code> (see <code>AccountInfoInteger</code>).</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_string/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>property_id</code> <code>AccountInfoStringPropertyType</code> (enum, required) Which label to fetch (see enum below). <code>deadline</code> <code>datetime \\| None</code> Absolute per-call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>AccountInfoStringRequest { propertyId }</code></p>"},{"location":"MT5Account/Account_Information/account_info_string/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Account_Information/account_info_string/#payload-accountinfostringdata","title":"Payload: <code>AccountInfoStringData</code>","text":"Field Proto Type Description <code>requestedValue</code> <code>string</code> The label value of the selected property."},{"location":"MT5Account/Account_Information/account_info_string/#enum-accountinfostringpropertytype","title":"Enum: <code>AccountInfoStringPropertyType</code>","text":"Number Value Meaning 0 <code>ACCOUNT_NAME</code> Account holder name. 1 <code>ACCOUNT_SERVER</code> Server name. 2 <code>ACCOUNT_CURRENCY</code> Deposit currency code. 3 <code>ACCOUNT_COMPANY</code> Broker/company name."},{"location":"MT5Account/Account_Information/account_info_string/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Render precise labels in UI/CLI (currency, server, company, name).</li> <li>Build clean status headers and breadcrumbs without extra RPCs.</li> <li>Keep business/UI code independent from proto internals.</li> </ul>"},{"location":"MT5Account/Account_Information/account_info_string/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For money formatting: pair <code>ACCOUNT_CURRENCY</code> with <code>ACCOUNT_CURRENCY_DIGITS</code> (from <code>AccountInfoInteger</code>).</li> <li>The SDK wrapper already handles transient gRPC hiccups via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: AccountInfoInteger, AccountInfoDouble, AccountSummary.</p>"},{"location":"MT5Account/Account_Information/account_info_string/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Account_Information/account_info_string/#1-currency-digits-proper-amount-formatting","title":"1) Currency + digits \u2192 proper amount formatting","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncur = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_CURRENCY)\n# digits comes from AccountInfoInteger\n# digits = await acct.account_info_integer(account_info_pb2.AccountInfoIntegerPropertyType.ACCOUNT_CURRENCY_DIGITS)\nprint(f\"{cur}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/#2-name-company-for-headers","title":"2) Name &amp; company for headers","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\nname = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_NAME)\ncomp = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_COMPANY)\nprint(f\"{name} \u2014 {comp}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/#3-server-label-with-deadline-cancellation","title":"3) Server label (with deadline &amp; cancellation)","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncancel_event = asyncio.Event()\nserver = await acct.account_info_string(\n    account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_SERVER,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(server)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_info_string/#4-compact-status-line","title":"4) Compact status line","text":"<pre><code># Build a readable one-liner for CLI/dashboard\nfrom MetaRpcMT5 import mt5_term_api_account_information_pb2 as account_info_pb2\n\ncur = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_CURRENCY)\nname = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_NAME)\nserver = await acct.account_info_string(account_info_pb2.AccountInfoStringPropertyType.ACCOUNT_SERVER)\nprint(f\"{name} | {server} | {cur}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/","title":"\u2705 Getting an Account Summary","text":"<p>Request: full account summary (<code>AccountSummaryData</code>) from MT5. Fetch all core account metrics in a single call.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>account_summary(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>AccountSummary*</code>, <code>MrpcEnumAccountTradeMode</code></li> </ul>"},{"location":"MT5Account/Account_Information/account_summary/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>AccountSummary(AccountSummaryRequest) \u2192 AccountSummaryReply</code></li> <li>Low-level client: <code>AccountHelperStub.AccountSummary(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.account_summary(deadline=None, cancellation_event=None) -&gt; AccountSummaryData</code></li> </ul> <p>Request message: <code>AccountSummaryRequest {}</code></p> <p>Reply message: <code>AccountSummaryReply { data: AccountSummaryData }</code></p>"},{"location":"MT5Account/Account_Information/account_summary/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># High-level (prints formatted summary):\nasync def show_account_summary(acct):\n    s = await acct.account_summary()\n    print(\n        f\"Account Summary: Balance={s.account_balance:.2f}, \"\n        f\"Equity={s.account_equity:.2f}, Currency={s.account_currency}, \"\n        f\"Login={s.account_login}, Leverage={s.account_leverage}, \"\n        f\"Mode={s.account_trade_mode}\"\n    )\n\n# Low-level (returns the proto message):\nsummary = await acct.account_summary()\n# summary: AccountSummaryData\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#method-signature","title":"Method Signature","text":"<pre><code>async def account_summary(\n    self,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.AccountSummaryData\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What is it. One RPC that returns the account status: balance, equity, currency, leverage, account type, and server time.</li> <li>Why. Quick status for UI/CLI; compare currency/login/leverage with expectations; understand the status of the balance/equity bundle; make sure that the terminal responds (by <code>server_time</code>).</li> <li>Quick receipt. There is <code>account_login</code>, <code>account_currency</code>, <code>account_leverage</code>, <code>account_equity</code> \u2192 the connection is alive, the data is coming.</li> </ul>"},{"location":"MT5Account/Account_Information/account_summary/#input","title":"\ud83d\udd3d Input","text":"<p>No required input parameters.</p> Parameter Type Description <code>deadline</code> <code>datetime \\| None</code> Absolute per-call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for retry loop."},{"location":"MT5Account/Account_Information/account_summary/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Account_Information/account_summary/#payload-accountsummarydata","title":"Payload: <code>AccountSummaryData</code>","text":"Field Proto Type Description <code>account_login</code> <code>int64</code> Trading account login (ID). <code>account_balance</code> <code>double</code> Balance excluding floating P/L. <code>account_equity</code> <code>double</code> Equity = balance + floating P/L. <code>account_user_name</code> <code>string</code> Account holder display name. <code>account_leverage</code> <code>int64</code> Leverage (e.g., 100 for 1:100). <code>account_trade_mode</code> <code>enum MrpcEnumAccountTradeMode</code> Trade mode of the account. <code>account_company_name</code> <code>string</code> Broker/company display name. <code>account_currency</code> <code>string</code> Deposit currency code (e.g., <code>USD</code>). <code>server_time</code> <code>google.protobuf.Timestamp</code> Server time at response (UTC). <code>utc_timezone_server_time_shift_minutes</code> <code>int64</code> Server timezone offset (minutes from UTC). <code>account_credit</code> <code>double</code> Credit amount."},{"location":"MT5Account/Account_Information/account_summary/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Use to display real-time account state and sanity\u2011check connectivity:</p> <ul> <li>Dashboard/CLI status</li> <li>Verify free margin &amp; equity before trading</li> </ul>"},{"location":"MT5Account/Account_Information/account_summary/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Wrapper uses <code>execute_with_reconnect(...)</code> to retry on transient gRPC errors.</li> <li>Consider a short per\u2011call timeout (3\u20135s) and retry if the terminal is syncing symbols.</li> </ul> <p>See also: AccountInfoDouble, AccountInfoInteger, AccountInfoString, PositionsTotal, OpenedOrders.</p>"},{"location":"MT5Account/Account_Information/account_summary/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Account_Information/account_summary/#1-percall-deadline","title":"1) Per\u2011call deadline","text":"<pre><code># Enforce a short absolute deadline to avoid hanging calls\nfrom datetime import datetime, timedelta, timezone\n\nsummary = await acct.account_summary(\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3)\n)\nprint(f\"[deadline] Equity={summary.account_equity:.2f}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#2-cooperative-cancellation-with-asyncioevent","title":"2) Cooperative cancellation (with asyncio.Event)","text":"<pre><code># Pass a cancellation_event to allow graceful stop from another task\nimport asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\n\n# somewhere else: cancel_event.set() to request cancellation\nsummary = await acct.account_summary(\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(f\"[cancel] Currency={summary.account_currency}\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#3-compact-status-line-for-uicli","title":"3) Compact status line for UI/CLI","text":"<pre><code># Produce a short, readable one\u2011liner for dashboards/CLI\ns = await acct.account_summary()\nstatus = (\n    f\"Acc {s.account_login} | {s.account_currency} | \"\n    f\"Bal {s.account_balance:.2f} | Eq {s.account_equity:.2f} | \"\n    f\"Lev {s.account_leverage} | Mode {s.account_trade_mode}\"\n)\nprint(status)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#4-humanreadable-server-time-with-timezone-shift","title":"4) Human\u2011readable server time with timezone shift","text":"<pre><code># Convert server_time (UTC Timestamp) + shift (minutes) to a local server time string\nfrom datetime import timezone, timedelta\n\ns = await acct.account_summary()\nserver_dt_utc = s.server_time.ToDatetime().replace(tzinfo=timezone.utc)\nshift = timedelta(minutes=int(s.utc_timezone_server_time_shift_minutes))\nserver_local = server_dt_utc + shift\nprint(f\"Server time: {server_local.isoformat()} (shift {shift})\")\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#5-map-proto-your-dataclass-thin-viewmodel","title":"5) Map proto \u2192 your dataclass (thin view\u2011model)","text":"<pre><code># Keep only the fields you actually use; fast and test\u2011friendly\nfrom dataclasses import dataclass\n\n@dataclass\nclass AccountSummaryView:\n    login: int\n    currency: str\n    balance: float\n    equity: float\n    leverage: int\n    mode: int  # enum value; map to label if needed\n\n    @staticmethod\n    def from_proto(p):\n        return AccountSummaryView(\n            login=int(p.account_login),\n            currency=str(p.account_currency),\n            balance=float(p.account_balance),\n            equity=float(p.account_equity),\n            leverage=int(p.account_leverage),\n            mode=int(p.account_trade_mode),\n        )\n\ns = await acct.account_summary()\nview = AccountSummaryView.from_proto(s)\nprint(view)\n</code></pre>"},{"location":"MT5Account/Account_Information/account_summary/#what-this-teaches","title":"\ud83d\udfe2  What this teaches","text":"<ul> <li> <p>How to call account_summary() safely with deadline and cancellation.</p> </li> <li> <p>How to format results for UX/CLI without dragging proto types everywhere.</p> </li> <li> <p>How to interpret server time correctly with the server\u2011provided UTC shift.</p> </li> <li> <p>How to decouple UI/business code from the raw proto via a small view\u2011model.</p> </li> </ul>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/","title":"MT5Account \u00b7 Orders.Positions.History \u2014 Overview","text":"<p>Quick map of the live &amp; historical order/position APIs. Use this page to pick the right call fast. Links jump to detailed specs.</p>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/#what-lives-here","title":"\ud83d\udcc1 What lives here","text":"<ul> <li>OpenedOrders \u2014 current pending orders and open positions (full objects) with server\u2011side sorting.</li> <li>OpenedOrdersTickets \u2014 IDs only: tickets of open orders and positions (lightweight snapshot).</li> <li>OrderHistory \u2014 paginated orders &amp; deals for a time range (mixed list).</li> <li>PositionsHistory \u2014 paginated positions history for a time range (position\u2011level view).</li> <li>PositionsTotal \u2014 total count of currently open positions.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/#plain-english","title":"\ud83e\udded Plain English","text":"<ul> <li>OpenedOrders \u2192 your \u201cNow Playing\u201d board (full details of what\u2019s live right now).</li> <li>OpenedOrdersTickets \u2192 the guest list (just IDs to diff/cache/poll fast).</li> <li>OrderHistory \u2192 the time machine ledger for orders + deals.</li> <li>PositionsHistory \u2192 the closed positions ledger (aggregated per position).</li> <li>PositionsTotal \u2192 the headcount of open positions.</li> </ul> <p>Rule of thumb: need details now \u2192 <code>OpenedOrders</code>. Need just IDs \u2192 <code>OpenedOrdersTickets</code>. Need past events \u2192 <code>OrderHistory</code> or <code>PositionsHistory</code> depending on granularity.</p>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/#quick-choose","title":"Quick choose","text":"If you need\u2026 Use Returns Key inputs Live objects (orders + positions) <code>OpenedOrders</code> <code>OpenedOrdersData</code> (<code>opened_orders[]</code>, <code>position_infos[]</code>) <code>sort_mode</code> + optional <code>deadline</code>, <code>cancellation_event</code> Live IDs only (fast snapshot) <code>OpenedOrdersTickets</code> <code>OpenedOrdersTicketsData</code> (<code>opened_orders_tickets[]</code>, <code>opened_position_tickets[]</code>) (none) + optional <code>deadline</code>, <code>cancellation_event</code> Orders &amp; deals history (mixed) <code>OrderHistory</code> <code>OrdersHistoryData</code> (<code>history_data[]</code>) <code>from_dt</code>, <code>to_dt</code>, <code>sort_mode</code>, <code>page_number</code>, <code>items_per_page</code> Positions history (position\u2011level) <code>PositionsHistory</code> <code>PositionsHistoryData</code> (<code>positions_data[]</code>) <code>sort_type</code>, <code>open_from</code>, <code>open_to</code>, <code>page</code>, <code>size</code> Count of open positions <code>PositionsTotal</code> <code>PositionsTotalData</code> (<code>total_positions</code>) (none) + optional <code>deadline</code>, <code>cancellation_event</code>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/#crossrefs-gotchas","title":"\u274c Cross\u2011refs &amp; gotchas","text":"<ul> <li>UTC timestamps everywhere. Convert once; don\u2019t re\u2011parse per render frame.</li> <li>Server\u2011side sorting is explicit via enums. If you need price\u2011sorted lists, sort client\u2011side.</li> <li>OrderHistory is mixed: each item is either an order or a deal \u2014 check which field is set.</li> <li>No server\u2011side symbol filter in history calls \u2014 filter client\u2011side by <code>symbol</code>.</li> <li>Hedging vs netting affects how you interpret counts and duplicates across symbols.</li> <li>Polling? Use <code>OpenedOrdersTickets</code> for set\u2011diffs; fetch details with <code>OpenedOrders</code> only on changes.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/OrdersPositionsHistory_Overview/#minimal-snippets","title":"\ud83d\udfe2 Minimal snippets","text":"<pre><code># OpenedOrders \u2014 how many live objects now?\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\nod = await acct.opened_orders(ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC)\nprint(len od.opened_orders, len od.position_infos)\n</code></pre> <pre><code># OpenedOrdersTickets \u2014 union of IDs\nres = await acct.opened_orders_tickets()\nall_ids = set(res.opened_orders_tickets) | set(res.opened_position_tickets)\nprint(len(all_ids))\n</code></pre> <pre><code># OrderHistory \u2014 last 7 days, first page\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\nnow = datetime.now(timezone.utc)\nh = await acct.order_history(now - timedelta(days=7), now, ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_DESC, 1, 100)\nprint(h.arrayTotal, len(h.history_data))\n</code></pre> <pre><code># PositionsHistory \u2014 last 30 days, 100 per page\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\nnow = datetime.now(timezone.utc)\nph = await acct.positions_history(ah_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE.BMT5_POSHIST_SORT_BY_CLOSE_TIME_DESC, now - timedelta(days=30), now, 1, 100)\nprint(ph.arrayTotal, len(ph.positions_data))\n</code></pre> <pre><code># PositionsTotal \u2014 count badge\ndata = await acct.positions_total()\nprint(int(data.total_positions))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/","title":"\u2705 Opened Orders","text":"<p>Request: fetch all currently opened orders and active positions for the connected MT5 account. Returns a combined payload so you can render an immediate \u201cwhat\u2019s live now\u201d view.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>opened_orders(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>OpenedOrders*</code>, <code>BMT5_ENUM_OPENED_ORDER_SORT_TYPE</code>, <code>OpenedOrderInfo</code>, <code>PositionInfo</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>OpenedOrders(OpenedOrdersRequest) \u2192 OpenedOrdersReply</code></li> <li>Low-level client: <code>AccountHelperStub.OpenedOrders(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.opened_orders(sort_mode, deadline=None, cancellation_event=None) -&gt; OpenedOrdersData</code></li> </ul> <p>Request message: <code>OpenedOrdersRequest { inputSortMode: BMT5_ENUM_OPENED_ORDER_SORT_TYPE }</code></p> <p>Reply message: <code>OpenedOrdersReply { data: OpenedOrdersData }</code></p>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: sort by open-time ascending\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nres = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\n# res is OpenedOrdersData\nprint(len(res.opened_orders), len(res.position_infos))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#method-signature","title":"Method Signature","text":"<pre><code>async def opened_orders(\n    self,\n    sort_mode: account_helper_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.OpenedOrdersData\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Think of this as your \u201cNow Playing\u201d board: one call that lists current orders (pending) and positions (active exposure).</li> <li>Why you care. It powers dashboards, risk views, and quick operator checks without stitching multiple RPCs.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Sorting is done server\u2011side by the <code>sort_mode</code> enum \u2014 pick ascending/descending explicitly.</p> </li> <li><code>orders</code> and <code>positions</code> are different: pending orders can have <code>time_expiration</code>, positions have <code>profit/swap</code> and <code>position_commission</code>.</li> <li>Timestamps are <code>google.protobuf.Timestamp</code> (UTC). Convert before printing.</li> <li>When to call. On screen open, periodic refresh, or right before sensitive actions.</li> <li>Quick check. You should get two lists: <code>opened_orders[]</code> and <code>position_infos[]</code>. Empty lists are valid.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>sort_mode</code> <code>BMT5_ENUM_OPENED_ORDER_SORT_TYPE</code> (enum, required) Server\u2011side sort to apply (see enum below). <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>OpenedOrdersRequest { inputSortMode: BMT5_ENUM_OPENED_ORDER_SORT_TYPE }</code></p>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Orders_Positions_History/opened_orders/#payload-openedordersdata","title":"Payload: <code>OpenedOrdersData</code>","text":"Field Proto Type Description <code>opened_orders</code> <code>repeated OpenedOrderInfo</code> Pending orders currently on the book. <code>position_infos</code> <code>repeated PositionInfo</code> Active positions for the account."},{"location":"MT5Account/Orders_Positions_History/opened_orders/#openedorderinfo","title":"<code>OpenedOrderInfo</code>","text":"# Field Type Notes 1 <code>index</code> <code>uint32</code> Internal ordering index. 2 <code>ticket</code> <code>uint64</code> Order ticket ID. 3 <code>price_current</code> <code>double</code> Current market price. 4 <code>price_open</code> <code>double</code> Order price (for pending orders). 5 <code>stop_limit</code> <code>double</code> Stop\u2011limit price (if applicable). 6 <code>stop_loss</code> <code>double</code> SL. 7 <code>take_profit</code> <code>double</code> TP. 8 <code>volume_current</code> <code>double</code> Remaining volume. 9 <code>volume_initial</code> <code>double</code> Initial volume. 10 <code>magic_number</code> <code>int64</code> EA/strategy tag. 11 <code>reason</code> <code>int32</code> Broker reason code. 12 <code>type</code> <code>enum BMT5_ENUM_ORDER_TYPE</code> Market/limit/stop/... (see enum). 13 <code>state</code> <code>enum BMT5_ENUM_ORDER_STATE</code> Started/Placed/Partial/\u2026 (see enum). 14 <code>time_expiration</code> <code>google.protobuf.Timestamp</code> Expiration time (GTD). 15 <code>time_setup</code> <code>google.protobuf.Timestamp</code> Created at. 16 <code>time_done</code> <code>google.protobuf.Timestamp</code> Filled/canceled time. 17 <code>type_filling</code> <code>enum BMT5_ENUM_ORDER_TYPE_FILLING</code> FOK/IOC/RETURN/BOC. 18 <code>type_time</code> <code>enum BMT5_ENUM_ORDER_TYPE_TIME</code> GTC/DAY/SPECIFIED/\u2026 19 <code>position_id</code> <code>int64</code> Related position ID. 20 <code>position_by_id</code> <code>int64</code> Close\u2011by position ID. 21 <code>symbol</code> <code>string</code> Symbol name. 22 <code>external_id</code> <code>string</code> External ID if any. 23 <code>comment</code> <code>string</code> User/broker comment. 24 <code>account_login</code> <code>int64</code> Account login."},{"location":"MT5Account/Orders_Positions_History/opened_orders/#positioninfo","title":"<code>PositionInfo</code>","text":"# Field Type Notes 1 <code>index</code> <code>uint32</code> Internal ordering index. 2 <code>ticket</code> <code>uint64</code> Position ticket ID. 3 <code>open_time</code> <code>google.protobuf.Timestamp</code> When the position was opened. 4 <code>volume</code> <code>double</code> Current volume. 5 <code>price_open</code> <code>double</code> Open price. 6 <code>stop_loss</code> <code>double</code> SL. 7 <code>take_profit</code> <code>double</code> TP. 8 <code>price_current</code> <code>double</code> Current market price. 9 <code>swap</code> <code>double</code> Accrued swap. 10 <code>profit</code> <code>double</code> Floating P/L. 11 <code>last_update_time</code> <code>google.protobuf.Timestamp</code> Last time server updated the position. 12 <code>type</code> <code>enum BMT5_ENUM_POSITION_TYPE</code> BUY/SELL. 13 <code>magic_number</code> <code>int64</code> EA/strategy tag. 14 <code>identifier</code> <code>int64</code> Position identifier. 15 <code>reason</code> <code>enum BMT5_ENUM_POSITION_REASON</code> Open reason (client/web/expert/SL/TP/SO). 16 <code>symbol</code> <code>string</code> Symbol name. 17 <code>comment</code> <code>string</code> User/broker comment. 18 <code>external_id</code> <code>string</code> External ID if any. 19 <code>position_commission</code> <code>double</code> Commission attributed to the position. 20 <code>account_login</code> <code>int64</code> Account login."},{"location":"MT5Account/Orders_Positions_History/opened_orders/#enum-bmt5_enum_opened_order_sort_type","title":"Enum: <code>BMT5_ENUM_OPENED_ORDER_SORT_TYPE</code>","text":"Number Value Meaning 0 <code>BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC</code> Open time ascending. 1 <code>BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_DESC</code> Open time descending. 2 <code>BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_ASC</code> Ticket ID ascending. 3 <code>BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_DESC</code> Ticket ID descending. <p>Related enums used above (values per pb):</p> <ul> <li><code>BMT5_ENUM_ORDER_TYPE</code>: BUY, SELL, BUY_LIMIT, SELL_LIMIT, BUY_STOP, SELL_STOP, BUY_STOP_LIMIT, SELL_STOP_LIMIT, CLOSE_BY.</li> <li><code>BMT5_ENUM_ORDER_STATE</code>: STARTED, PLACED, CANCELED, PARTIAL, FILLED, REJECTED, EXPIRED, REQUEST_ADD, REQUEST_MODIFY, REQUEST_CANCEL.</li> <li><code>BMT5_ENUM_ORDER_TYPE_FILLING</code>: FOK, IOC, RETURN, BOC.</li> <li><code>BMT5_ENUM_ORDER_TYPE_TIME</code>: GTC, DAY, SPECIFIED, SPECIFIED_DAY.</li> <li><code>BMT5_ENUM_POSITION_TYPE</code>: BUY, SELL.</li> <li><code>BMT5_ENUM_POSITION_REASON</code>: CLIENT, MOBILE, WEB, EXPERT, ORDER_REASON_SL, ORDER_REASON_TP, ORDER_REASON_SO.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Render a live \u201cOpened Orders &amp; Positions\u201d widget in UI/CLI.</li> <li>Drive risk/ops checks (e.g., detect stale SL/TP or unusual fills).</li> <li>Provide a single RPC for most \u201cwhat\u2019s open now?\u201d use\u2011cases.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use <code>sort_mode</code> for stable snapshots (open time vs ticket order). For price\u2011sorted views, sort client\u2011side.</li> <li>Convert <code>Timestamp</code> to local time once and reuse; don\u2019t recompute in every render tick.</li> <li>The SDK wrapper retries transient gRPC errors via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: OpenedOrdersTickets, OrderHistory, PositionsHistory, PositionsTotal.</p>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Orders_Positions_History/opened_orders/#1-by-open-time-asc-print-compact-table","title":"1) By open time (ASC) \u2192 print compact table","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\nfor o in od.opened_orders:\n    print(f\"#{o.ticket} {o.symbol} vol={o.volume_current:.2f} state={o.state}\")\nfor p in od.position_infos:\n    print(f\"POS#{p.ticket} {p.symbol} vol={p.volume:.2f} pnl={p.profit:.2f}\")\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#2-by-ticket-desc-with-deadline-cancellation","title":"2) By ticket (DESC) with deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\ncancel_event = asyncio.Event()\n\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_DESC,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(len(od.opened_orders), len(od.position_infos))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders/#3-clientside-filter-only-one-symbol","title":"3) Client\u2011side filter: only one symbol","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\nfiltered_orders = [o for o in od.opened_orders if o.symbol == \"EURUSD\"]\nfiltered_positions = [p for p in od.position_infos if p.symbol == \"EURUSD\"]\nprint(len(filtered_orders), len(filtered_positions))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/","title":"\u2705 Opened Orders Tickets","text":"<p>Request: fetch IDs (tickets) of all currently opened orders and positions. Lightweight call to build fast lookups, cross\u2011checks, and polling loops.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>opened_orders_tickets(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>OpenedOrdersTickets*</code></li> </ul> <p>Menu entry: <code>OpenedOrdersTickets</code></p>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>OpenedOrdersTickets(OpenedOrdersTicketsRequest) \u2192 OpenedOrdersTicketsReply</code></li> <li>Low-level client: <code>AccountHelperStub.OpenedOrdersTickets(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.opened_orders_tickets(deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example\nres = await acct.opened_orders_tickets()\n# res is OpenedOrdersTicketsData\nprint(len(res.opened_orders_tickets), len(res.opened_position_tickets))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#method-signature","title":"Method Signature","text":"<pre><code>async def opened_orders_tickets(\n    self,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.OpenedOrdersTicketsData\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. The guest list for your trading party: two neat lists of IDs \u2014 order tickets and position tickets \u2014 nothing more, nothing less.</li> <li>Why you care. Super fast checks (\"do we still have anything open?\"), set math (diff vs previous poll), and drill\u2011down fetches by ticket without transferring full objects.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Tickets are integers; the call does not return prices/volumes. Use <code>OpenedOrders</code> (full objects) if you need rich data.</p> </li> <li>Lists may be empty \u2014 that\u2019s valid and means no open orders/positions.</li> <li>Treat them as snapshots; if you poll, compare sets and act on the delta.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#input","title":"\ud83d\udd3d Input","text":"<p>No required input parameters.</p> Parameter Type Description <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper."},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#payload-openedordersticketsdata","title":"Payload: <code>OpenedOrdersTicketsData</code>","text":"Field Proto Type Description <code>opened_orders_tickets</code> <code>repeated int64</code> Ticket IDs of all currently opened orders. <code>opened_position_tickets</code> <code>repeated int64</code> Ticket IDs of all positions."},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fast presence checks and polling loops with minimal payload.</li> <li>Build ticket\u2011indexed caches, then fetch details only when needed.</li> <li>Detect openings/closings by comparing previous and current snapshots.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For details, pair this with <code>OpenedOrders</code> (full objects) or ticket\u2011specific RPCs.</li> <li>Convert lists to sets for O(1) membership checks and diffs.</li> <li>Wrapper retries transient gRPC errors via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: OpenedOrders, PositionsTotal.</p>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#1-count-union-whats-live-now","title":"1) Count &amp; union (what\u2019s live now)","text":"<pre><code>res = await acct.opened_orders_tickets()\nall_tickets = set(res.opened_orders_tickets) | set(res.opened_position_tickets)\nprint(f\"orders={len(res.opened_orders_tickets)} positions={len(res.opened_position_tickets)} total={len(all_tickets)}\")\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#2-delta-vs-previous-poll-openclose-events","title":"2) Delta vs previous poll (open/close events)","text":"<pre><code>prev = prev if 'prev' in globals() else (set(), set())\nres = await acct.opened_orders_tickets()\norders_now = set(res.opened_orders_tickets)\npos_now    = set(res.opened_position_tickets)\n\norders_opened  = orders_now - prev[0]\norders_closed  = prev[0] - orders_now\npos_opened     = pos_now - prev[1]\npos_closed     = prev[1] - pos_now\nprint(orders_opened, orders_closed, pos_opened, pos_closed)\nprev = (orders_now, pos_now)\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/opened_orders_tickets/#3-with-deadline-cancellation","title":"3) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.opened_orders_tickets(\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(bool(res.opened_orders_tickets or res.opened_position_tickets))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/","title":"\u2705 Order History","text":"<p>Request: paginated order &amp; deal history for a time range. One RPC that returns a page of historical entries (orders + deals) with server\u2011side sorting.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_history(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>OrderHistory*</code>, <code>OrdersHistoryData</code>, <code>HistoryData</code>, <code>OrderHistoryData</code>, <code>DealHistoryData</code>, <code>BMT5_ENUM_ORDER_HISTORY_SORT_TYPE</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/order_history/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>OrderHistory(OrderHistoryRequest) \u2192 OrderHistoryReply</code></li> <li>Low-level client: <code>AccountHelperStub.OrderHistory(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_history(from_dt, to_dt, sort_mode, page_number=1, items_per_page=100, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/order_history/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: last 7 days, sort by CLOSE_TIME desc, first page\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nfrom_dt = now - timedelta(days=7)\n\nres = await acct.order_history(\n    from_dt=from_dt,\n    to_dt=now,\n    sort_mode=ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_DESC,\n    page_number=1,\n    items_per_page=100,\n)\n\nprint(res.array_total, len(res.history_data))  # total items, items on this page\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/#method-signature","title":"Method Signature","text":"<pre><code>async def order_history(\n    self,\n    from_dt: datetime,\n    to_dt: datetime,\n    sort_mode: account_helper_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE,\n    page_number: int = 1,\n    items_per_page: int = 100,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.OrdersHistoryData\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Your time machine ledger: ask for a date window, get a neat page of historical orders and deals (both types in one list).</li> <li>Why you care. Audit, reporting, and troubleshooting (\u201cwhat actually happened between X and Y?\u201d) with stable server\u2011side sorting.</li> <li> <p>Mind the traps.</p> </li> <li> <p>This call is paginated \u2014 you get <code>array_total</code>, <code>page_number</code>, <code>items_per_page</code> and a page of <code>history_data</code>.</p> </li> <li>The server returns a mix: each <code>HistoryData</code> has either <code>history_order</code> or <code>history_deal</code> set (the other is empty).</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/order_history/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>from_dt</code> <code>datetime</code> (UTC) Start of the time window (inclusive). <code>to_dt</code> <code>datetime</code> (UTC) End of the time window (commonly inclusive; 1s granularity is safe). <code>sort_mode</code> <code>BMT5_ENUM_ORDER_HISTORY_SORT_TYPE</code> (enum, required) Server\u2011side sort to apply (see enum below). <code>page_number</code> <code>int</code> 1\u2011based page number. Use <code>1</code> for the first page. <code>items_per_page</code> <code>int</code> Items per page (e.g., 50/100/500). <code>0</code> may mean \u201call\u201d (broker\u2011dependent). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>OrderHistoryRequest { input_from, input_to, input_sort_mode, page_number, items_per_page }</code></p>"},{"location":"MT5Account/Orders_Positions_History/order_history/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Orders_Positions_History/order_history/#payload-ordershistorydata","title":"Payload: <code>OrdersHistoryData</code>","text":"Field Proto Type Description <code>array_total</code> <code>int32</code> Total number of items across all pages. <code>page_number</code> <code>int32</code> Page number in this reply. <code>items_per_page</code> <code>int32</code> Items per page in this reply. <code>history_data</code> <code>repeated HistoryData</code> Mixed list of orders and deals."},{"location":"MT5Account/Orders_Positions_History/order_history/#message-historydata","title":"Message: <code>HistoryData</code>","text":"Field Proto Type Description <code>index</code> <code>uint32</code> Internal ordering index. <code>history_order</code> <code>OrderHistoryData</code> (opt.) Present for order entries. <code>history_deal</code> <code>DealHistoryData</code> (opt.) Present for deal entries."},{"location":"MT5Account/Orders_Positions_History/order_history/#message-orderhistorydata","title":"Message: <code>OrderHistoryData</code>","text":"Field Type Notes <code>ticket</code> <code>uint64</code> Order ticket ID. <code>time_setup</code> <code>Timestamp</code> When the order was created. <code>time_done</code> <code>Timestamp</code> When the order was filled/canceled/expired. <code>state</code> <code>BMT5_ENUM_ORDER_STATE</code> STARTED/PLACED/CANCELED/PARTIAL/FILLED/\u2026 <code>price_current</code> <code>double</code> Current price at fetch. <code>price_open</code> <code>double</code> Order price. <code>stop_limit</code> <code>double</code> Stop\u2011limit price (if any). <code>stop_loss</code> <code>double</code> SL. <code>take_profit</code> <code>double</code> TP. <code>volume_current</code> <code>double</code> Remaining volume. <code>volume_initial</code> <code>double</code> Initial volume. <code>magic_number</code> <code>int64</code> EA/strategy tag. <code>type</code> <code>BMT5_ENUM_ORDER_TYPE</code> BUY_LIMIT/SELL_STOP/\u2026 <code>time_expiration</code> <code>Timestamp</code> GTD expiration. <code>type_filling</code> <code>BMT5_ENUM_ORDER_TYPE_FILLING</code> FOK/IOC/RETURN/BOC. <code>type_time</code> <code>BMT5_ENUM_ORDER_TYPE_TIME</code> GTC/DAY/SPECIFIED/\u2026 <code>position_id</code> <code>uint64</code> Related position ID. <code>symbol</code> <code>string</code> Symbol. <code>external_id</code> <code>string</code> External ID if any. <code>comment</code> <code>string</code> Broker/user comment. <code>account_login</code> <code>int64</code> Account login."},{"location":"MT5Account/Orders_Positions_History/order_history/#message-dealhistorydata","title":"Message: <code>DealHistoryData</code>","text":"Field Type Notes <code>ticket</code> <code>uint64</code> Deal ticket ID. <code>profit</code> <code>double</code> Profit for this deal. <code>commission</code> <code>double</code> Commission. <code>fee</code> <code>double</code> Fee. <code>price</code> <code>double</code> Deal price. <code>stop_loss</code> <code>double</code> SL at time of deal. <code>take_profit</code> <code>double</code> TP at time of deal. <code>swap</code> <code>double</code> Swap accrued. <code>volume</code> <code>double</code> Deal volume. <code>entry_type</code> <code>BMT5_ENUM_DEAL_ENTRY_TYPE</code> IN/OUT/IN_OUT/\u2026 <code>time</code> <code>Timestamp</code> Deal time. <code>type</code> <code>BMT5_ENUM_DEAL_TYPE</code> BUY/SELL/\u2026 <code>reason</code> <code>BMT5_ENUM_DEAL_REASON</code> CLIENT/EXPERT/SL/TP/SO/\u2026 <code>position_id</code> <code>uint64</code> Position ID. <code>comment</code> <code>string</code> Comment. <code>symbol</code> <code>string</code> Symbol. <code>external_id</code> <code>string</code> External ID. <code>account_login</code> <code>int64</code> Account login."},{"location":"MT5Account/Orders_Positions_History/order_history/#enum-bmt5_enum_order_history_sort_type","title":"Enum: <code>BMT5_ENUM_ORDER_HISTORY_SORT_TYPE</code>","text":"Number Value Meaning 0 <code>BMT5_SORT_BY_OPEN_TIME_ASC</code> Open time ascending. 1 <code>BMT5_SORT_BY_OPEN_TIME_DESC</code> Open time descending. 2 <code>BMT5_SORT_BY_CLOSE_TIME_ASC</code> Close time ascending. 3 <code>BMT5_SORT_BY_CLOSE_TIME_DESC</code> Close time descending. 4 <code>BMT5_SORT_BY_ORDER_TICKET_ID_ASC</code> Ticket ascending. 5 <code>BMT5_SORT_BY_ORDER_TICKET_ID_DESC</code> Ticket descending. <p>Related enums used above: <code>BMT5_ENUM_ORDER_STATE</code>, <code>BMT5_ENUM_ORDER_TYPE</code>, <code>BMT5_ENUM_ORDER_TYPE_FILLING</code>, <code>BMT5_ENUM_ORDER_TYPE_TIME</code>, <code>BMT5_ENUM_DEAL_TYPE</code>, <code>BMT5_ENUM_DEAL_ENTRY_TYPE</code>, <code>BMT5_ENUM_DEAL_REASON</code>.</p>"},{"location":"MT5Account/Orders_Positions_History/order_history/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Build reports, audit trails, and UI history with server\u2011side sorting and pagination.</li> <li>Reconcile with broker statements; investigate fills/cancellations and reasons.</li> <li>Power infinite\u2011scroll history views efficiently.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/order_history/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pagination 101: fetch first page \u2192 read <code>array_total</code> to estimate total pages \u2192 loop.</li> <li>Convert all <code>Timestamp</code> values once and reuse; don\u2019t reparse per render.</li> <li>No server\u2011side symbol filter \u2014 filter client\u2011side.</li> <li>Wrapper handles transient gRPC hiccups via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: PositionsHistory, OpenedOrders, OpenedOrdersTickets.</p>"},{"location":"MT5Account/Orders_Positions_History/order_history/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Orders_Positions_History/order_history/#1-simple-pager-last-30-days","title":"1) Simple pager (last 30 days)","text":"<pre><code>from datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nfrom_dt = now - timedelta(days=30)\n\npage, page_size = 1, 100\nres = await acct.order_history(\n    from_dt, now,\n    ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_DESC,\n    page, page_size\n)\nprint(f\"page {res.page_number}/{(res.array_total + page_size - 1)//page_size}\")\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/#2-fetch-all-pages-be-kind-to-the-server","title":"2) Fetch all pages (be kind to the server)","text":"<pre><code>from datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nfrom_dt = now - timedelta(days=7)\n\npage_size = 200\npage = 1\nall_items = []\nwhile True:\n    res = await acct.order_history(\n        from_dt, now,\n        ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_OPEN_TIME_ASC,\n        page, page_size\n    )\n    all_items.extend(res.history_data)\n    if len(res.history_data) &lt; page_size:\n        break\n    page += 1\nprint(len(all_items))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/#3-clientside-filter-only-symbol-eurusd","title":"3) Client\u2011side filter: only symbol = \"EURUSD\"","text":"<pre><code>from datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nres = await acct.order_history(\n    now - timedelta(days=3), now,\n    ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_CLOSE_TIME_DESC,\n    1, 100\n)\nfiltered = []\nfor h in res.history_data:\n    if h.history_order and h.history_order.symbol == \"EURUSD\":\n        filtered.append(h)\n    elif h.history_deal and h.history_deal.symbol == \"EURUSD\":\n        filtered.append(h)\nprint(len(filtered))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/order_history/#4-with-deadline-cancellation","title":"4) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\ncancel_event = asyncio.Event()\nres = await acct.order_history(\n    datetime.now(timezone.utc) - timedelta(days=1),\n    datetime.now(timezone.utc),\n    ah_pb2.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.BMT5_SORT_BY_ORDER_TICKET_ID_ASC,\n    1, 100,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(res.items_per_page)\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_history/","title":"\u2705 Positions History","text":"<p>Request: paginated positions history for a time range. Server\u2011side sorted pages of historical positions (open\u2192close lifecycle, PnL, fees).</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>positions_history(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>PositionsHistory*</code>, <code>PositionsHistoryData</code>, <code>PositionHistoryData</code>, <code>BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>PositionsHistory(PositionsHistoryRequest) \u2192 PositionsHistoryReply</code></li> <li>Low-level client: <code>AccountHelperStub.PositionsHistory(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.positions_history(sort_type, open_from, open_to, page=1, size=100, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: last 30 days, sort by CLOSE_TIME desc\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nres = await acct.positions_history(\n    sort_type=ah_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE.BMT5_POSHIST_SORT_BY_CLOSE_TIME_DESC,\n    open_from=now - timedelta(days=30),\n    open_to=now,\n    page=1,\n    size=100,\n)\n\nprint(res.array_total, len(res.positions_data))  # total items, items on this page\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#method-signature","title":"Method Signature","text":"<pre><code>async def positions_history(\n    self,\n    sort_type: account_helper_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE,\n    open_from: datetime,\n    open_to: datetime,\n    page: int = 1,\n    size: int = 100,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.PositionsHistoryData\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A closed positions ledger: each row is a position\u2019s life story \u2014 opened at X, closed at Y, with PnL/fees and reasons.</li> <li>Why you care. PnL reporting, compliance/audit, and troubleshooting sequences (\u201cwhen/why did this position close?\u201d).</li> <li> <p>Mind the traps.</p> </li> <li> <p>It\u2019s paginated; read <code>array_total/page_number/items_per_page</code> to loop properly.</p> </li> <li>All times are UTC <code>Timestamp</code>s; convert once before rendering.</li> <li>Positions history \u2260 order/deal history; fields are position\u2011level (aggregated), not individual deal lines.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>sort_type</code> <code>BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE</code> (enum, required) Server\u2011side sort (see enum below). <code>open_from</code> <code>datetime</code> (UTC) Start of the time window for open time. <code>open_to</code> <code>datetime</code> (UTC) End of the time window for open time. <code>page</code> <code>int</code> 1\u2011based page number. <code>size</code> <code>int</code> Items per page (e.g., 50/100/500). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>PositionsHistoryRequest { position_open_time_from, position_open_time_to, sort_type, page_number, items_per_page }</code></p>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Orders_Positions_History/positions_history/#payload-positionshistorydata","title":"Payload: <code>PositionsHistoryData</code>","text":"Field Proto Type Description <code>array_total</code> <code>int32</code> Total number of items across pages. <code>page_number</code> <code>int32</code> Page number of this reply. <code>items_per_page</code> <code>int32</code> Items per page of this reply. <code>positions_data</code> <code>repeated PositionHistoryData</code> Page of closed/opened positions."},{"location":"MT5Account/Orders_Positions_History/positions_history/#message-positionhistorydata","title":"Message: <code>PositionHistoryData</code>","text":"Field Type Notes <code>index</code> <code>uint32</code> Internal ordering index. <code>ticket</code> <code>uint64</code> Position ticket ID. <code>identifier</code> <code>int64</code> Position identifier. <code>symbol</code> <code>string</code> Symbol. <code>type</code> <code>BMT5_ENUM_POSITION_TYPE</code> BUY/SELL. <code>reason</code> <code>BMT5_ENUM_POSITION_REASON</code> CLIENT/EXPERT/SL/TP/SO/\u2026 <code>open_time</code> <code>Timestamp</code> When opened. <code>close_time</code> <code>Timestamp</code> When closed. <code>volume_initial</code> <code>double</code> Initial volume. <code>volume</code> <code>double</code> Final volume (at close). <code>price_open</code> <code>double</code> Open price. <code>price_close</code> <code>double</code> Close price. <code>stop_loss</code> <code>double</code> SL. <code>take_profit</code> <code>double</code> TP. <code>swap</code> <code>double</code> Swap accrued. <code>profit</code> <code>double</code> Position PnL. <code>commission</code> <code>double</code> Commission. <code>position_commission</code> <code>double</code> Per\u2011position commission (if present). <code>magic_number</code> <code>int64</code> EA/strategy tag. <code>account_login</code> <code>int64</code> Account login."},{"location":"MT5Account/Orders_Positions_History/positions_history/#enum-bmt5_enum_positions_history_sort_type","title":"Enum: <code>BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE</code>","text":"Number Value Meaning 0 <code>BMT5_POSHIST_SORT_BY_OPEN_TIME_ASC</code> Open time ascending. 1 <code>BMT5_POSHIST_SORT_BY_OPEN_TIME_DESC</code> Open time descending. 2 <code>BMT5_POSHIST_SORT_BY_CLOSE_TIME_ASC</code> Close time ascending. 3 <code>BMT5_POSHIST_SORT_BY_CLOSE_TIME_DESC</code> Close time descending. 4 <code>BMT5_POSHIST_SORT_BY_POSITION_TICKET_ID_ASC</code> Ticket ascending. 5 <code>BMT5_POSHIST_SORT_BY_POSITION_TICKET_ID_DESC</code> Ticket descending. <p>Related enums used above: <code>BMT5_ENUM_POSITION_TYPE</code>, <code>BMT5_ENUM_POSITION_REASON</code>.</p>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fetch closed positions history with server-side sorting and paging.</li> <li>Power PnL reports and \u201cClosed positions\u201d UI (infinite scroll).</li> <li>Reconcile realized PnL; investigate close reasons and stop-outs.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Sort on the server (<code>close_time DESC</code>, then <code>ticket</code>); convert protobuf <code>Timestamp</code> once (UTC) and reuse.</li> <li>Partial closes create multiple records per ticket \u2014 aggregate if you need one row; call <code>positions_total</code> first to short-circuit empty ranges.</li> </ul> <p>See also: OpenedOrders \u00b7 OpenedOrdersTickets \u00b7 OrderHistory \u00b7 PositionsTotal</p>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Orders_Positions_History/positions_history/#1-last-month-pnl-by-symbol","title":"1) Last month PnL by symbol","text":"<pre><code>from datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nfrom_dt = (now.replace(day=1) - timedelta(days=1)).replace(day=1)\n\npage, size = 1, 200\npnl_by_symbol = {}\nwhile True:\n    res = await acct.positions_history(\n        ah_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE.BMT5_POSHIST_SORT_BY_CLOSE_TIME_DESC,\n        open_from=from_dt,\n        open_to=now,\n        page=page,\n        size=size,\n    )\n    for ph in res.positions_data:\n        sym = ph.symbol\n        pnl_by_symbol[sym] = pnl_by_symbol.get(sym, 0.0) + float(ph.profit)\n    if len(res.positions_data) &lt; size:\n        break\n    page += 1\n\nfor sym, pnl in sorted(pnl_by_symbol.items()):\n    print(sym, round(pnl, 2))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#2-only-sell-positions-last-7-days","title":"2) Only SELL positions, last 7 days","text":"<pre><code>from datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nnow = datetime.now(timezone.utc)\nres = await acct.positions_history(\n    ah_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE.BMT5_POSHIST_SORT_BY_OPEN_TIME_ASC,\n    now - timedelta(days=7), now,\n    1, 100\n)\nonly_sell = [p for p in res.positions_data if int(p.type) == 1]  # assuming 0=BUY,1=SELL\nprint(len(only_sell))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_history/#3-with-deadline-cancellation","title":"3) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\ncancel_event = asyncio.Event()\nres = await acct.positions_history(\n    ah_pb2.BMT5_ENUM_POSITIONS_HISTORY_SORT_TYPE.BMT5_POSHIST_SORT_BY_POSITION_TICKET_ID_ASC,\n    datetime.now(timezone.utc) - timedelta(days=1),\n    datetime.now(timezone.utc),\n    1, 100,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(res.size)\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_total/","title":"\u2705 Positions Total","text":"<p>Request: total number of currently open positions for the connected MT5 account. Lightweight integer result \u2014 ideal for quick guards and UI badges.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>positions_total(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trade_functions_pb2.py</code> \u2014 <code>PositionsTotal*</code></li> </ul> <p>Menu entry: <code>PositionsTotal</code></p>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradeFunctions</code></li> <li>Method: <code>PositionsTotal(PositionsTotalRequest) \u2192 PositionsTotalReply</code></li> <li>Low-level client: <code>TradeFunctionsStub.PositionsTotal(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.positions_total(deadline=None, cancellation_event=None) -&gt; PositionsTotalData</code></li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: how many positions are open now?\nres = await acct.positions_total()                # PositionsTotalData\nprint(int(res.total_positions))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#method-signature","title":"Method Signature","text":"<pre><code>async def positions_total(\n    self,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trade_functions_pb2.PositionsTotalData\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A quick headcount for your exposure: \u201chow many positions are alive right now?\u201d</li> <li>Why you care. Drive red dots and badges in UI, simple pre-trade rules (e.g., max concurrent positions), and smoke checks.</li> <li> <p>Mind the traps.</p> </li> <li> <p>This is positions only (not pending orders). For orders, see <code>OpenedOrders</code>.</p> </li> <li>It returns one integer inside <code>PositionsTotalData</code>; if you need symbols/volumes/PnL, call richer RPCs (<code>OpenedOrders</code>).</li> <li>Consider your netting/hedging mode when interpreting counts.</li> <li>When to call. On screen open, periodic refresh, before opening new positions.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#input","title":"\ud83d\udd3d Input","text":"<p>No required input parameters.</p> Parameter Type Description <code>deadline</code> <code>datetime</code> | <code>None</code> Absolute per-call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event</code> | <code>None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>PositionsTotalRequest {}</code> has no fields.</p>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Orders_Positions_History/positions_total/#payload-positionstotaldata","title":"Payload: <code>PositionsTotalData</code>","text":"Field Proto Type Description <code>total_positions</code> <code>int32</code> Number of currently open positions."},{"location":"MT5Account/Orders_Positions_History/positions_total/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Show a compact count badge in dashboards/CLI.</li> <li>Enforce simple risk/ops rules (e.g., don\u2019t exceed N concurrent positions).</li> <li>Quick sanity checks during workflows.</li> </ul>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For details per position (symbol, PnL, volume) use <code>OpenedOrders</code> or historical RPCs.</li> <li>Wrapper retries transient gRPC errors via <code>execute_with_reconnect(...)</code>.</li> </ul> <p>See also: OpenedOrders, OpenedOrdersTickets.</p>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Orders_Positions_History/positions_total/#1-simple-print-guard","title":"1) Simple print &amp; guard","text":"<pre><code>res = await acct.positions_total()\nif int(res.total_positions) &gt; 10:\n    print(\"Too many open positions \u2014 consider reducing exposure.\")\nelse:\n    print(f\"Open positions: {int(res.total_positions)}\")\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#2-with-deadline-cancellation","title":"2) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.positions_total(\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(int(res.total_positions))\n</code></pre>"},{"location":"MT5Account/Orders_Positions_History/positions_total/#3-cross-check-vs-openedorders-client-side-sanity","title":"3) Cross-check vs OpenedOrders (client-side sanity)","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nn = int((await acct.positions_total()).total_positions)\nod = await acct.opened_orders(\n    ah_pb2.BMT5_ENUM_OPENED_ORDER_SORT_TYPE.BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC\n)\nprint(n, len(od.position_infos))  # should normally match\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/","title":"MT5Account \u00b7 Subscriptions Streaming \u2014 Overview","text":"<p>Quick map of the live streaming APIs: ticks, trade deltas, transactions, position P/L, and IDs-only snapshots. Use this to pick the right stream fast.</p>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/#what-lives-here","title":"\ud83d\udcc1 What lives here","text":"<ul> <li>on_symbol_tick \u2014 live tick stream per symbol (Bid/Ask/Last, volumes, flags, time).</li> <li>on_trade \u2014 high\u2011level order/position/deal deltas + account P/L snapshot per event.</li> <li>on_trade_transaction \u2014 low\u2011level transaction feed: transaction + request + result.</li> <li>on_position_profit \u2014 periodic P/L snapshots for positions (new/updated/deleted) + account info.</li> <li>on_positions_and_pending_orders_tickets \u2014 periodic IDs\u2011only snapshot of position and pending order tickets.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/#plain-english","title":"\ud83e\udded Plain English","text":"<ul> <li>on_symbol_tick \u2192 your price heartbeat (per\u2011symbol ticks for UI/algos).</li> <li>on_trade \u2192 state deltas (orders/positions/deals) bundled for easy UI sync.</li> <li>on_trade_transaction \u2192 audit\u2011level stream with request/result pairing.</li> <li>on_position_profit \u2192 P/L ticker for positions on a timer.</li> <li>on_positions_and_pending_orders_tickets \u2192 cheap set\u2011diff source (IDs only).</li> </ul> <p>Rule of thumb: need prices \u2192 <code>on_symbol_tick</code>; need deltas \u2192 <code>on_trade</code>; need audit \u2192 <code>on_trade_transaction</code>; need P/L \u2192 <code>on_position_profit</code>; need change detection \u2192 IDs\u2011only stream.</p>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/#quick-choose","title":"Quick choose","text":"If you need\u2026 Use Returns Key inputs Live ticks (Bid/Ask/Last/flags/time) <code>on_symbol_tick</code> stream <code>OnSymbolTickData</code> <code>symbols: list[str]</code>, <code>cancellation_event?</code> Deltas of orders/positions/deals + account <code>on_trade</code> stream <code>OnTradeData</code> <code>cancellation_event?</code> Raw transactions with request+result <code>on_trade_transaction</code> stream <code>OnTradeTransactionData</code> <code>cancellation_event?</code> Timed position P/L snapshots <code>on_position_profit</code> stream <code>OnPositionProfitData</code> <code>interval_ms:int</code>, <code>ignore_empty:bool</code>, <code>cancel?</code> IDs\u2011only snapshot (positions &amp; pendings) <code>on_positions_and_pending_orders_tickets</code> stream <code>OnPositionsAndPendingOrdersTicketsData</code> <code>interval_ms:int</code>, <code>cancellation_event?</code>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/#crossrefs-gotchas","title":"\u274c Cross\u2011refs &amp; gotchas","text":"<ul> <li>Long\u2011lived streams \u2014 always support a <code>cancellation_event</code> and stop cleanly on page change/shutdown.</li> <li>UTC times \u2014 <code>Timestamp</code>/<code>time_msc</code> are UTC; convert once for UI.</li> <li>Back\u2011pressure \u2014 keep per\u2011event handlers light; push to queues if you do heavy work.</li> <li>Cold start \u2014 use <code>OpenedOrders</code> (or other snapshot RPCs) once, then rely on streams.</li> <li>IDs vs full objects \u2014 tickets stream is for set\u2011diff; fetch details only on change.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/SubscriptionsStreaming_Overview/#minimal-snippets","title":"\ud83d\udfe2 Minimal snippets","text":"<pre><code># on_symbol_tick \u2014 print Bid/Ask\nasync for ev in acct.on_symbol_tick([\"EURUSD\", \"XAUUSD\"]):\n    t = ev.symbol_tick\n    print(t.symbol, t.bid, t.ask)\n</code></pre> <pre><code># on_trade \u2014 count changed objects per event\nasync for ev in acct.on_trade():\n    d = ev.event_data\n    print(len(d.new_orders), len(d.updated_positions), len(d.new_history_deals))\n</code></pre> <pre><code># on_trade_transaction \u2014 show type and ids\nasync for ev in acct.on_trade_transaction():\n    tr = ev.trade_transaction\n    print(tr.type, tr.order_ticket, tr.deal_ticket)\n</code></pre> <pre><code># on_position_profit \u2014 sum current P/L in the batch\nasync for ev in acct.on_position_profit(1000, True):\n    print(sum(p.profit for p in (ev.updated_positions or [])))\n</code></pre> <pre><code># on_positions_and_pending_orders_tickets \u2014 diff detector\nprev_pos, prev_ord = set(), set()\nasync for ev in acct.on_positions_and_pending_orders_tickets(750):\n    pos, ords = set(ev.opened_position_tickets), set(ev.opened_orders_tickets)\n    if (pos != prev_pos) or (ords != prev_ord):\n        print(\"changed\")\n        prev_pos, prev_ord = pos, ords\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/","title":"\u2705 On Position Profit","text":"<p>Request: subscribe to periodic position P/L updates. Server\u2011streaming RPC that emits batches of new/updated/deleted positions plus an account P/L snapshot.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>on_position_profit(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2.py</code> \u2014 <code>OnPositionProfit*</code> messages and payloads</li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2_grpc.py</code> \u2014 service stub <code>SubscriptionServiceStub</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.SubscriptionService</code></li> <li>Method: <code>OnPositionProfit(OnPositionProfitRequest) \u2192 stream OnPositionProfitReply</code></li> <li>Low\u2011level client: <code>SubscriptionServiceStub.OnPositionProfit(request, metadata, timeout)</code> (server\u2011streaming iterator)</li> <li>SDK wrapper: <code>MT5Account.on_position_profit(interval_ms, ignore_empty, cancellation_event=None) \u2192 async stream of OnPositionProfitData</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal: stream profit updates every 1s, skip empty batches\nasync for ev in acct.on_position_profit(interval_ms=1000, ignore_empty=True):\n    # ev: OnPositionProfitData\n    total = sum(p.profit for p in (getattr(ev, 'updated_positions', []) or []))\n    print(\"updated:\", len(getattr(ev, 'updated_positions', []) or []), \"total pnl:\", total)\n</code></pre> <pre><code># With cooperative cancellation after first non\u2011empty event\nimport asyncio\ncancel = asyncio.Event()\n\nasync for ev in acct.on_position_profit(500, True, cancellation_event=cancel):\n    if (getattr(ev, 'new_positions', None) or getattr(ev, 'updated_positions', None) or getattr(ev, 'deleted_positions', None)):\n        print(\"non\u2011empty batch; equity:\", getattr(ev, 'account_info', None).equity)\n        cancel.set()\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#method-signature","title":"Method Signature","text":"<pre><code>async def on_position_profit(\n    self,\n    interval_ms: int,\n    ignore_empty: bool,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; AsyncIterator[subscription_pb2.OnPositionProfitData]\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. Timed profit snapshots for positions with deltas (new/updated/deleted) and an account P/L frame.</li> <li>Why. Keep dashboards, badges, and risk widgets fresh without polling multiple services.</li> <li> <p>Be careful.</p> </li> <li> <p><code>interval_ms</code> controls server timer; don\u2019t spam with tiny intervals unless you really need it.</p> </li> <li><code>ignore_empty=True</code> suppresses empty frames (no position changes) to reduce UI churn.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>interval_ms</code> <code>int</code> (required) Sampling period in milliseconds (server timer). <code>ignore_empty</code> <code>bool</code> (required) Skip frames with no changes (positions lists empty). <code>cancellation_event</code> `asyncio.Event None` Cooperative stop for the streaming RPC. <p>Request message: <code>OnPositionProfitRequest { timerPeriodMilliseconds: int32, ignoreEmptyData: bool }</code></p>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#stream-payload-onpositionprofitdata","title":"Stream payload: <code>OnPositionProfitData</code>","text":"Field Proto Type Description <code>type</code> <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code> Event group marker (e.g., <code>OrderProfit</code>). <code>new_positions</code> <code>repeated OnPositionProfitPositionInfo</code> Positions that appeared since last frame. <code>updated_positions</code> <code>repeated OnPositionProfitPositionInfo</code> Positions with profit change/update. <code>deleted_positions</code> <code>repeated OnPositionProfitPositionInfo</code> Positions that disappeared (closed). <code>account_info</code> <code>OnEventAccountInfo</code> Account snapshot (balance/equity/margins). <code>terminal_instance_guid_id</code> <code>string</code> Source terminal GUID."},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#onpositionprofitpositioninfo","title":"<code>OnPositionProfitPositionInfo</code>","text":"# Field Type Notes 1 <code>index</code> int32 Ordering index inside the batch. 2 <code>ticket</code> int64 Position ticket. 3 <code>profit</code> double Position profit at this snapshot. 4 <code>position_symbol</code> string Symbol of the position."},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#oneventaccountinfo","title":"<code>OnEventAccountInfo</code>","text":"# Field Type 1 <code>balance</code> double 2 <code>credit</code> double 3 <code>equity</code> double 4 <code>margin</code> double 5 <code>free_margin</code> double 6 <code>profit</code> double 7 <code>margin_level</code> double 8 <code>login</code> int64 <p>Wire stream: <code>OnPositionProfitReply { data: OnPositionProfitData, error?: Error }</code> SDK wrapper yields <code>OnPositionProfitData</code> objects one by one.</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#enum-mt5_sub_enum_event_group_type","title":"Enum: <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code>","text":"Number Value 0 <code>OrderProfit</code> 1 <code>OrderUpdate</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Drive P/L tickers and summary tiles in UI.</li> <li>Alert on unusual profit swings per position.</li> <li>Lightweight input for risk dashboards and telemetry.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For orders/positions life\u2011cycle deltas (beyond profit), see <code>OnTrade</code>.</li> <li>For low-level transaction auditing (request/result), see <code>OnTradeTransaction</code>.</li> <li>Use <code>symbol_info_*</code> calls to enrich rows with digits/format if you render money values.</li> </ul> <p>See also: opened_orders.md, positions_history.md, on_trade.md</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#1-running-sum-of-current-pl","title":"1) Running sum of current P/L","text":"<pre><code>async for ev in acct.on_position_profit(1000, True):\n    pnl = sum(p.profit for p in (ev.updated_positions or []))\n    print(\"P/L:\", pnl)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#2-only-show-non-empty-frames","title":"2) Only show non-empty frames","text":"<pre><code>async for ev in acct.on_position_profit(500, True):\n    if not (ev.new_positions or ev.updated_positions or ev.deleted_positions):\n        continue\n    print(\"changed:\", len(ev.new_positions), len(ev.updated_positions), len(ev.deleted_positions))\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_position_profit/#3-stop-the-stream-after-5-seconds","title":"3) Stop the stream after 5 seconds","text":"<pre><code>import asyncio\nstop = asyncio.Event()\nasync def guard():\n    await asyncio.sleep(5)\n    stop.set()\nasyncio.create_task(guard())\n\nasync for ev in acct.on_position_profit(200, False, cancellation_event=stop):\n    print(ev.account_info.equity)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/","title":"\u2705 On Positions And Pending Orders Tickets","text":"<p>Request: subscribe to periodic IDs-only snapshots of open positions and pending orders. Lightweight stream \u2014 perfect for fast diff/poll logic without heavy objects.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>on_positions_and_pending_orders_tickets(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2.py</code> \u2014 <code>OnPositionsAndPendingOrdersTickets*</code> messages</li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2_grpc.py</code> \u2014 service stub <code>SubscriptionServiceStub</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.SubscriptionService</code></li> <li>Method: <code>OnPositionsAndPendingOrdersTickets(OnPositionsAndPendingOrdersTicketsRequest) \u2192 stream OnPositionsAndPendingOrdersTicketsReply</code></li> <li>Low-level client: <code>SubscriptionServiceStub.OnPositionsAndPendingOrdersTickets(request, metadata, timeout)</code> (server\u2011streaming iterator)</li> <li>SDK wrapper: <code>MT5Account.on_positions_and_pending_orders_tickets(interval_ms, cancellation_event=None) \u2192 async stream of OnPositionsAndPendingOrdersTicketsData</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal: stream tickets every 1s and print counts\nasync for ev in acct.on_positions_and_pending_orders_tickets(1000):\n    print(len(ev.opened_position_tickets), len(ev.opened_orders_tickets))\n</code></pre> <pre><code># Diff detector: fire only when sets change (cooperative cancel after first change)\nimport asyncio\ncancel = asyncio.Event()\nprev_pos, prev_ord = set(), set()\nasync for ev in acct.on_positions_and_pending_orders_tickets(500, cancellation_event=cancel):\n    pos = set(ev.opened_position_tickets)\n    ords = set(ev.opened_orders_tickets)\n    if pos != prev_pos or ords != prev_ord:\n        added_pos = pos - prev_pos; removed_pos = prev_pos - pos\n        added_ord = ords - prev_ord; removed_ord = prev_ord - ords\n        print(\"pos +\", added_pos, \"-\", removed_pos, \"| ord +\", added_ord, \"-\", removed_ord)\n        cancel.set()\n    prev_pos, prev_ord = pos, ords\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#method-signature","title":"Method Signature","text":"<pre><code>async def on_positions_and_pending_orders_tickets(\n    self,\n    interval_ms: int,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; subscription_client.OnPositionsAndPendingOrdersTickets  # async iterable of OnPositionsAndPendingOrdersTicketsData\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. A timed IDs-only stream for open positions and pending orders.</li> <li>Why. Super\u2011cheap heartbeat to drive UI badges and set\u2011diff logic. Fetch full details only when something changed.</li> <li> <p>Be careful.</p> </li> <li> <p>This is a snapshot on a timer, not a delta. Do your own set\u2011diff client\u2011side.</p> </li> <li>Choose a sensible <code>interval_ms</code> \u2014 too small hammers the network/UI.</li> <li>Lists may be empty (no open positions / no pending orders).</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>interval_ms</code> <code>int</code> (required) Sampling period in milliseconds (server timer). <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative stop for the streaming RPC. <p>Request message: <code>OnPositionsAndPendingOrdersTicketsRequest { timerPeriodMilliseconds: int32 }</code></p>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#stream-payload-onpositionsandpendingordersticketsdata","title":"Stream payload: <code>OnPositionsAndPendingOrdersTicketsData</code>","text":"Field Proto Type Description <code>type</code> <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code> Event group marker (typically <code>OrderUpdate</code>). <code>opened_position_tickets[]</code> <code>repeated uint64</code> IDs of open positions. <code>opened_orders_tickets[]</code> <code>repeated uint64</code> IDs of pending orders. <code>terminal_instance_guid_id</code> <code>string</code> Source terminal GUID. <p>Wire stream: <code>OnPositionsAndPendingOrdersTicketsReply { data: OnPositionsAndPendingOrdersTicketsData, error?: Error }</code> SDK wrapper yields <code>OnPositionsAndPendingOrdersTicketsData</code> objects one by one.</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#enum-mt5_sub_enum_event_group_type","title":"Enum: <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code>","text":"Number Value 0 <code>OrderProfit</code> 1 <code>OrderUpdate</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Power fast polling/diff loops in UI/services.</li> <li>Trigger detailed fetch (<code>OpenedOrders</code>, <code>OrderHistory</code>, etc.) only on change.</li> <li>Cheap liveness signal for terminals.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For full objects (prices, SL/TP, volumes) use <code>OpenedOrders</code> or <code>OnTrade</code> stream.</li> <li>Combine with <code>OrderCheck/OrderSend</code> to react immediately after placement.</li> <li>Persist the last seen sets to avoid flicker across UI reloads.</li> </ul> <p>See also: opened_orders_tickets.md, opened_orders.md, on_trade.md</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#1-show-counts-badge-in-ui","title":"1) Show counts badge in UI","text":"<pre><code>async for ev in acct.on_positions_and_pending_orders_tickets(1000):\n    badge_positions = len(ev.opened_position_tickets)\n    badge_orders = len(ev.opened_orders_tickets)\n    print(badge_positions, badge_orders)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#2-trigger-detail-fetch-only-on-change","title":"2) Trigger detail fetch only on change","text":"<pre><code>prev = (set(), set())\nasync for ev in acct.on_positions_and_pending_orders_tickets(750):\n    pos, ords = set(ev.opened_position_tickets), set(ev.opened_orders_tickets)\n    if (pos, ords) != prev:\n        details = await acct.opened_orders(...)  # fetch heavy only when needed\n        prev = (pos, ords)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_positions_and_pending_orders_tickets/#3-stop-after-10-seconds-external-watchdog","title":"3) Stop after 10 seconds (external watchdog)","text":"<pre><code>import asyncio\nstop = asyncio.Event()\nasync def watchdog():\n    await asyncio.sleep(10)\n    stop.set()\nasyncio.create_task(watchdog())\n\nasync for ev in acct.on_positions_and_pending_orders_tickets(250, cancellation_event=stop):\n    print(\"tick\")\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/","title":"\u2705 On Symbol Tick","text":"<p>Request: subscribe to live ticks for one symbol (SDK wrapper) via a server\u2011streaming RPC that emits events with Bid/Ask/Last, volumes, flags, and time.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>on_symbol_tick(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2.py</code> \u2014 <code>OnSymbolTick*</code> messages (request/reply/data/event)</li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2_grpc.py</code> \u2014 service stub <code>SubscriptionServiceStub</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.SubscriptionService</code></li> <li>Method: <code>OnSymbolTick(OnSymbolTickRequest) \u2192 stream OnSymbolTickReply</code></li> <li>Low\u2011level client: <code>SubscriptionServiceStub.OnSymbolTick(request, metadata, timeout)</code> (server\u2011streaming iterator)</li> <li>SDK wrapper: <code>MT5Account.on_symbol_tick(symbol, deadline=None, cancellation_event=None) \u2192 async stream of SymbolTickEvent</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: stream ticks for one symbol (SDK wrapper takes a single symbol)\nasync for ev in acct.on_symbol_tick(\"EURUSD\"):\n    # ev: SymbolTickEvent\n    print(ev.name, ev.bid, ev.ask)\n</code></pre> <pre><code># With cooperative cancellation (stop after first 10 events)\nimport asyncio\n\ncancel = asyncio.Event()\ncount = 0\nasync for ev in acct.on_symbol_tick(\"EURUSD\", cancellation_event=cancel):\n    spread = (ev.ask - ev.bid) if (ev.ask is not None and ev.bid is not None) else None\n    print(ev.name, ev.bid, ev.ask, spread)\n    count += 1\n    if count &gt;= 10:\n        cancel.set()\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#method-signature","title":"Method Signature","text":"<pre><code>async def on_symbol_tick(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; subscription_client.OnSymbolTick  # async iterable of SymbolTickEvent\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. A live stream of tick updates for specified symbols.</li> <li>Why. Drive real\u2011time widgets, alerts, and execution logic without polling.</li> <li> <p>Be careful.</p> </li> <li> <p>Symbols must exist and be synchronized; otherwise events may be sparse/empty.</p> </li> <li>This is a long\u2011lived call \u2014 remember to cancel via <code>cancellation_event</code> when your UI page closes.</li> <li>Timestamps are UTC; <code>time_msc</code> is milliseconds since epoch if provided.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name to subscribe to. <code>deadline</code> `datetime None` Absolute deadline; converted to client\u2011side timeout <code>cancellation_event</code> `asyncio.Event None` Cooperative stop for the streaming RPC. <p>Request message: <code>OnSymbolTickRequest { symbol_name: string }</code></p>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#stream-payload-symboltickevent","title":"Stream payload: <code>SymbolTickEvent</code>","text":"<p>Emitted repeatedly for the subscribed symbol.</p> Field Proto Type Description <code>name</code> <code>string</code> Symbol name. <code>bid</code> <code>double</code> Current bid. <code>ask</code> <code>double</code> Current ask. <code>last</code> <code>double</code> Last trade price (if applicable). <code>volume</code> <code>uint64</code> Tick volume. <code>volume_real</code> <code>double</code> Real volume (if provided by broker). <code>flags</code> <code>uint32</code> Tick flags (bitmask). <code>time</code> <code>google.protobuf.Timestamp</code> Tick time (UTC seconds). <code>time_msc</code> <code>int64</code> Tick time in milliseconds since epoch (UTC). <p>Wire stream: <code>OnSymbolTickReply { data: SymbolTickEvent, error?: Error }</code> SDK wrapper yields <code>SymbolTickEvent</code> objects one by one.</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Feed real\u2011time quotes to dashboards, chart overlays, and algos.</li> <li>Compute derived metrics (spread, mid, microstructure) on the fly.</li> <li>Power alerts (e.g., price thresholds, stale\u2011tick detection).</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure the symbol is selected/synchronized (e.g., via <code>symbol_select</code> / <code>symbol_is_synchronized</code>) before subscribing.</li> <li>For depth/DOM, use the market book APIs: <code>market_book_add / market_book_get / market_book_release</code>.</li> </ul> <p>See also: symbol_info_tick.md, on_positions_and_pending_orders_tickets.md, on_trade.md</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#1-compute-mid-only-for-eurusd","title":"1) Compute mid only for EURUSD","text":"<pre><code>async for ev in acct.on_symbol_tick(\"EURUSD\"):\n    mid = (ev.bid + ev.ask) / 2 if (ev.bid is not None and ev.ask is not None) else None\n    print(\"mid:\", mid)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#2-timeout-guard-via-external-task","title":"2) Timeout guard via external task","text":"<pre><code>import asyncio\n\ncancel = asyncio.Event()\nasync def watchdog():\n    await asyncio.sleep(5)\n    cancel.set()\n\nasyncio.create_task(watchdog())\nasync for ev in acct.on_symbol_tick(\"XAUUSD\", cancellation_event=cancel):\n    print(ev.name, ev.bid)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_symbol_tick/#3-queue-backpressure-for-ui","title":"3) Queue back\u2011pressure for UI","text":"<pre><code>from asyncio import Queue\nq = Queue(maxsize=100)\n\nasync for ev in acct.on_symbol_tick(\"BTCUSD\"):\n    if q.full():\n        _ = q.get_nowait()\n    await q.put(ev)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/","title":"\u2705 On Trade","text":"<p>Request: subscribe to live trading events: new/updated/removed orders, deals history, positions, plus account P/L snapshot bundled with each event.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>on_trade(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2.py</code> \u2014 <code>OnTrade*</code> messages and event payloads</li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2_grpc.py</code> \u2014 service stub <code>SubscriptionServiceStub</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.SubscriptionService</code></li> <li>Method: <code>OnTrade(OnTradeRequest) \u2192 stream OnTradeReply</code></li> <li>Low-level client: <code>SubscriptionServiceStub.OnTrade(request, metadata, timeout)</code> (server\u2011streaming iterator)</li> <li>SDK wrapper: <code>MT5Account.on_trade(cancellation_event=None) \u2192 async stream of OnTradeData</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal: print what changed per event\nasync for ev in acct.on_trade():\n    d = ev.event_data\n    print(\n        len(d.new_orders), len(d.state_changed_orders), len(d.disappeared_orders),\n        len(d.new_positions), len(d.updated_positions), len(d.disappeared_positions),\n        len(d.new_history_deals)\n    )\n</code></pre> <pre><code># Cooperative cancellation after N events\nimport asyncio\ncancel = asyncio.Event()\ncount = 0\nasync for ev in acct.on_trade(cancellation_event=cancel):\n    count += 1\n    # Example: account equity after event\n    print(ev.account_info.equity)\n    if count &gt;= 20:\n        cancel.set()\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#method-signature","title":"Method Signature","text":"<pre><code>async def on_trade(\n    self,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; subscription_client.OnTrade  # async iterable of OnTradeData\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. A live feed of trade\u2011related updates grouped into a single event: order/position deltas, deal &amp; order history deltas, and account equity/margin snapshot.</li> <li>Why. Ideal for keeping UIs and state machines in sync without polling multiple RPCs.</li> <li> <p>Be careful.</p> </li> <li> <p>Stream is infinite until you cancel via <code>cancellation_event</code>.</p> </li> <li>Timestamps are UTC (<code>Timestamp</code>) and some fields also provide ms since epoch (<code>*_time_msc</code>).</li> <li>Handle empty lists \u2014 not every group changes on each event.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative stop for the streaming RPC. <p>Request message: <code>OnTradeRequest {}</code></p>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#stream-payload-ontradedata","title":"Stream payload: <code>OnTradeData</code>","text":"Field Proto Type Description <code>type</code> <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code> Event group marker (e.g., <code>OrderUpdate</code>). <code>event_data</code> <code>OnTradeEventData</code> Batched deltas (lists below). <code>account_info</code> <code>OnEventAccountInfo</code> Balance/Equity/Margins snapshot. <code>terminal_instance_guid_id</code> <code>string</code> Source terminal GUID."},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradeeventdata-batched-lists","title":"<code>OnTradeEventData</code> (batched lists)","text":"List name Item type What it carries <code>new_orders[]</code> <code>OnTradeOrderInfo</code> Newly placed orders. <code>disappeared_orders[]</code> <code>OnTradeOrderInfo</code> Orders removed from book. <code>state_changed_orders[]</code> <code>OnTradeOrderStateChange</code> Before/after for order state changes. <code>new_history_orders[]</code> <code>OnTradeHistoryOrderInfo</code> Fresh entries in order history. <code>disappeared_history_orders[]</code> <code>OnTradeHistoryOrderInfo</code> Removed order\u2011history entries. <code>updated_history_orders[]</code> <code>OnTradeHistoryOrderUpdate</code> Before/after for order\u2011history update. <code>new_history_deals[]</code> <code>OnTradeHistoryDealInfo</code> Fresh deals. <code>disappeared_history_deals[]</code> <code>OnTradeHistoryDealInfo</code> Removed deals. <code>updated_history_deals[]</code> <code>OnTradeHistoryDealUpdate</code> Before/after for deal\u2011history update. <code>new_positions[]</code> <code>OnTradePositionInfo</code> Newly opened positions. <code>disappeared_positions[]</code> <code>OnTradePositionInfo</code> Closed positions. <code>updated_positions[]</code> <code>OnTradePositionUpdate</code> Before/after for position updates."},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#oneventaccountinfo","title":"<code>OnEventAccountInfo</code>","text":"# Field Type 1 <code>balance</code> double 2 <code>credit</code> double 3 <code>equity</code> double 4 <code>margin</code> double 5 <code>free_margin</code> double 6 <code>profit</code> double 7 <code>margin_level</code> double 8 <code>login</code> int64"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradeorderinfo","title":"<code>OnTradeOrderInfo</code>","text":"# Field Type 1 <code>index</code> int32 2 <code>ticket</code> int64 3 <code>state</code> <code>SUB_ENUM_ORDER_STATE</code> 4 <code>setup_time_msc</code> int64 5 <code>stop_loss</code> double 6 <code>take_profit</code> double 7 <code>stop_limit</code> double 8 <code>price_current</code> double 9 <code>time_expiration</code> <code>Timestamp</code> 10 <code>type_time</code> <code>SUB_ENUM_ORDER_TYPE_TIME</code> 11 <code>comment</code> string 12 <code>symbol</code> string 13 <code>magic</code> int64 14 <code>price_open</code> double 15 <code>setup_time</code> <code>Timestamp</code> 16 <code>time_expiration_seconds</code> int64 17 <code>volume_current</code> double 18 <code>volume_initial</code> double 19 <code>account_login</code> int64 20 <code>order_type</code> <code>SUB_ENUM_ORDER_TYPE</code> 21 <code>order_type_filling</code> <code>SUB_ENUM_ORDER_TYPE_FILLING</code> 22 <code>order_reason</code> <code>SUB_ENUM_ORDER_REASON</code> 23 <code>position_id</code> int64 24 <code>position_by_id</code> int64"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradeorderstatechange","title":"<code>OnTradeOrderStateChange</code>","text":"# Field Type 1 <code>previous_order</code> <code>OnTradeOrderInfo</code> 2 <code>current_order</code> <code>OnTradeOrderInfo</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradehistoryorderinfo","title":"<code>OnTradeHistoryOrderInfo</code>","text":"# Field Type 1 <code>index</code> int32 2 <code>ticket</code> int64 3 <code>state</code> <code>SUB_ENUM_ORDER_STATE</code> 4 <code>setup_time</code> <code>Timestamp</code> 5 <code>done_time</code> <code>Timestamp</code> 6 <code>time_expiration</code> <code>Timestamp</code> 7 <code>position_id</code> uint64 8 <code>type_time</code> <code>SUB_ENUM_ORDER_TYPE_TIME</code> 9 <code>stop_loss</code> double 10 <code>take_profit</code> double 11 <code>stop_limit</code> double 12 <code>price_current</code> double 13 <code>price_open</code> double 14 <code>volume_current</code> double 15 <code>volume_initial</code> double 19 <code>magic</code> int64 20 <code>position_by</code> int64 21 <code>reason</code> <code>SUB_ENUM_ORDER_REASON</code> 22 <code>comment</code> string 23 <code>symbol</code> string 24 <code>time_expiration_seconds</code> int64 25 <code>account_login</code> int64 26 <code>order_type</code> <code>SUB_ENUM_ORDER_TYPE</code> 27 <code>order_type_filling</code> <code>SUB_ENUM_ORDER_TYPE_FILLING</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradehistoryorderupdate","title":"<code>OnTradeHistoryOrderUpdate</code>","text":"# Field Type 1 <code>previous_history_order</code> <code>OnTradeHistoryOrderInfo</code> 2 <code>current_history_order</code> <code>OnTradeHistoryOrderInfo</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradehistorydealinfo","title":"<code>OnTradeHistoryDealInfo</code>","text":"# Field Type 1 <code>index</code> int32 2 <code>ticket</code> uint64 3 <code>order_ticket</code> int64 4 <code>type</code> <code>SUB_ENUM_DEAL_TYPE</code> 5 <code>deal_time</code> <code>Timestamp</code> 6 <code>entry</code> <code>SUB_ENUM_DEAL_ENTRY</code> 7 <code>deal_position_id</code> int64 8 <code>commission</code> double 9 <code>fee</code> double 10 <code>price</code> double 11 <code>profit</code> double 12 <code>sl</code> double 13 <code>tp</code> double 14 <code>volume</code> double 15 <code>comment</code> string 16 <code>symbol</code> string 17 <code>swap</code> double 18 <code>reason</code> <code>SUB_ENUM_DEAL_REASON</code> 19 <code>magic</code> int64 20 <code>account_login</code> int64"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradehistorydealupdate","title":"<code>OnTradeHistoryDealUpdate</code>","text":"# Field Type 1 <code>previous_history_deal</code> <code>OnTradeHistoryDealInfo</code> 2 <code>current_history_deal</code> <code>OnTradeHistoryDealInfo</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradepositioninfo","title":"<code>OnTradePositionInfo</code>","text":"# Field Type 1 <code>index</code> int32 2 <code>ticket</code> int64 3 <code>type</code> <code>SUB_ENUM_POSITION_TYPE</code> 4 <code>position_time</code> <code>Timestamp</code> 5 <code>last_update_time</code> <code>Timestamp</code> 6 <code>price_open</code> double 7 <code>profit</code> double 8 <code>sl</code> double 9 <code>tp</code> double 10 <code>volume</code> double 11 <code>swap</code> double 12 <code>comment</code> string 13 <code>symbol</code> string 14 <code>magic</code> int64 15 <code>price_current</code> double 16 <code>account_login</code> int64 17 <code>reason</code> <code>SUB_ENUM_POSITION_REASON</code> 18 <code>from_pending_order</code> bool"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#ontradepositionupdate","title":"<code>OnTradePositionUpdate</code>","text":"# Field Type 1 <code>previous_position</code> <code>OnTradePositionInfo</code> 2 <code>current_position</code> <code>OnTradePositionInfo</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#enums","title":"Enums","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#mt5_sub_enum_event_group_type","title":"<code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code>","text":"Number Value 0 <code>OrderProfit</code> 1 <code>OrderUpdate</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_order_type","title":"<code>SUB_ENUM_ORDER_TYPE</code>","text":"Number Value 0 <code>SUB_ORDER_TYPE_BUY</code> 1 <code>SUB_ORDER_TYPE_SELL</code> 2 <code>SUB_ORDER_TYPE_BUY_LIMIT</code> 3 <code>SUB_ORDER_TYPE_SELL_LIMIT</code> 4 <code>SUB_ORDER_TYPE_BUY_STOP</code> 5 <code>SUB_ORDER_TYPE_SELL_STOP</code> 6 <code>SUB_ORDER_TYPE_BUY_STOP_LIMIT</code> 7 <code>SUB_ORDER_TYPE_SELL_STOP_LIMIT</code> 8 <code>SUB_ORDER_TYPE_CLOSE_BY</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_order_state","title":"<code>SUB_ENUM_ORDER_STATE</code>","text":"Number Value 0 <code>SUB_ORDER_STATE_STARTED</code> 1 <code>SUB_ORDER_STATE_PLACED</code> 2 <code>SUB_ORDER_STATE_CANCELED</code> 3 <code>SUB_ORDER_STATE_PARTIAL</code> 4 <code>SUB_ORDER_STATE_FILLED</code> 5 <code>SUB_ORDER_STATE_REJECTED</code> 6 <code>SUB_ORDER_STATE_EXPIRED</code> 7 <code>SUB_ORDER_STATE_REQUEST_ADD</code> 8 <code>SUB_ORDER_STATE_REQUEST_MODIFY</code> 9 <code>SUB_ORDER_STATE_REQUEST_CANCEL</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_order_type_filling","title":"<code>SUB_ENUM_ORDER_TYPE_FILLING</code>","text":"Number Value 0 <code>SUB_ORDER_FILLING_FOK</code> 1 <code>SUB_ORDER_FILLING_IOC</code> 2 <code>SUB_ORDER_FILLING_BOC</code> 3 <code>SUB_ORDER_FILLING_RETURN</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_order_type_time","title":"<code>SUB_ENUM_ORDER_TYPE_TIME</code>","text":"Number Value 0 <code>SUB_ORDER_TIME_GTC</code> 1 <code>SUB_ORDER_TIME_DAY</code> 2 <code>SUB_ORDER_TIME_SPECIFIED</code> 3 <code>SUB_ORDER_TIME_SPECIFIED_DAY</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_position_type","title":"<code>SUB_ENUM_POSITION_TYPE</code>","text":"Number Value 0 <code>SUB_POSITION_TYPE_BUY</code> 1 <code>SUB_POSITION_TYPE_SELL</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_position_reason","title":"<code>SUB_ENUM_POSITION_REASON</code>","text":"Number Value 0 <code>SUB_POSITION_REASON_CLIENT</code> 2 <code>SUB_POSITION_REASON_MOBILE</code> 3 <code>SUB_POSITION_REASON_WEB</code> 4 <code>SUB_POSITION_REASON_EXPERT</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_deal_type","title":"<code>SUB_ENUM_DEAL_TYPE</code>","text":"Number Value 0 <code>SUB_DEAL_TYPE_BUY</code> 1 <code>SUB_DEAL_TYPE_SELL</code> 2 <code>SUB_DEAL_TYPE_BALANCE</code> 3 <code>SUB_DEAL_TYPE_CREDIT</code> 4 <code>SUB_DEAL_TYPE_CHARGE</code> 5 <code>SUB_DEAL_TYPE_CORRECTION</code> 6 <code>SUB_DEAL_TYPE_BONUS</code> 7 <code>SUB_DEAL_TYPE_COMMISSION</code> 8 <code>SUB_DEAL_TYPE_COMMISSION_DAILY</code> 9 <code>SUB_DEAL_TYPE_COMMISSION_MONTHLY</code> 10 <code>SUB_DEAL_TYPE_COMMISSION_AGENT_DAILY</code> 11 <code>SUB_DEAL_TYPE_COMMISSION_AGENT_MONTHLY</code> 12 <code>SUB_DEAL_TYPE_INTEREST</code> 13 <code>SUB_DEAL_TYPE_BUY_CANCELED</code> 14 <code>SUB_DEAL_TYPE_SELL_CANCELED</code> 15 <code>SUB_DEAL_TYPE_DIVIDEND</code> 16 <code>SUB_DEAL_TYPE_DIVIDEND_FRANKED</code> 17 <code>SUB_DEAL_TYPE_TAX</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_deal_entry","title":"<code>SUB_ENUM_DEAL_ENTRY</code>","text":"Number Value 0 <code>SUB_DEAL_ENTRY_IN</code> 1 <code>SUB_DEAL_ENTRY_OUT</code> 2 <code>SUB_DEAL_ENTRY_INOUT</code> 3 <code>SUB_DEAL_ENTRY_OUT_BY</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#sub_enum_deal_reason","title":"<code>SUB_ENUM_DEAL_REASON</code>","text":"Number Value 0 <code>SUB_DEAL_REASON_CLIENT</code> 1 <code>SUB_DEAL_REASON_MOBILE</code> 2 <code>SUB_DEAL_REASON_WEB</code> 3 <code>SUB_DEAL_REASON_EXPERT</code> 4 <code>SUB_DEAL_REASON_SL</code> 5 <code>SUB_DEAL_REASON_TP</code> 6 <code>SUB_DEAL_REASON_SO</code> 7 <code>SUB_DEAL_REASON_ROLLOVER</code> 8 <code>SUB_DEAL_REASON_VMARGIN</code> 9 <code>SUB_DEAL_REASON_SPLIT</code> 10 <code>SUB_DEAL_REASON_CORPORATE_ACTION</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Keep orders/positions and account equity synchronized in real time.</li> <li>Drive UI badges &amp; logs: new orders, fills, closes, cancels, SL/TP hits.</li> <li>Trigger strategy reactions on state changes without extra polling.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use IDs (<code>ticket</code>, <code>position_id</code>) as primary keys for diff/merge in your state store.</li> <li>Lists are additive per event \u2014 process each group independently.</li> <li>Combine with <code>OpenedOrders</code> for a cold start snapshot, then switch to this stream.</li> </ul> <p>See also: opened_orders.md, order_history.md, on_trade_transaction.md</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#1-build-an-event-counter","title":"1) Build an event counter","text":"<pre><code>stats = {\"orders\":0, \"deals\":0, \"positions\":0}\nasync for ev in acct.on_trade():\n    d = ev.event_data\n    stats[\"orders\"] += len(d.new_orders) + len(d.state_changed_orders) + len(d.disappeared_orders)\n    stats[\"deals\"] += len(d.new_history_deals) + len(d.updated_history_deals) + len(d.disappeared_history_deals)\n    stats[\"positions\"] += len(d.new_positions) + len(d.updated_positions) + len(d.disappeared_positions)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#2-react-on-filled-orders-only","title":"2) React on filled orders only","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_subscriptions_pb2 as sub_pb2\n\nasync for ev in acct.on_trade():\n    for ch in ev.event_data.state_changed_orders:\n        if ch.current_order.state == sub_pb2.SUB_ENUM_ORDER_STATE.SUB_ORDER_STATE_FILLED:\n            print(\"filled:\", ch.current_order.ticket)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade/#3-watch-equity-drift-while-streaming","title":"3) Watch equity drift while streaming","text":"<pre><code>async for ev in acct.on_trade():\n    print(\"Equity:\", ev.account_info.equity)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/","title":"\u2705 On Trade Transaction","text":"<p>Request: subscribe to raw trade transactions (like MQL5 <code>OnTradeTransaction</code>): each event carries the transaction, the original request, and the result returned by the trade server.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>on_trade_transaction(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2.py</code> \u2014 <code>OnTradeTransaction*</code> messages and payloads; enums used here</li> <li><code>MetaRpcMT5/mt5_term_api_subscriptions_pb2_grpc.py</code> \u2014 service stub <code>SubscriptionServiceStub</code></li> <li><code>MetaRpcMT5/mrpc_mt5_error_pb2.py</code> \u2014 <code>MqlErrorTradeCode</code> (for <code>trade_return_code</code>)</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.SubscriptionService</code></li> <li>Method: <code>OnTradeTransaction(OnTradeTransactionRequest) \u2192 stream OnTradeTransactionReply</code></li> <li>Low-level client: <code>SubscriptionServiceStub.OnTradeTransaction(request, metadata, timeout)</code> (server\u2011streaming iterator)</li> <li>SDK wrapper: <code>MT5Account.on_trade_transaction(cancellation_event=None) \u2192 async stream of OnTradeTransactionData</code></li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal: print transaction type and ids\nfrom MetaRpcMT5 import mt5_term_api_subscriptions_pb2 as sub_pb2\n\nasync for ev in acct.on_trade_transaction():\n    tr = ev.trade_transaction\n    print(tr.type, tr.order_ticket, tr.deal_ticket)\n</code></pre> <pre><code># Cooperative cancellation after the first DEAL\u2011ADD\nfrom MetaRpcMT5 import mt5_term_api_subscriptions_pb2 as sub_pb2\nimport asyncio\n\ncancel = asyncio.Event()\nasync for ev in acct.on_trade_transaction(cancellation_event=cancel):\n    tr = ev.trade_transaction\n    if tr.type == sub_pb2.SUB_ENUM_TRADE_TRANSACTION_TYPE.TRADE_TRANSACTION_DEAL_ADD:\n        print(\"deal added:\", tr.deal_ticket, \"price:\", tr.price)\n        cancel.set()\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#method-signature","title":"Method Signature","text":"<pre><code>async def on_trade_transaction(\n    self,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; subscription_client.OnTradeTransaction  # async iterable of OnTradeTransactionData\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. A low\u2011level event stream: every trade server transaction as it happens \u2014 order add/update/delete, deal add, history add/update/delete, etc.</li> <li>Why. Perfect for accurate audit logs, reconciliation, and state machines that need request+result context per change.</li> <li> <p>Be careful.</p> </li> <li> <p>Stream is infinite until canceled via <code>cancellation_event</code>.</p> </li> <li>Timestamps are UTC; many structs have both <code>time</code> (Timestamp) and <code>time_msc</code> (ms since epoch).</li> <li>Some transactions include only ids (e.g., order delete) \u2014 don\u2019t assume full bodies are always present.</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>cancellation_event</code> `asyncio.Event None` Cooperative stop for the streaming RPC. <p>Request message: <code>OnTradeTransactionRequest {}</code></p>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#stream-payload-ontradetransactiondata","title":"Stream payload: <code>OnTradeTransactionData</code>","text":"Field Proto Type Description <code>type</code> <code>MT5_SUB_ENUM_EVENT_GROUP_TYPE</code> Event group marker. <code>trade_transaction</code> <code>MqlTradeTransaction</code> The actual transaction (type + ids + ctx). <code>trade_request</code> <code>MqlTradeRequest</code> The request that triggered it. <code>trade_result</code> <code>MqlTradeResult</code> Server result/retcode for the request. <code>terminal_instance_guid_id</code> <code>string</code> Source terminal GUID. <code>account_info</code> <code>OnEventAccountInfo</code> Balance/Equity/Margins snapshot."},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#oneventaccountinfo","title":"<code>OnEventAccountInfo</code>","text":"# Field Type 1 <code>balance</code> double 2 <code>credit</code> double 3 <code>equity</code> double 4 <code>margin</code> double 5 <code>free_margin</code> double 6 <code>profit</code> double 7 <code>margin_level</code> double 8 <code>login</code> int64"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#mqltradetransaction","title":"<code>MqlTradeTransaction</code>","text":"# Field Type 1 <code>deal_ticket</code> <code>uint64</code> 2 <code>order_ticket</code> <code>uint64</code> 3 <code>symbol</code> <code>string</code> 4 <code>type</code> <code>SUB_ENUM_TRADE_TRANSACTION_TYPE</code> 5 <code>order_type</code> <code>SUB_ENUM_ORDER_TYPE</code> 6 <code>order_state</code> <code>SUB_ENUM_ORDER_STATE</code> 7 <code>deal_type</code> <code>SUB_ENUM_DEAL_TYPE</code> 8 <code>order_time_type</code> <code>SUB_ENUM_ORDER_TYPE_TIME</code> 9 <code>order_expiration_time</code> <code>google.protobuf.Timestamp</code> 10 <code>price</code> <code>double</code> 11 <code>price_trigger_stop_limit</code> <code>double</code> 12 <code>price_stop_loss</code> <code>double</code> 13 <code>price_take_profit</code> <code>double</code> 14 <code>volume</code> <code>double</code> 15 <code>position_ticket</code> <code>uint64</code> 16 <code>position_by_opposite_position</code> <code>uint64</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#mqltraderequest","title":"<code>MqlTradeRequest</code>","text":"# Field Type 1 <code>trade_operation_type</code> <code>SUB_ENUM_TRADE_REQUEST_ACTIONS</code> 2 <code>magic</code> <code>uint64</code> 3 <code>order_ticket</code> <code>uint64</code> 4 <code>symbol</code> <code>string</code> 5 <code>requested_deal_volume_lots</code> <code>double</code> 6 <code>price</code> <code>double</code> 7 <code>stoplimit</code> <code>double</code> 8 <code>sl</code> <code>double</code> 9 <code>tp</code> <code>double</code> 10 <code>deviation</code> <code>uint32</code> 11 <code>order_type</code> <code>SUB_ENUM_ORDER_TYPE</code> 12 <code>order_type_filling</code> <code>SUB_ENUM_ORDER_TYPE_FILLING</code> 13 <code>type_time</code> <code>SUB_ENUM_ORDER_TYPE_TIME</code> 14 <code>order_expiration_time</code> <code>google.protobuf.Timestamp</code> 15 <code>order_comment</code> <code>string</code> 16 <code>position_ticket</code> <code>uint64</code> 17 <code>position_by_opposite_position</code> <code>uint64</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#mqltraderesult","title":"<code>MqlTradeResult</code>","text":"# Field Type 1 <code>trade_return_int_code</code> <code>uint32</code> 2 <code>trade_return_code</code> <code>MqlErrorTradeCode</code> 3 <code>deal_ticket</code> <code>uint64</code> 4 <code>order_ticket</code> <code>uint64</code> 5 <code>deal_volume</code> <code>double</code> 6 <code>deal_price</code> <code>double</code> 7 <code>current_bid</code> <code>double</code> 8 <code>current_ask</code> <code>double</code> 9 <code>broker_comment_to_operation</code> <code>string</code> 10 <code>terminal_dispatch_request_id</code> <code>uint32</code> 11 <code>return_code_external</code> <code>int32</code>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#enums","title":"Enums","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#sub_enum_trade_transaction_type","title":"<code>SUB_ENUM_TRADE_TRANSACTION_TYPE</code>","text":"Number Value Meaning 0 <code>TRADE_TRANSACTION_ORDER_ADD</code> Order placed/appeared. 1 <code>TRADE_TRANSACTION_ORDER_UPDATE</code> Order parameters changed. 2 <code>TRADE_TRANSACTION_ORDER_DELETE</code> Order removed. 3 <code>TRADE_TRANSACTION_DEAL_ADD</code> Deal executed/added. 4 <code>TRADE_TRANSACTION_HISTORY_ADD</code> History record added. 5 <code>TRADE_TRANSACTION_HISTORY_UPDATE</code> History record updated. 6 <code>TRADE_TRANSACTION_HISTORY_DELETE</code> History record deleted."},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Build accurate audit logs and state machines that rely on transaction granularity.</li> <li>Associate request \u2192 result for every server action to diagnose rejections or partial fills.</li> <li>Trigger alerts on specific transaction types (e.g., <code>DEAL_ADD</code>, <code>ORDER_DELETE</code>).</li> </ul>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Transaction stream is verbose; keep handlers non\u2011blocking (fan\u2011out to queues/executors).</li> <li>Use ids (<code>order_ticket</code>, <code>deal_ticket</code>, <code>position_ticket</code>) as keys; avoid accidental dedupe.</li> <li>Pair with <code>on_trade</code> for high\u2011level deltas and <code>OpenedOrders</code> for cold\u2011start snapshot.</li> </ul> <p>See also: on_trade.md, order_send.md, order_modify.md</p>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#1-log-every-deal_add-with-concise-info","title":"1) Log every DEAL_ADD with concise info","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_subscriptions_pb2 as sub_pb2\n\nasync for ev in acct.on_trade_transaction():\n    tr = ev.trade_transaction\n    if tr.type == sub_pb2.SUB_ENUM_TRADE_TRANSACTION_TYPE.TRADE_TRANSACTION_DEAL_ADD:\n        print(f\"deal={tr.deal_ticket} {tr.symbol} vol={tr.volume} price={tr.price}\")\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#2-correlate-request-result-for-diagnostics","title":"2) Correlate request \u2192 result for diagnostics","text":"<pre><code>async for ev in acct.on_trade_transaction():\n    rq, rs = ev.trade_request, ev.trade_result\n    print(\"ret:\", rs.trade_return_int_code, rs.trade_return_code, \"order:\", rq.order_ticket, rq.order_type)\n</code></pre>"},{"location":"MT5Account/Subscriptions_Streaming/on_trade_transaction/#3-watch-for-deletes-only","title":"3) Watch for deletes only","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_subscriptions_pb2 as sub_pb2\n\nasync for ev in acct.on_trade_transaction():\n    if ev.trade_transaction.type == sub_pb2.SUB_ENUM_TRADE_TRANSACTION_TYPE.TRADE_TRANSACTION_ORDER_DELETE:\n        print(\"order removed:\", ev.trade_transaction.order_ticket)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/","title":"MT5Account \u00b7 Symbols and Market \u2014 Overview","text":"<p>Quick map of symbols, sessions, and market\u2011book APIs. Use this page to pick the right call fast. Links jump to detailed specs.</p>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/#what-lives-here","title":"\ud83d\udcc1 What lives here","text":"<ul> <li>symbols_total \u2014 count of all symbols vs Market Watch only.</li> <li>symbol_name \u2014 resolve symbol name by index (all vs selected list).</li> <li>symbol_exist \u2014 does a symbol exist? Is it custom?</li> <li>symbol_select \u2014 add/remove a symbol to/from Market Watch.</li> <li>symbol_is_synchronized \u2014 is the symbol synced in terminal.</li> <li>symbol_info_tick \u2014 latest tick (Bid/Ask/Last, volumes, time, flags).</li> <li>symbol_info_double \u2014 one double prop (enum: <code>SymbolInfoDoubleProperty</code>).</li> <li>symbol_info_integer \u2014 one integer prop (enum: <code>SymbolInfoIntegerProperty</code>).</li> <li>symbol_info_string \u2014 one string prop (enum: <code>SymbolInfoStringProperty</code>).</li> <li>symbol_info_margin_rate \u2014 margin rates by order type (enum: <code>BMT5_ENUM_ORDER_TYPE</code>).</li> <li>symbol_info_session_quote \u2014 quote session window (enum: <code>DayOfWeek</code>).</li> <li>symbol_info_session_trade \u2014 trading session window (enum: <code>DayOfWeek</code>).</li> <li>symbol_params_many \u2014 paged directory of symbol parameters (enum: <code>AH_SYMBOL_PARAMS_SORT_TYPE</code>).</li> <li>tick_value_with_size \u2014 batch tick value/size/contract per symbol.</li> <li>market_book_add \u2014 subscribe to Level II (DOM) for a symbol.</li> <li>market_book_get \u2014 fetch DOM snapshot (bids/asks ladder).</li> <li>market_book_release \u2014 unsubscribe from Level II (DOM).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/#plain-english","title":"\ud83e\udded Plain English","text":"<ul> <li>symbols_total \u2192 the headcount of symbols (all vs Market Watch).</li> <li>symbol_name \u2192 walk lists by index without fetching everything.</li> <li>symbol_exist / symbol_is_synchronized / symbol_select \u2192 the sanity trio: existence, readiness, and watch\u2011list toggle.</li> <li>symbol_info_ (double/integer/string)* \u2192 one property** on demand; cheap and precise.</li> <li>symbol_info_tick \u2192 your now price snapshot with age/flags.</li> <li>symbol_info_session_quote/trade \u2192 when quotes/trading are allowed per weekday &amp; session.</li> <li>symbol_params_many \u2192 paged catalog to build tables and validators.</li> <li>tick_value_with_size \u2192 bulk tick economics (tick value/size/contract).</li> <li>market_book_add/get/release \u2192 Level II lifecycle: subscribe \u2192 read \u2192 release.</li> </ul> <p>Rule of thumb: need just one field \u2192 <code>symbol_info_*</code>. Need many rows \u2192 <code>symbol_params_many</code> or <code>tick_value_with_size</code>. Need depth \u2192 <code>market_book_*</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/#quick-choose","title":"Quick choose","text":"If you need\u2026 Use Returns Key inputs (enums) Count symbols <code>symbols_total</code> <code>SymbolsTotalData { total }</code> <code>selected_only: bool</code> Resolve name by index <code>symbol_name</code> <code>SymbolNameData { name }</code> <code>index: int</code>, <code>selected: bool</code> Check symbol existence / custom <code>symbol_exist</code> <code>SymbolExistData</code> <code>symbol: str</code> Ensure Market Watch membership <code>symbol_select</code> <code>SymbolSelectData</code> <code>symbol: str</code>, <code>select: bool</code> Check sync state <code>symbol_is_synchronized</code> <code>SymbolIsSynchronizedData</code> <code>symbol: str</code> Latest tick snapshot <code>symbol_info_tick</code> <code>SymbolInfoTickData</code> <code>symbol: str</code> One double property (e.g., BID, POINT) <code>symbol_info_double</code> <code>SymbolInfoDoubleData { value }</code> <code>property: SymbolInfoDoubleProperty</code> One integer property (e.g., DIGITS) <code>symbol_info_integer</code> <code>SymbolInfoIntegerData { value }</code> <code>property: SymbolInfoIntegerProperty</code> One string property (e.g., DESCRIPTION) <code>symbol_info_string</code> <code>SymbolInfoStringData { value }</code> <code>property: SymbolInfoStringProperty</code> Margin rates by order type <code>symbol_info_margin_rate</code> <code>SymbolInfoMarginRat</code> <code>order_type: BMT5_ENUM_ORDER_TYPE</code> Quote session window <code>symbol_info_session_quote</code> <code>SymbolInfoSessionQuoteData</code> <code>day_of_week: DayOfWeek</code>, <code>session_index: uint32</code> Trading session window <code>symbol_info_session_trade</code> <code>SymbolInfoSessionTradeData</code> <code>day_of_week: DayOfWeek</code>, <code>session_index: uint32</code> Paged symbol parameters <code>symbol_params_many</code> <code>SymbolParamsManyData</code> <code>sort_type: AH_SYMBOL_PARAMS_SORT_TYPE</code>, paging Bulk tick value/size/contract <code>tick_value_with_size</code> <code>TickValueWithSizeData</code> <code>symbols: list[str]</code> Subscribe to Level II <code>market_book_add</code> <code>MarketBookAddData</code> <code>symbol: str</code> Snapshot Level II <code>market_book_get</code> <code>MarketBookGetData</code> <code>symbol: str</code> Unsubscribe Level II <code>market_book_release</code> <code>MarketBookReleaseData</code> <code>symbol: str</code>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/#crossrefs-gotchas","title":"\u274c Cross\u2011refs &amp; gotchas","text":"<ul> <li>Select &amp; sync before data: <code>symbol_select</code> + <code>symbol_is_synchronized</code> help avoid empty ticks/books.</li> <li>UTC timestamps everywhere (including session windows). Convert once.</li> <li>Server\u2011side enums control behavior: always pass the correct enum for <code>symbol_info_*</code> and sessions.</li> <li>Market book depth varies by broker/symbol; arrays may be short or empty.</li> <li>Batch wisely: <code>tick_value_with_size</code> and <code>symbol_params_many</code> reduce RPC chatter for tables.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/SymbolsandMarket_Overview/#minimal-snippets","title":"\ud83d\udfe2 Minimal snippets","text":"<pre><code># Ensure selected &amp; synced, then get a fresh tick\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\ns = \"EURUSD\"\nif not (await acct.symbol_is_synchronized(s)).is_synchronized:\n    await acct.symbol_select(s, True)\n    _ = await acct.symbol_is_synchronized(s)\nprint((await acct.symbol_info_tick(s)).Bid)\n</code></pre> <pre><code># One property (double) \u2014 POINT\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\npt = await acct.symbol_info_double(\"XAUUSD\", mi_pb2.SymbolInfoDoubleProperty.SYMBOL_POINT)\nprint(pt.value)\n</code></pre> <pre><code># DOM: subscribe \u2192 get \u2192 release\nawait acct.market_book_add(\"BTCUSD\")\nbook = await acct.market_book_get(\"BTCUSD\")\nawait acct.market_book_release(\"BTCUSD\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/","title":"\u2705 Market Book Add","text":"<p>Request: subscribe the terminal to Level II (Market Book) updates for a symbol.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>market_book_add(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>MarketBookAdd*</code> messages (<code>MarketBookAddRequest</code>, <code>MarketBookAddReply</code>, <code>MarketBookAddData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>MarketBookAdd(MarketBookAddRequest) \u2192 MarketBookAddReply</code></li> <li>Low-level client: <code>MarketInfoStub.MarketBookAdd(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.market_book_add(symbol, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Subscribe to DOM (order book) updates for a symbol\nok = await acct.market_book_add(\"EURUSD\")\nprint(ok.subscribed)  # True if subscription is active\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#method-signature","title":"Method Signature","text":"<pre><code>async def market_book_add(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.MarketBookAddData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Turns on order book streaming for a symbol in the terminal.</li> <li>Why you care. Required before calling <code>market_book_get(...)</code> or listening to DOM updates in your app.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Not every symbol/broker exposes a book \u2192 subscription may return false.</p> </li> <li>The symbol should be selected &amp; synchronized to ensure updates arrive.</li> <li>Remember to release the subscription with <code>market_book_release(symbol)</code> when done.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>MarketBookAddRequest { symbol: string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_add/#payload-marketbookadddata","title":"Payload: <code>MarketBookAddData</code>","text":"Field Proto Type Description <code>subscribed</code> <code>bool</code> <code>True</code> if the book subscription is active. <p>Wire reply: <code>MarketBookAddReply { data: MarketBookAddData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enable DOM/Level II order book features in UI/analytics.</li> <li>Prepare before reading the book via <code>market_book_get(...)</code>.</li> <li>Control resource usage by subscribing only to required symbols.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Idempotent in practice: calling <code>market_book_add</code> on an already subscribed symbol keeps <code>subscribed=True</code>.</li> <li>Pair with <code>market_book_release(symbol)</code> to avoid leaking subscriptions.</li> <li>If <code>subscribed=False</code>, verify <code>symbol_exist</code>, <code>symbol_select(True)</code>, and permissions for Level II.</li> </ul> <p>See also: market_book_get.md, market_book_release.md, symbol_info_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_add/#1-subscribe-then-fetch-the-book","title":"1) Subscribe then fetch the book","text":"<pre><code>ok = await acct.market_book_add(\"XAUUSD\")\nif ok.subscribed:\n    book = await acct.market_book_get(\"XAUUSD\")  # separate RPC\n    for row in book.Bids + book.Asks:\n        print(row.Price, row.Volume)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#2-ensure-symbol-is-ready-first","title":"2) Ensure symbol is ready first","text":"<pre><code>s = \"BTCUSD\"\nif not (await acct.symbol_is_synchronized(s)).is_synchronized:\n    await acct.symbol_select(s, True)\n    _ = await acct.symbol_is_synchronized(s)\nprint((await acct.market_book_add(s)).subscribed)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_add/#3-with-deadline-cancel","title":"3) With deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.market_book_add(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.subscribed)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/","title":"\u2705 Market Book Get","text":"<p>Request: fetch a snapshot of the Level II order book (bids/asks ladder) for a symbol.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>market_book_get(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>MarketBookGet*</code> messages (<code>MarketBookGetRequest</code>, <code>MarketBookGetReply</code>, <code>MarketBookGetData</code>, <code>MrpcMqlBookInfo</code>, enum <code>BookType</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>MarketBookGet(MarketBookGetRequest) \u2192 MarketBookGetReply</code></li> <li>Low-level client: <code>MarketInfoStub.MarketBookGet(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.market_book_get(symbol, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Fetch DOM snapshot and print top-of-book using mql_book_infos\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nbook = await acct.market_book_get(\"EURUSD\")\nrows = list(getattr(book, \"mql_book_infos\", []))\n\n# Split by side (limit levels)\nbids = [r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_BUY]\nasks = [r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_SELL]\n\n# Sort: bids desc, asks asc\nbids.sort(key=lambda r: float(r.price), reverse=True)\nasks.sort(key=lambda r: float(r.price))\n\nif bids and asks:\n    best_bid, best_ask = bids[0], asks[0]\n    spread = float(best_ask.price) - float(best_bid.price)\n    print(best_bid.price, best_ask.price, spread)\nelse:\n    print(\"Empty book (no depth for this symbol/broker).\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#method-signature","title":"Method Signature","text":"<pre><code>async def market_book_get(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.MarketBookGetData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A one-shot depth snapshot: aggregated price/volume levels tagged as BID/ASK (and optional <code>*_MARKET</code>).</li> <li>Why you care. Power depth widgets, slippage models, and liquidity checks before order placement.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Some brokers expose limited depth (e.g., 5 levels) or none \u2192 the list can be empty.</p> </li> <li>Calling <code>market_book_add(symbol)</code> enables streaming; snapshots can work without it but won\u2019t auto\u2011update.</li> <li>Price order convention: BIDs descending, ASKs ascending; sort client\u2011side as needed.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>MarketBookGetRequest { symbol: string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_get/#payload-marketbookgetdata","title":"Payload: <code>MarketBookGetData</code>","text":"Field Proto Type Description <code>mql_book_infos[]</code> <code>MrpcMqlBookInfo</code> Unified list of depth levels."},{"location":"MT5Account/Symbols_and_Market/market_book_get/#mrpcmqlbookinfo","title":"<code>MrpcMqlBookInfo</code>","text":"Field Proto Type Description <code>type</code> <code>BookType</code> Side/type: <code>BOOK_TYPE_BUY</code> (= BID), <code>BOOK_TYPE_SELL</code> (= ASK), plus <code>*_MARKET</code>. <code>price</code> <code>double</code> Price for this level. <code>volume</code> <code>int64</code> Size/volume at this price level (integer). <code>volume_real</code> <code>double</code> Real volume (if provided by the broker; otherwise 0). <p>Wire reply: <code>MarketBookGetReply { data: MarketBookGetData, error: Error? }</code> \u2014 SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Render a DOM view and compute top\u2011of\u2011book spread.</li> <li>Feed execution logic (iceberg detection, slippage estimates, partial fill planning).</li> <li>Monitor liquidity changes for alerts.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pair with <code>market_book_add</code> and <code>market_book_release</code> to manage subscription lifecycle.</li> <li>If you need to treat market prints separately, filter <code>BOOK_TYPE_*_MARKET</code> types into distinct lists.</li> </ul> <p>See also: MarketBookAdd \u00b7 MarketBookRelease \u00b7 SymbolSelect \u00b7 SymbolExist</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_get/#1-render-a-compact-depth-table","title":"1) Render a compact depth table","text":"<pre><code>book = await acct.market_book_get(\"XAUUSD\")\nrows = list(getattr(book, \"mql_book_infos\", []))\n\nbids = sorted((r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_BUY), key=lambda r: r.price, reverse=True)\nasks = sorted((r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_SELL), key=lambda r: r.price)\n\nprint(\"BID       VOL   |   ASK       VOL\")\nfor i in range(max(len(bids), len(asks))):\n    b = bids[i] if i &lt; len(bids) else None\n    a = asks[i] if i &lt; len(asks) else None\n    print(f\"{getattr(b,'price',None):&gt;8} {getattr(b,'volume',None):&gt;6} | {getattr(a,'price',None):&gt;8} {getattr(a,'volume',None):&gt;6}\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#2-with-deadline-cancel","title":"2) With deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ncancel_event = asyncio.Event()\nres = await acct.market_book_get(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nrows = list(getattr(res, \"mql_book_infos\", []))\nprint(len(rows))\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_get/#3-compute-vwap-of-top-n-bidsasks","title":"3) Compute VWAP of top N bids/asks","text":"<pre><code>N = 5\nbook = await acct.market_book_get(\"BTCUSD\")\nrows = list(getattr(book, \"mql_book_infos\", []))\n\nbids = sorted((r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_BUY), key=lambda r: r.price, reverse=True)[:N]\nasks = sorted((r for r in rows if r.type == mi_pb2.BookType.BOOK_TYPE_SELL), key=lambda r: r.price)[:N]\n\ndef vwap(rs):\n    vol = sum(r.volume for r in rs)\n    return sum(r.price * r.volume for r in rs) / vol if vol else None\n\nprint(\"vwap bid:\", vwap(bids))\nprint(\"vwap ask:\", vwap(asks))\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/","title":"\u2705 Market Book Release","text":"<p>Request: unsubscribe the terminal from Level II (Market Book) updates for a symbol (stop DOM streaming).</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>market_book_release(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>MarketBookRelease*</code> messages (<code>MarketBookReleaseRequest</code>, <code>MarketBookReleaseReply</code>, <code>MarketBookReleaseData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>MarketBookRelease(MarketBookReleaseRequest) \u2192 MarketBookReleaseReply</code></li> <li>Low-level client: <code>MarketInfoStub.MarketBookRelease(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.market_book_release(symbol, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Unsubscribe from DOM (order book) updates for a symbol\nres = await acct.market_book_release(\"EURUSD\")\nprint(res.closed_successfully)  # True if DOM subscription was closed\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#method-signature","title":"Method Signature","text":"<pre><code>async def market_book_release(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.MarketBookReleaseData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Turns off the order book stream for a symbol.</li> <li>Why you care. Frees terminal/network resources and stops unnecessary updates when a DOM panel is closed.</li> <li> <p>Mind the traps.</p> </li> <li> <p>If there was no active subscription, brokers may return <code>closed_successfully=False</code>.</p> </li> <li>Always pair adds/releases to avoid leaking long\u2011lived subscriptions in your app.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>MarketBookReleaseRequest { symbol: string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_release/#payload-marketbookreleasedata","title":"Payload: <code>MarketBookReleaseData</code>","text":"Field Proto Type Description <code>closed_successfully</code> <code>bool</code> <code>True</code> if the DOM subscription was closed. <p>Wire reply: <code>MarketBookReleaseReply { data: MarketBookReleaseData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Disable DOM/Level II streaming when it\u2019s no longer needed.</li> <li>Keep resource usage in check on terminals and networks.</li> <li>Clean up before disconnecting or switching workspaces.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use with <code>market_book_add(symbol)</code> to manage lifecycle of subscriptions.</li> </ul> <p>See also: market_book_add.md, market_book_get.md</p>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/market_book_release/#1-safe-cleanup-on-panel-close","title":"1) Safe cleanup on panel close","text":"<pre><code># English-only comments per project style\ns = \"XAUUSD\"\nres = await acct.market_book_release(s)\nif not res.closed_successfully:\n    print(\"No active DOM subscription to close\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#2-add-get-release-flow","title":"2) Add \u2192 Get \u2192 Release flow","text":"<pre><code>ok = await acct.market_book_add(\"BTCUSD\")\nbook = await acct.market_book_get(\"BTCUSD\")\n_ = await acct.market_book_release(\"BTCUSD\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/market_book_release/#3-with-deadline-cancel","title":"3) With deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.market_book_release(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.closed_successfully)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/","title":"\u2705 Symbol Exist","text":"<p>Request: check whether a symbol exists on the server (either standard or custom) and whether it\u2019s a custom one.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_exist(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolExist*</code> messages (<code>SymbolExistRequest</code>, <code>SymbolExistReply</code>, <code>SymbolExistData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolExist(SymbolExistRequest) \u2192 SymbolExistReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolExist(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_exist(symbol, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Check if symbol exists and whether it is custom\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ninfo = await acct.symbol_exist(\"EURUSD\")\nprint(info.exists, info.is_custom)  # e.g., True False\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_exist(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolExistData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Returns a tiny struct telling you if the symbol exists and whether it\u2019s a custom symbol.</li> <li>Why you care. Gate user input, avoid 404\u2011style flows before heavier RPCs (quotes, specs, orders).</li> <li> <p>Mind the traps.</p> </li> <li> <p>Request field is <code>name</code> (string) \u2192 pass the exact symbol name.</p> </li> <li>The reply\u2019s <code>.data</code> is unwrapped by the SDK wrapper; you receive <code>SymbolExistData</code> directly.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name to check (maps to <code>name</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper."},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#payload-symbolexistdata","title":"Payload: <code>SymbolExistData</code>","text":"Field Proto Type Description <code>exists</code> <code>bool</code> <code>True</code> if the symbol exists. <code>is_custom</code> <code>bool</code> <code>True</code> if the symbol is a custom symbol."},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Validate user input before deeper calls (quotes/specs/orders).</li> <li>Drive UI hints (e.g., badge custom symbols).</li> <li>Health checks in batch symbol import pipelines.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Combine with <code>symbols_total(...)</code> and <code>symbol_name(...)</code> to page through and validate symbol lists.</li> <li>If <code>exists=False</code>, skip any downstream price/spec requests to avoid server noise.</li> </ul> <p>See also: symbols_total.md, symbol_name.md, symbol_select.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#1-single-symbol-guard-before-heavy-calls","title":"1) Single symbol \u2014 guard before heavy calls","text":"<pre><code># English-only comments per project style\ncheck = await acct.symbol_exist(\"BTCUSD\")\nif not check.exists:\n    raise ValueError(\"Symbol is not available on this server\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#2-batch-validate-a-list","title":"2) Batch validate a list","text":"<pre><code>symbols = [\"EURUSD\", \"GBPUSD\", \"FOOBAR\"]\nresults = {s: (await acct.symbol_exist(s)).exists for s in symbols}\nprint(results)  # {'EURUSD': True, 'GBPUSD': True, 'FOOBAR': False}\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_exist/#3-ui-hint-mark-custom-symbols","title":"3) UI hint \u2014 mark custom symbols","text":"<pre><code>s = \"SYNTH_X\"\ninfo = await acct.symbol_exist(s)\nlabel = \"(custom)\" if info.is_custom else \"\"\nprint(f\"{s} {label}\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/","title":"\u2705 Symbol Info Double","text":"<p>Request: get a double property of a symbol (e.g., BID, ASK, POINT, TICK_VALUE) via a single RPC.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_double(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoDouble*</code> messages (<code>SymbolInfoDoubleRequest</code>, <code>SymbolInfoDoubleReply</code>, <code>SymbolInfoDoubleData</code>) and enum <code>SymbolInfoDoubleProperty</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoDouble(SymbolInfoDoubleRequest) \u2192 SymbolInfoDoubleReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoDouble(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_double(symbol, property, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get current Bid price as double\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nval = await acct.symbol_info_double(\n    \"EURUSD\",\n    mi_pb2.SymbolInfoDoubleProperty.SYMBOL_BID,\n)\nprint(val.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_double(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoDoubleProperty,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoDoubleData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Direct read of a double field for a symbol.</li> <li>Why you care. Cheap, precise, and avoids fetching large structs when you need a single numeric attribute.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Pass the exact symbol name in <code>symbol</code>.</p> </li> <li>Choose the correct enum in <code>property</code> from <code>SymbolInfoDoubleProperty</code> (see list below).</li> <li>Non\u2011applicable properties may return 0.0.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>property</code> <code>SymbolInfoDoubleProperty</code> (required) Which double property to retrieve (see enum). <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoDoubleRequest { symbol: string, type: SymbolInfoDoubleProperty }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#payload-symbolinfodoubledata","title":"Payload: <code>SymbolInfoDoubleData</code>","text":"Field Proto Type Description <code>value</code> <code>double</code> The numeric value for the property. <p>Wire reply: <code>SymbolInfoDoubleReply { data: SymbolInfoDoubleData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pull specific prices/params (BID/ASK/POINT/TICK metrics) for calculators and UI.</li> <li>Quick validations and health checks without heavy payloads.</li> <li>Compose with other calls for dashboards.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Prefer batching via your app logic when you need many symbols: loop over names and store results.</li> <li>For tick economics across many symbols, consider <code>tick_value_with_size(...)</code>.</li> <li>Pair with <code>symbol_is_synchronized(...)</code> to avoid stale/empty values.</li> </ul> <p>--</p> <p>See also: symbol_info_integer.md, symbol_info_string.md, symbol_info_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#1-get-point-size","title":"1) Get point size","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\npt = await acct.symbol_info_double(\"XAUUSD\", mi_pb2.SymbolInfoDoubleProperty.SYMBOL_POINT)\nprint(pt.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#2-tick-parameters","title":"2) Tick parameters","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nv = await acct.symbol_info_double(\"EURUSD\", mi_pb2.SymbolInfoDoubleProperty.SYMBOL_TRADE_TICK_VALUE)\ns = await acct.symbol_info_double(\"EURUSD\", mi_pb2.SymbolInfoDoubleProperty.SYMBOL_TRADE_TICK_SIZE)\nprint(\"tick value:\", v.value, \"tick size:\", s.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#3-with-deadline-cancel","title":"3) With deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ncancel_event = asyncio.Event()\nres = await acct.symbol_info_double(\n    \"BTCUSD\",\n    mi_pb2.SymbolInfoDoubleProperty.SYMBOL_ASK,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_double/#enum-symbolinfodoubleproperty","title":"Enum: <code>SymbolInfoDoubleProperty</code>","text":"<p>Full list from pb (number \u2192 value).</p> Number Value 0 <code>SYMBOL_BID</code> 1 <code>SYMBOL_BIDHIGH</code> 2 <code>SYMBOL_BIDLOW</code> 3 <code>SYMBOL_ASK</code> 4 <code>SYMBOL_ASKHIGH</code> 5 <code>SYMBOL_ASKLOW</code> 6 <code>SYMBOL_LAST</code> 7 <code>SYMBOL_LASTHIGH</code> 8 <code>SYMBOL_LASTLOW</code> 9 <code>SYMBOL_VOLUME_REAL</code> 10 <code>SYMBOL_VOLUMEHIGH_REAL</code> 11 <code>SYMBOL_VOLUMELOW_REAL</code> 12 <code>SYMBOL_OPTION_STRIKE</code> 13 <code>SYMBOL_POINT</code> 14 <code>SYMBOL_TRADE_TICK_VALUE</code> 15 <code>SYMBOL_TRADE_TICK_VALUE_PROFIT</code> 16 <code>SYMBOL_TRADE_TICK_VALUE_LOSS</code> 17 <code>SYMBOL_TRADE_TICK_SIZE</code> 18 <code>SYMBOL_TRADE_CONTRACT_SIZE</code> 19 <code>SYMBOL_TRADE_ACCRUED_INTEREST</code> 20 <code>SYMBOL_TRADE_FACE_VALUE</code> 21 <code>SYMBOL_TRADE_LIQUIDITY_RATE</code> 22 <code>SYMBOL_VOLUME_MIN</code> 23 <code>SYMBOL_VOLUME_MAX</code> 24 <code>SYMBOL_VOLUME_STEP</code> 25 <code>SYMBOL_VOLUME_LIMIT</code> 26 <code>SYMBOL_SWAP_LONG</code> 27 <code>SYMBOL_SWAP_SHORT</code> 28 <code>SYMBOL_SWAP_SUNDAY</code> 29 <code>SYMBOL_SWAP_MONDAY</code> 30 <code>SYMBOL_SWAP_TUESDAY</code> 31 <code>SYMBOL_SWAP_WEDNESDAY</code> 32 <code>SYMBOL_SWAP_THURSDAY</code> 33 <code>SYMBOL_SWAP_FRIDAY</code> 34 <code>SYMBOL_SWAP_SATURDAY</code> 35 <code>SYMBOL_MARGIN_INITIAL</code> 36 <code>SYMBOL_MARGIN_MAINTENANCE</code> 37 <code>SYMBOL_SESSION_VOLUME</code> 38 <code>SYMBOL_SESSION_TURNOVER</code> 39 <code>SYMBOL_SESSION_INTEREST</code> 40 <code>SYMBOL_SESSION_BUY_ORDERS_VOLUME</code> 41 <code>SYMBOL_SESSION_SELL_ORDERS_VOLUME</code> 42 <code>SYMBOL_SESSION_OPEN</code> 43 <code>SYMBOL_SESSION_CLOSE</code> 44 <code>SYMBOL_SESSION_AW</code> 45 <code>SYMBOL_SESSION_PRICE_SETTLEMENT</code> 46 <code>SYMBOL_SESSION_PRICE_LIMIT_MIN</code> 47 <code>SYMBOL_SESSION_PRICE_LIMIT_MAX</code> 48 <code>SYMBOL_MARGIN_HEDGED</code> 49 <code>SYMBOL_PRICE_CHANGE</code> 50 <code>SYMBOL_PRICE_VOLATILITY</code> 51 <code>SYMBOL_PRICE_THEORETICAL</code> 52 <code>SYMBOL_PRICE_DELTA</code> 53 <code>SYMBOL_PRICE_THETA</code> 54 <code>SYMBOL_PRICE_GAMMA</code> 55 <code>SYMBOL_PRICE_VEGA</code> 56 <code>SYMBOL_PRICE_RHO</code> 57 <code>SYMBOL_PRICE_OMEGA</code> 58 <code>SYMBOL_PRICE_SENSITIVITY</code> 59 <code>SYMBOL_COUNT</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/","title":"\u2705 Symbol Info Integer","text":"<p>Request: get an integer property of a symbol (e.g., DIGITS, SPREAD, TRADE_MODE) via a single RPC.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_integer(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoInteger*</code> messages (<code>SymbolInfoIntegerRequest</code>, <code>SymbolInfoIntegerReply</code>, <code>SymbolInfoIntegerData</code>) and enum <code>SymbolInfoIntegerProperty</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoInteger(SymbolInfoIntegerRequest) \u2192 SymbolInfoIntegerReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoInteger(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_integer(symbol, property, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get the number of digits for the symbol\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nval = await acct.symbol_info_integer(\n    \"EURUSD\",\n    mi_pb2.SymbolInfoIntegerProperty.SYMBOL_DIGITS,\n)\nprint(val.value)  # e.g., 5\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_integer(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoIntegerProperty,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoIntegerData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Direct read of an integer field for a symbol.</li> <li>Why you care. Lightweight and precise for discrete attributes (digits, spread, trade modes, flags, timestamps).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>property</code> <code>SymbolInfoIntegerProperty</code> (required) Which integer property to retrieve (see enum). <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoIntegerRequest { symbol: string, type: SymbolInfoIntegerProperty }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#payload-symbolinfointegerdata","title":"Payload: <code>SymbolInfoIntegerData</code>","text":"Field Proto Type Description <code>value</code> <code>int64</code> The numeric value for the property. <p>Wire reply: <code>SymbolInfoIntegerReply { data: SymbolInfoIntegerData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pull specific discrete parameters for calculators and UI (digits/spread/modes).</li> <li>Quick validations and health checks.</li> <li>Compose with other calls for dashboards.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>When interpreting modes (TRADE/ORDER/FILLING/etc.), map the integer to your corresponding enum for human\u2011readable labels.</li> <li>For price/tick economics, see <code>symbol_info_double(...)</code> and <code>tick_value_with_size(...)</code>.</li> </ul> <p>See also: symbol_info_double.md, symbol_info_string.md, symbol_info_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#1-get-spread-points","title":"1) Get spread (points)","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\nsp = await acct.symbol_info_integer(\"EURUSD\", mi_pb2.SymbolInfoIntegerProperty.SYMBOL_SPREAD)\nprint(sp.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#2-get-trade-mode-and-map-to-label","title":"2) Get trade mode and map to label","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\nmode = await acct.symbol_info_integer(\"XAUUSD\", mi_pb2.SymbolInfoIntegerProperty.SYMBOL_TRADE_MODE)\n# Map integer to your own enum/labels (disabled/full/long only/etc.)\nprint(mode.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#3-convert-timestamps","title":"3) Convert timestamps","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\nimport datetime as dt\n\nraw = await acct.symbol_info_integer(\"BTCUSD\", mi_pb2.SymbolInfoIntegerProperty.SYMBOL_START_TIME)\nprint(dt.datetime.utcfromtimestamp(raw.value))\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_integer/#enum-symbolinfointegerproperty","title":"Enum: <code>SymbolInfoIntegerProperty</code>","text":"<p>Values per pb (number \u2192 value):</p> Number Value 0 <code>SYMBOL_SUBSCRIPTION_DELAY</code> 1 <code>SYMBOL_SECTOR</code> 2 <code>SYMBOL_INDUSTRY</code> 3 <code>SYMBOL_CUSTOM</code> 4 <code>SYMBOL_BACKGROUND_COLOR</code> 5 <code>SYMBOL_CHART_MODE</code> 6 <code>SYMBOL_EXIST</code> 7 <code>SYMBOL_SELECT</code> 8 <code>SYMBOL_VISIBLE</code> 9 <code>SYMBOL_SESSION_DEALS</code> 10 <code>SYMBOL_SESSION_BUY_ORDERS</code> 11 <code>SYMBOL_SESSION_SELL_ORDERS</code> 12 <code>SYMBOL_VOLUME</code> 13 <code>SYMBOL_VOLUMEHIGH</code> 14 <code>SYMBOL_VOLUMELOW</code> 15 <code>SYMBOL_TIME</code> 16 <code>SYMBOL_TIME_MSC</code> 17 <code>SYMBOL_DIGITS</code> 18 <code>SYMBOL_SPREAD_FLOAT</code> 19 <code>SYMBOL_SPREAD</code> 20 <code>SYMBOL_TICKS_BOOKDEPTH</code> 21 <code>SYMBOL_TRADE_CALC_MODE</code> 22 <code>SYMBOL_TRADE_MODE</code> 23 <code>SYMBOL_START_TIME</code> 24 <code>SYMBOL_EXPIRATION_TIME</code> 25 <code>SYMBOL_TRADE_STOPS_LEVEL</code> 26 <code>SYMBOL_TRADE_FREEZE_LEVEL</code> 27 <code>SYMBOL_TRADE_EXEMODE</code> 28 <code>SYMBOL_SWAP_MODE</code> 29 <code>SYMBOL_SWAP_ROLLOVER3DAYS</code> 30 <code>SYMBOL_MARGIN_HEDGED_USE_LEG</code> 31 <code>SYMBOL_EXPIRATION_MODE</code> 32 <code>SYMBOL_FILLING_MODE</code> 33 <code>SYMBOL_ORDER_MODE</code> 34 <code>SYMBOL_ORDER_GTC_MODE</code> 35 <code>SYMBOL_OPTION_MODE</code> 36 <code>SYMBOL_OPTION_RIGHT</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/","title":"\u2705 Symbol Info Margin Rate","text":"<p>Request: get margin rates for a symbol given an order type (BUY/SELL). Returns initial and maintenance rates.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_margin_rate(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoMarginRate*</code> messages (<code>SymbolInfoMarginRateRequest</code>, <code>SymbolInfoMarginRateReply</code>, <code>SymbolInfoMarginRateData</code>) and enum <code>ENUM_ORDER_TYPE</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoMarginRate(SymbolInfoMarginRateRequest) \u2192 SymbolInfoMarginRateReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoMarginRate(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_margin_rate(symbol, order_type, deadline=None, cancellation_event=None)</code> \u2192 returns <code>SymbolInfoMarginRateData</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Ask margin rates for placing a BUY order\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nrates = await acct.symbol_info_margin_rate(\n    \"EURUSD\",\n    mi_pb2.ENUM_ORDER_TYPE.ORDER_TYPE_BUY,\n)\nprint(rates.initial_margin_rate, rates.maintenance_margin_rate)\n</code></pre> <pre><code># Compare BUY vs SELL\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nbuy = await acct.symbol_info_margin_rate(\"XAUUSD\", mi_pb2.ENUM_ORDER_TYPE.ORDER_TYPE_BUY)\nsell = await acct.symbol_info_margin_rate(\"XAUUSD\", mi_pb2.ENUM_ORDER_TYPE.ORDER_TYPE_SELL)\nprint(\"BUY initial:\", buy.initial_margin_rate, \"SELL initial:\", sell.initial_margin_rate)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_margin_rate(\n    self,\n    symbol: str,\n    order_type: market_info_pb2.ENUM_ORDER_TYPE,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoMarginRateData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Server-calculated margin rates (initial &amp; maintenance) for a symbol under a specific order type.</li> <li>Why you care. Use these to estimate required margin before placing orders or sizing positions.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Rates are broker/symbol specific and can vary by order type (BUY vs SELL) and account settings.</p> </li> <li>Returned values are rates, not absolute money \u2014 multiply by contract/price to project margin.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name. <code>order_type</code> <code>ENUM_ORDER_TYPE</code> (required) BUY/SELL/etc. context for which to compute rates. <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoMarginRateRequest { symbol: string, order_type: ENUM_ORDER_TYPE }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#payload-symbolinfomarginratedata","title":"Payload: <code>SymbolInfoMarginRateData</code>","text":"Field Proto Type Description <code>maintenance_margin_rate</code> <code>double</code> Maintenance margin rate. <code>initial_margin_rate</code> <code>double</code> Initial margin rate. <p>Wire reply: <code>SymbolInfoMarginRateReply { data: SymbolInfoMarginRateData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#enum-enum_order_type","title":"Enum: <code>ENUM_ORDER_TYPE</code>","text":"Number Value 0 <code>ORDER_TYPE_BUY</code> 1 <code>ORDER_TYPE_SELL</code> 2 <code>ORDER_TYPE_BUY_LIMIT</code> 3 <code>ORDER_TYPE_SELL_LIMIT</code> 4 <code>ORDER_TYPE_BUY_STOP</code> 5 <code>ORDER_TYPE_SELL_STOP</code> 6 <code>ORDER_TYPE_BUY_STOP_LIMIT</code> 7 <code>ORDER_TYPE_SELL_STOP_LIMIT</code> 8 <code>ORDER_TYPE_CLOSE_BY</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pre\u2011check margin requirements before placing or modifying orders.</li> <li>Display margin components in UI (initial &amp; maintenance).</li> <li>Audit broker settings across instruments.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pair with <code>symbol_info_double(SYMBOL_TRADE_CONTRACT_SIZE)</code> and current price to project absolute margin per lot.</li> <li>For precise feasibility (free margin after/retcode), use <code>OrderCheck</code>.</li> </ul> <p>See also: order_calc_margin.md, order_check.md, symbol_info_double.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#1-rough-initial-margin-per-1-lot-illustrative","title":"1) Rough initial margin per 1 lot (illustrative)","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nrates = await acct.symbol_info_margin_rate(\"EURUSD\", mi_pb2.ENUM_ORDER_TYPE.ORDER_TYPE_BUY)\ncontract = await acct.symbol_info_double(\"EURUSD\", mi_pb2.SymbolInfoDoubleProperty.SYMBOL_TRADE_CONTRACT_SIZE)\nprint(\"rate:\", rates.initial_margin_rate, \"contract:\", contract.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_margin_rate/#2-with-deadline-cancel","title":"2) With deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ncancel_event = asyncio.Event()\nres = await acct.symbol_info_margin_rate(\n    \"BTCUSD\",\n    mi_pb2.ENUM_ORDER_TYPE.ORDER_TYPE_BUY,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.initial_margin_rate, res.maintenance_margin_rate)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/","title":"\u2705 Symbol Info Session Quote","text":"<p>Request: get quote session window (time interval) for a symbol on a given day of week and session index.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_session_quote(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoSessionQuote*</code> messages (<code>SymbolInfoSessionQuoteRequest</code>, <code>SymbolInfoSessionQuoteReply</code>, <code>SymbolInfoSessionQuoteData</code>) and enum <code>DayOfWeek</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoSessionQuote(SymbolInfoSessionQuoteRequest) \u2192 SymbolInfoSessionQuoteReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoSessionQuote(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_session_quote(symbol, day_of_week, session_index, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get quote session window for Monday, session #0\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nsess = await acct.symbol_info_session_quote(\n    \"EURUSD\",\n    mi_pb2.DayOfWeek.MONDAY,\n    0,\n)\nprint(sess.from.seconds, sess.to.seconds)  # UTC seconds\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_session_quote(\n    self,\n    symbol: str,\n    day_of_week: market_info_pb2.DayOfWeek,\n    session_index: int,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoSessionQuoteData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Returns the time window when quotes are available for the symbol on a specific weekday.</li> <li>Why you care. Lets UIs gray\u2011out off\u2011market hours and lets strategies respect session boundaries.</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>session_index</code> is zero\u2011based (0, 1, 2, \u2026). Many brokers have 0 or 1 session per day; some have breaks.</p> </li> <li>Timestamps are <code>google.protobuf.Timestamp</code> (UTC). Convert before showing.</li> <li>If the session is absent, the window may be empty (both ends epoch or equal). Handle this gracefully.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name. <code>day_of_week</code> <code>DayOfWeek</code> (required) Weekday selector (enum below). <code>session_index</code> <code>uint32</code> (required) Zero\u2011based session index within the selected weekday. <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoSessionQuoteRequest { symbol: string, day_of_week: DayOfWeek, session_index: uint32 }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#payload-symbolinfosessionquotedata","title":"Payload: <code>SymbolInfoSessionQuoteData</code>","text":"Field Proto Type Description <code>from</code> <code>google.protobuf.Timestamp</code> Session start (UTC). <code>to</code> <code>google.protobuf.Timestamp</code> Session end (UTC). <p>Wire reply: <code>SymbolInfoSessionQuoteReply { data: SymbolInfoSessionQuoteData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#enum-dayofweek","title":"Enum: <code>DayOfWeek</code>","text":"Number Value 0 <code>SUNDAY</code> 1 <code>MONDAY</code> 2 <code>TUESDAY</code> 3 <code>WEDNESDAY</code> 4 <code>THURSDAY</code> 5 <code>FRIDAY</code> 6 <code>SATURDAY</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Respect market hours in strategies and UI.</li> <li>Build weekly calendars with quote availability.</li> <li>Validate broker config (detect gaps or unexpected breaks).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>To enumerate all sessions for a day, keep increasing <code>session_index</code> until you get an empty window.</li> <li>For trading permissions (not just quoting), use <code>SymbolInfoSessionTrade</code>.</li> </ul> <p>See also: symbol_info_session_trade.md, symbol_info_tick.md, symbol_info_string.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#1-print-all-monday-sessions","title":"1) Print all Monday sessions","text":"<pre><code># English-only comments per project style\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ns = \"XAUUSD\"\nfor i in range(10):  # stop when window is empty\n    w = await acct.symbol_info_session_quote(s, mi_pb2.DayOfWeek.MONDAY, i)\n    if (not getattr(w, \"from\") or not getattr(w, \"to\") or w.from.seconds == 0 and w.to.seconds == 0):\n        break\n    print(i, w.from.seconds, w.to.seconds)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#2-convert-to-local-time-and-format","title":"2) Convert to local time and format","text":"<pre><code>from datetime import datetime, timezone\n\nw = await acct.symbol_info_session_quote(\"EURUSD\", mi_pb2.DayOfWeek.FRIDAY, 0)\nstart = datetime.fromtimestamp(w.from.seconds, tz=timezone.utc)\nend = datetime.fromtimestamp(w.to.seconds, tz=timezone.utc)\nprint(start.isoformat(), \"\u2192\", end.isoformat())\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_quote/#3-guard-for-offhours","title":"3) Guard for off\u2011hours","text":"<pre><code>from datetime import datetime, timezone\nimport time\n\nw = await acct.symbol_info_session_quote(\"BTCUSD\", mi_pb2.DayOfWeek.SUNDAY, 0)\nnow_utc = datetime.now(timezone.utc).timestamp()\ninside = (w.from.seconds &lt;= now_utc &lt;= w.to.seconds)\nprint(\"in session?\", inside)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/","title":"\u2705 Symbol Info Session Trade","text":"<p>Request: get trading session window (time interval when trading is allowed) for a symbol on a given day of week and session index.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_session_trade(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoSessionTrade*</code> messages (<code>SymbolInfoSessionTradeRequest</code>, <code>SymbolInfoSessionTradeReply</code>, <code>SymbolInfoSessionTradeData</code>) and enum <code>DayOfWeek</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoSessionTrade(SymbolInfoSessionTradeRequest) \u2192 SymbolInfoSessionTradeReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoSessionTrade(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_session_trade(symbol, day_of_week, session_index, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get trading session window for Monday, session #0\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nsess = await acct.symbol_info_session_trade(\n    \"EURUSD\",\n    mi_pb2.DayOfWeek.MONDAY,\n    0,\n)\nprint(sess.from.seconds, sess.to.seconds)  # UTC seconds\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_session_trade(\n    self,\n    symbol: str,\n    day_of_week: market_info_pb2.DayOfWeek,\n    session_index: int,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoSessionTradeData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Returns the time window when trading is permitted for the symbol on a specific weekday.</li> <li>Why you care. Strategies and UIs can block order placement outside trading hours, even if quotes exist.</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>session_index</code> is zero\u2011based (0, 1, 2, \u2026). Some brokers split a day into multiple sessions with breaks.</p> </li> <li>Timestamps are <code>google.protobuf.Timestamp</code> (UTC). Convert before display.</li> <li>If the session is absent, the window may be empty (both ends zero/equal). Handle gracefully.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name. <code>day_of_week</code> <code>DayOfWeek</code> (required) Weekday selector (enum below). <code>session_index</code> <code>uint32</code> (required) Zero\u2011based session index within the selected weekday. <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoSessionTradeRequest { symbol: string, day_of_week: DayOfWeek, session_index: uint32 }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#payload-symbolinfosessiontradedata","title":"Payload: <code>SymbolInfoSessionTradeData</code>","text":"Field Proto Type Description <code>from</code> <code>google.protobuf.Timestamp</code> Trading start (UTC). <code>to</code> <code>google.protobuf.Timestamp</code> Trading end (UTC). <p>Wire reply: <code>SymbolInfoSessionTradeReply { data: SymbolInfoSessionTradeData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#enum-dayofweek","title":"Enum: <code>DayOfWeek</code>","text":"Number Value 0 <code>SUNDAY</code> 1 <code>MONDAY</code> 2 <code>TUESDAY</code> 3 <code>WEDNESDAY</code> 4 <code>THURSDAY</code> 5 <code>FRIDAY</code> 6 <code>SATURDAY</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enforce trading hours in order tickets and automation.</li> <li>Build weekly calendars showing when orders are allowed.</li> <li>Validate broker configs (unexpected closures/breaks).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Quote sessions may differ from trade sessions. Use <code>SymbolInfoSessionQuote</code> to compare.</li> <li>To enumerate all sessions for a day, increase <code>session_index</code> until the returned window is empty.</li> </ul> <p>See also: symbol_info_session_quote.md, symbol_select.md, symbol_is_synchronized.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#1-print-all-friday-trading-sessions","title":"1) Print all Friday trading sessions","text":"<pre><code># English-only comments per project style\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ns = \"XAUUSD\"\nfor i in range(10):\n    w = await acct.symbol_info_session_trade(s, mi_pb2.DayOfWeek.FRIDAY, i)\n    if (not getattr(w, \"from\") or not getattr(w, \"to\") or w.from.seconds == 0 and w.to.seconds == 0):\n        break\n    print(i, w.from.seconds, w.to.seconds)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#2-convert-to-local-time-for-ui","title":"2) Convert to local time for UI","text":"<pre><code>from datetime import datetime, timezone\n\nw = await acct.symbol_info_session_trade(\"EURUSD\", mi_pb2.DayOfWeek.MONDAY, 0)\nstart = datetime.fromtimestamp(w.from.seconds, tz=timezone.utc)\nend = datetime.fromtimestamp(w.to.seconds, tz=timezone.utc)\nprint(start.isoformat(), \"\u2192\", end.isoformat())\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_session_trade/#3-guard-order-placement-by-current-time","title":"3) Guard order placement by current time","text":"<pre><code>from datetime import datetime, timezone\n\nw = await acct.symbol_info_session_trade(\"BTCUSD\", mi_pb2.DayOfWeek.SUNDAY, 0)\nnow_utc = datetime.now(timezone.utc).timestamp()\ninside = (w.from.seconds &lt;= now_utc &lt;= w.to.seconds)\nif not inside:\n    raise RuntimeError(\"Trading session is closed right now\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/","title":"\u2705 Symbol Info String","text":"<p>Request: get a string property of a symbol (e.g., DESCRIPTION, CURRENCY_*, PATH, ISIN, FORMULA) via a single RPC.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_string(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoString*</code> messages (<code>SymbolInfoStringRequest</code>, <code>SymbolInfoStringReply</code>, <code>SymbolInfoStringData</code>) and enum <code>SymbolInfoStringProperty</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoString(SymbolInfoStringRequest) \u2192 SymbolInfoStringReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoString(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_string(symbol, property, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get human-readable description\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ndesc = await acct.symbol_info_string(\n    \"EURUSD\",\n    mi_pb2.SymbolInfoStringProperty.SYMBOL_DESCRIPTION,\n)\nprint(desc.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_string(\n    self,\n    symbol: str,\n    property: market_info_pb2.SymbolInfoStringProperty,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolInfoStringData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Direct read of a string field for a symbol.</li> <li>Why you care. Ideal for UI labels, grouping, compliance (ISIN), and custom symbol metadata.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>property</code> <code>SymbolInfoStringProperty</code> (required) Which string property to retrieve (see enum). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoStringRequest { symbol: string, type: SymbolInfoStringProperty }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#payload-symbolinfostringdata","title":"Payload: <code>SymbolInfoStringData</code>","text":"Field Proto Type Description <code>value</code> <code>string</code> The string value for the property. <p>Wire reply: <code>SymbolInfoStringReply { data: SymbolInfoStringData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#enum-symbolinfostringproperty","title":"Enum: <code>SymbolInfoStringProperty</code>","text":"<p>Full list from pb:</p> <ul> <li><code>SYMBOL_BASIS</code></li> <li><code>SYMBOL_CATEGORY</code></li> <li><code>SYMBOL_COUNTRY</code></li> <li><code>SYMBOL_SECTOR_NAME</code></li> <li><code>SYMBOL_INDUSTRY_NAME</code></li> <li><code>SYMBOL_CURRENCY_BASE</code></li> <li><code>SYMBOL_CURRENCY_PROFIT</code></li> <li><code>SYMBOL_CURRENCY_MARGIN</code></li> <li><code>SYMBOL_BANK</code></li> <li><code>SYMBOL_DESCRIPTION</code></li> <li><code>SYMBOL_EXCHANGE</code></li> <li><code>SYMBOL_FORMULA</code></li> <li><code>SYMBOL_ISIN</code></li> <li><code>SYMBOL_PAGE</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Populate UI labels and metadata (description, path, page link).</li> <li>Show/account currencies (base/profit/margin) for calculators.</li> <li>Compliance fields like ISIN for securities.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For pricing and lot economics, combine with <code>symbol_info_double(...)</code> or <code>tick_value_with_size(...)</code>.</li> <li>For modes/flags (trade/order/filling), see <code>symbol_info_integer(...)</code>.</li> </ul> <p>See also: symbol_info_double.md, symbol_info_integer.md, symbol_info_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#1-get-path-and-group-by-folders","title":"1) Get path and group by folders","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\np = await acct.symbol_info_string(\"EURUSD\", mi_pb2.SymbolInfoStringProperty.SYMBOL_PATH)\nfolders = p.value.split(\"\\\\\\\\\")  # ['Forex', 'Majors', 'EURUSD']\nprint(folders)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#2-currency-triplet","title":"2) Currency triplet","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nbase = await acct.symbol_info_string(\"XAUUSD\", mi_pb2.SymbolInfoStringProperty.SYMBOL_CURRENCY_BASE)\nprofit = await acct.symbol_info_string(\"XAUUSD\", mi_pb2.SymbolInfoStringProperty.SYMBOL_CURRENCY_PROFIT)\nmargin = await acct.symbol_info_string(\"XAUUSD\", mi_pb2.SymbolInfoStringProperty.SYMBOL_CURRENCY_MARGIN)\nprint(base.value, profit.value, margin.value)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_string/#3-isin-web-page","title":"3) ISIN &amp; web page","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\nisin = await acct.symbol_info_string(\"AAPL\", mi_pb2.SymbolInfoStringProperty.SYMBOL_ISIN)\npage = await acct.symbol_info_string(\"AAPL\", mi_pb2.SymbolInfoStringProperty.SYMBOL_PAGE)\nprint(isin.value, page.value)\n</code></pre> <ul> <li><code>SYMBOL_PATH</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/","title":"\u2705 Symbol Info Tick","text":"<p>Request: get the latest tick for a symbol (bid/ask/last, volumes, timestamps, flags) via a single RPC.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_info_tick(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolInfoTick*</code> messages (<code>SymbolInfoTickRequest</code>, <code>SymbolInfoTickRequestReply</code>) and payload <code>MrpcMqlTick</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolInfoTick(SymbolInfoTickRequest) \u2192 SymbolInfoTickRequestReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolInfoTick(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_info_tick(symbol, deadline=None, cancellation_event=None)</code> \u2192 returns <code>MrpcMqlTick</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Fetch the latest tick and print bid/ask and age\nfrom datetime import datetime, timezone\n\ntick = await acct.symbol_info_tick(\"EURUSD\")\nprint(tick.bid, tick.ask)\n# compute age in seconds if 'time' is present\nif getattr(tick, \"time\", 0):\n    age = int(datetime.now(timezone.utc).timestamp() - tick.time)\n    print(\"age sec:\", age)\n</code></pre> <pre><code># Ensure symbol is selected &amp; synchronized first\ns = \"BTCUSD\"\nif not (await acct.symbol_is_synchronized(s)).is_synchronized:\n    await acct.symbol_select(s, True)\n    _ = await acct.symbol_is_synchronized(s)\nprint((await acct.symbol_info_tick(s)).bid)\n</code></pre> <pre><code># Timeout-sensitive request\nimport asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.symbol_info_tick(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.bid, res.ask)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_info_tick(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.MrpcMqlTick\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. The terminal\u2019s latest tick snapshot for a symbol.</li> <li>Why you care. Power price widgets, quote ribbons, and freshness checks before trading ops.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Ensure the symbol is selected &amp; synchronized; otherwise fields can be zero/empty.</p> </li> <li><code>time</code> and <code>time_msc</code> represent the tick time (seconds and milliseconds since epoch, UTC). Convert before display.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolInfoTickRequest { symbol: string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#payload-mrpcmqltick","title":"Payload: <code>MrpcMqlTick</code>","text":"Field Proto Type Description <code>time</code> <code>int64</code> Tick time in seconds since epoch (UTC). <code>bid</code> <code>double</code> Current best bid. <code>ask</code> <code>double</code> Current best ask. <code>last</code> <code>double</code> Last trade price (if applicable). <code>volume</code> <code>uint64</code> Tick volume (integer). <code>time_msc</code> <code>int64</code> Tick time in milliseconds since epoch (UTC). <code>flags</code> <code>uint32</code> Tick flags (bitmask). <code>volume_real</code> <code>double</code> Real volume (if provided by broker). <p>Wire reply: <code>SymbolInfoTickRequestReply { data: MrpcMqlTick, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Render live quote tiles and price ribbons.</li> <li>Assess freshness of data (how old the last tick is).</li> <li>Drive downstream logic (spread display, slippage checks, etc.).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>If <code>bid/ask</code> are zeros or time is stale, call <code>symbol_is_synchronized(...)</code> and/or <code>symbol_select(symbol, True)</code> then retry.</li> <li>For derived metrics: spread = <code>ask - bid</code>; mid = <code>(ask + bid) / 2</code>.</li> </ul> <p>See also: symbol_info_double.md, symbol_info_integer.md, on_symbol_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#1-basic-usage-with-freshness-guard","title":"1) Basic usage with freshness guard","text":"<pre><code>from datetime import datetime, timezone\n\ns = \"XAUUSD\"\nt = await acct.symbol_info_tick(s)\nmid = (t.bid + t.ask) / 2 if (t.bid and t.ask) else None\nage = None\nif getattr(t, \"time\", 0):\n    age = int(datetime.now(timezone.utc).timestamp() - t.time)\nprint(s, \"mid=\", mid, \"age=\", age)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#2-compute-spread-mid","title":"2) Compute spread &amp; mid","text":"<pre><code>x = await acct.symbol_info_tick(\"EURUSD\")\nspread = (x.ask - x.bid) if (x.ask and x.bid) else None\nmid = (x.ask + x.bid) / 2 if (x.ask and x.bid) else None\nprint(\"spread:\", spread, \"mid:\", mid)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_info_tick/#3-timeoutsensitive-request-with-cancel","title":"3) Timeout\u2011sensitive request (with cancel)","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nres = await acct.symbol_info_tick(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(res.bid, res.ask)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/","title":"\u2705 Symbol Is Synchronized","text":"<p>Request: check whether a symbol is currently synchronized in the terminal (i.e., the terminal has recent data and can operate on it).</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_is_synchronized(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolIsSynchronized*</code> messages (<code>SymbolIsSynchronizedRequest</code>, <code>SymbolIsSynchronizedReply</code>, <code>SymbolIsSynchronizedData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolIsSynchronized(SymbolIsSynchronizedRequest) \u2192 SymbolIsSynchronizedReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolIsSynchronized(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_is_synchronized(symbol, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Ensure the symbol is synchronized before requesting quotes / book\ninfo = await acct.symbol_is_synchronized(\"EURUSD\")\nprint(info.synchronized)  # True/False\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_is_synchronized(\n    self,\n    symbol: str,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolIsSynchronizedData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A lightweight health check: is the symbol synced (has data, ready for operations)?</li> <li>Why you care. Prevents calling heavier RPCs (quotes, book, orders) on symbols the terminal hasn\u2019t synced yet.</li> <li> <p>Mind the traps.</p> </li> <li> <p>Request field is the symbol name (<code>symbol</code>).</p> </li> <li>If the symbol isn\u2019t selected in Market Watch, some terminals may remain unsynchronized until selected.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol name (maps to <code>symbol</code> in request). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolIsSynchronizedRequest { symbol: string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#payload-symbolissynchronizeddata","title":"Payload: <code>SymbolIsSynchronizedData</code>","text":"Field Proto Type Description <code>synchronized</code> <code>bool</code> <code>True</code> if the terminal considers it synced. <p>Wire reply: <code>SymbolIsSynchronizedReply { data: SymbolIsSynchronizedData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pre\u2011flight check before quotes, book, and trading ops.</li> <li>UI status badge (e.g., \u201cSynced / Not synced\u201d).</li> <li>Health monitoring across a batch of symbols.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>If result is <code>False</code>, try <code>symbol_select(symbol, True)</code> to force Market Watch listing, then re\u2011check.</li> <li>Combine with <code>symbol_exist</code> to avoid syncing non\u2011existent symbols.</li> </ul> <p>See also: symbol_select.md, symbol_name.md, symbol_info_tick.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#1-guard-before-subscribing-to-bookquotes","title":"1) Guard before subscribing to book/quotes","text":"<pre><code>s = \"XAUUSD\"\nif (await acct.symbol_is_synchronized(s)).synchronized:\n    # safe to proceed\n    ...\nelse:\n    # fall back: force select and retry\n    await acct.symbol_select(s, True)\n    again = await acct.symbol_is_synchronized(s)\n    assert again.synchronized\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#2-batch-sync-check-with-autoselect","title":"2) Batch sync check with auto\u2011select","text":"<pre><code>symbols = [\"EURUSD\", \"BTCUSD\", \"US500.cash\"]\nfor s in symbols:\n    info = await acct.symbol_is_synchronized(s)\n    if not info.synchronized and (await acct.symbol_exist(s)).exists:\n        await acct.symbol_select(s, True)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_is_synchronized/#3-timeoutsensitive-check","title":"3) Timeout\u2011sensitive check","text":"<pre><code>from datetime import datetime, timedelta, timezone\n\ninfo = await acct.symbol_is_synchronized(\n    \"EURUSD\",\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n)\nprint(\"synced:\", info.synchronized)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/","title":"\u2705 Symbol Name","text":"<p>Request: get the symbol name by its index with the option to resolve from Market Watch only.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_name(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolName*</code> messages (<code>SymbolNameRequest</code>, <code>SymbolNameReply</code>, <code>SymbolNameData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolName(SymbolNameRequest) \u2192 SymbolNameReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolName(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_name(index, selected, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Resolve a symbol name by position in Market Watch\nname = await acct.symbol_name(index=0, selected=True)\nprint(name.name)  # e.g., \"EURUSD\"\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_name(\n    self,\n    index: int,\n    selected: bool,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolNameData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Returns the symbol name at a given position.</li> <li>Why you care. Enables paging through symbol lists (all symbols or just Market Watch) without fetching the full list.</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>selected=True</code> means the index is taken from Market Watch; <code>False</code> means from the full server list.</p> </li> <li>If the index is out of range, the server typically returns an empty name.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>index</code> <code>int</code> (required) Zero\u2011based position of the symbol to resolve. <code>selected</code> <code>bool</code> (required) <code>True</code> \u2192 use Market Watch list; <code>False</code> \u2192 use full symbol list. <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>SymbolNameRequest { index: int32, selected: bool }</code></p>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_name/#payload-symbolnamedata","title":"Payload: <code>SymbolNameData</code>","text":"Field Proto Type Description <code>name</code> <code>string</code> Resolved symbol name or empty. <p>Wire reply: <code>SymbolNameReply { data: SymbolNameData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Page through symbol universe in a deterministic order.</li> <li>Build symbol pickers (e.g., first 100 in Market Watch).</li> <li>Lightweight integrity checks before <code>symbol_exist</code> / <code>symbol_select</code>.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Combine with <code>symbols_total(selected_only)</code> to stay within bounds: <code>index in [0, total)</code>.</li> <li>Expect empty result for out\u2011of\u2011range <code>index</code>; handle gracefully in UI.</li> </ul> <p>See also: symbols_total.md, symbol_select.md, symbol_exist.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_name/#1-iterate-market-watch-symbols","title":"1) Iterate Market Watch symbols","text":"<pre><code>sel_total = await acct.symbols_total(True)\nfor i in range(sel_total.total):\n    nm = await acct.symbol_name(i, True)\n    print(i, nm.name)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#2-get-the-first-5-from-the-full-list","title":"2) Get the first 5 from the full list","text":"<pre><code>all_total = await acct.symbols_total(False)\ncount = min(5, all_total.total)\nfor i in range(count):\n    nm = await acct.symbol_name(i, False)\n    print(nm.name)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_name/#3-guard-against-outofrange","title":"3) Guard against out\u2011of\u2011range","text":"<pre><code>idx = 999999\nnm = await acct.symbol_name(idx, True)\nif not nm.name:\n    print(\"Index out of range for Market Watch\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/","title":"\u2705 Symbol Params Many","text":"<p>Request: fetch many symbols' parameters (paged + sortable), returning a structured list of per\u2011symbol fields.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_params_many(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>SymbolParamsMany*</code> messages (<code>SymbolParamsManyRequest</code>, <code>SymbolParamsManyReply</code>, <code>SymbolParamsManyData</code>) and enums (<code>AH_SYMBOL_PARAMS_MANY_SORT_TYPE</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2_grpc.py</code> \u2014 service stub <code>AccountHelperStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>SymbolParamsMany(SymbolParamsManyRequest) \u2192 SymbolParamsManyReply</code></li> <li>Low-level client: <code>AccountHelperStub.SymbolParamsMany(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_params_many(request, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get first page of symbol parameters, sorted by server default\nfrom MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nreq = ah_pb2.SymbolParamsManyRequest(\n    page_number=0,\n    items_per_page=50,\n)\nres = await acct.symbol_params_many(req)\nprint(len(res.symbol_infos), res.symbols_total)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_params_many(\n    self,\n    request: account_helper_pb2.SymbolParamsManyRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.SymbolParamsManyData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Paged directory of symbol parameters (contract size, tick size/value, volumes, spreads, etc.).</li> <li>Why you care. Drive symbol pickers, validations, and bulk analytics without N requests.</li> <li> <p>Mind the traps.</p> </li> <li> <p>The wrapper returns <code>.data</code> semantics on the wire; SDK returns a <code>SymbolParamsManyData</code> with <code>symbol_infos[]</code>.</p> </li> <li>Use paging (<code>page_number</code>, <code>items_per_page</code>) to avoid heavy responses on large servers.</li> <li><code>symbol_name</code> filter is an exact match \u2014 narrows results to a single symbol if present.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#input","title":"\ud83d\udd3d Input","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#message-symbolparamsmanyrequest","title":"Message: <code>SymbolParamsManyRequest</code>","text":"Field Proto Type Required Description <code>symbol_name</code> <code>string</code> no Optional exact\u2011name filter for a single symbol. <code>sort_type</code> <code>enum AH_SYMBOL_PARAMS_MANY_SORT_TYPE</code> no Server\u2011side sort (see enum below). <code>page_number</code> <code>int32</code> no Zero\u2011based page index. <code>items_per_page</code> <code>int32</code> no Page size (how many items to return). <p>Note: The SDK wrapper maps your <code>deadline</code> \u2192 gRPC <code>timeout</code> and honors <code>cancellation_event</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#message-symbolparamsmanydata","title":"Message: <code>SymbolParamsManyData</code>","text":"Field Proto Type Description <code>symbol_infos</code> <code>repeated mt5_term_api.SymbolParameters</code> List of per\u2011symbol parameter objects. <code>symbols_total</code> <code>int32</code> Total number of symbols matching the filter. <code>page_number</code> <code>int32</code> (optional) Echo of the requested page. <code>items_per_page</code> <code>int32</code> (optional) Echo of the requested page size."},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#mt5_term_apisymbolparameters-key-fields","title":"<code>mt5_term_api.SymbolParameters</code> \u2014 key fields","text":"<p>Many fields are exposed. The most commonly used ones are listed here; the full set is available in the proto.</p> Field Proto Type Meaning <code>name</code> <code>string</code> Symbol name. <code>point</code> <code>double</code> Price point size. <code>digits</code> <code>int32</code> Number of digits in prices. <code>bid</code>, <code>bid_high</code>, <code>bid_low</code> <code>double</code> Current/hi/lo bid. <code>ask</code>, <code>ask_high</code>, <code>ask_low</code> <code>double</code> Current/hi/lo ask. <code>last</code>, <code>last_high</code>, <code>last_low</code> <code>double</code> Last trade price triplet (if applicable). <code>volume_real</code> <code>double</code> Current tick volume (real). <code>trade_tick_value</code> <code>double</code> Tick value (account currency). <code>trade_tick_value_profit</code> <code>double</code> Tick value used for profit calc. <code>trade_tick_value_loss</code> <code>double</code> Tick value used for loss calc. <code>trade_tick_size</code> <code>double</code> Price increment per tick. <code>trade_contract_size</code> <code>double</code> Contract size. <code>volume_min/max/step/limit</code> <code>double</code> Lot constraints. <code>spread</code>, <code>spread_float</code> <code>int32</code>, <code>bool</code> Spread (points) and whether it is floating. <code>ticks_book_depth</code> <code>int32</code> DOM depth supported by the broker. <code>trade_calc_mode</code> <code>enum</code> Symbol calc mode (<code>BMT5_ENUM_SYMBOL_CALC_MODE</code>). <code>trade_mode</code> <code>enum</code> Trade permissions (<code>BMT5_ENUM_SYMBOL_TRADE_MODE</code>). <code>swap_mode</code> <code>enum</code> Swap calculation mode. <code>margin_initial/maintenance/hedged</code> <code>double</code> Margin parameters. <code>currency_base/profit/margin</code> <code>string</code> Currency triplet. <code>sector/industry</code> <code>enum</code> Sector and industry classifications. <code>path</code>, <code>page</code>, <code>sym_description</code> <code>string</code> Descriptive strings (path, web page, description). <p>Additional fields include rollover settings, session stats, execution/filling/order modes, timestamps, and more \u2014 see proto for the exhaustive list.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#enum-ah_symbol_params_many_sort_type","title":"Enum: <code>AH_SYMBOL_PARAMS_MANY_SORT_TYPE</code>","text":"Number Value 0 <code>AH_PARAMS_MANY_SORT_TYPE_SYMBOL_NAME_ASC</code> 1 <code>AH_PARAMS_MANY_SORT_TYPE_SYMBOL_NAME_DESC</code> 2 <code>AH_PARAMS_MANY_SORT_TYPE_MQL_INDEX_ASC</code> 3 <code>AH_PARAMS_MANY_SORT_TYPE_MQL_INDEX_DESC</code>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Power bulk symbol onboarding, validations, and UI tables.</li> <li>Compute derived metrics (pip value, lot value) client\u2011side from returned fields.</li> <li>Pre\u2011cache parameters for strategy/risk engines.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use paging for big servers; render <code>res.symbols_total</code> to drive pagination controls.</li> <li>If you only need a handful of symbols, pass <code>symbol_name</code> per call or filter client\u2011side.</li> <li>Combine with <code>symbol_exist</code>, <code>symbol_select</code>, and <code>symbol_is_synchronized</code> for robust UX.</li> </ul> <p>See also: symbol_info_double.md, symbol_info_integer.md, symbol_info_string.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#1-first-100-parameters-2-pages-50","title":"1) First 100 parameters (2 pages \u00d7 50)","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nall_rows = []\nfor page in range(2):\n    req = ah_pb2.SymbolParamsManyRequest(page_number=page, items_per_page=50)\n    data = await acct.symbol_params_many(req)\n    all_rows.extend(data.symbol_infos)\nprint(len(all_rows), data.symbols_total)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#2-filter-by-exact-name","title":"2) Filter by exact name","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nreq = ah_pb2.SymbolParamsManyRequest(symbol_name=\"XAUUSD\")\nres = await acct.symbol_params_many(req)\nprint([p.name for p in res.symbol_infos])  # [\"XAUUSD\"] or []\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_params_many/#3-sorted-by-name-ascending","title":"3) Sorted by name (ascending)","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_account_helper_pb2 as ah_pb2\n\nreq = ah_pb2.SymbolParamsManyRequest(\n    sort_type=ah_pb2.AH_SYMBOL_PARAMS_MANY_SORT_TYPE.AH_PARAMS_MANY_SORT_TYPE_SYMBOL_NAME_ASC,\n    page_number=0,\n    items_per_page=25,\n)\npage = await acct.symbol_params_many(req)\nprint(page.page_number, len(page.symbol_infos))\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/","title":"\u2705 Symbol Select","text":"<p>Request: add or remove a symbol from Market Watch.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbol_select(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolSelect*</code> messages (<code>SymbolSelectRequest</code>, <code>SymbolSelectReply</code>, <code>SymbolSelectData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolSelect(SymbolSelectRequest) \u2192 SymbolSelectReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolSelect(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbol_select(symbol, select, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Ensure a symbol appears in Market Watch\n# (English-only comments per project style)\nres = await acct.symbol_select(\"EURUSD\", True)\nprint(res.success)  # True if operation succeeded\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#method-signature","title":"Method Signature","text":"<pre><code>async def symbol_select(\n    self,\n    symbol: str,\n    select: bool,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolSelectData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Turns a symbol on/off in Market Watch.</li> <li>Why you care. Many terminals stream quotes only for Market Watch symbols; selecting ensures data &amp; UI visibility.</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>select=True</code> \u2192 add to Market Watch; <code>False</code> \u2192 remove.</p> </li> <li>If the symbol does not exist, the server may not select it. Guard with <code>symbol_exist(...)</code> when in doubt.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbol</code> <code>str</code> (required) Symbol to toggle (maps to <code>symbol</code> in request). <code>select</code> <code>bool</code> (required) <code>True</code> \u2192 add to Market Watch; <code>False</code> \u2192 remove from Market Watch. <code>deadline</code> `datetime None` Absolute per-call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper."},{"location":"MT5Account/Symbols_and_Market/symbol_select/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_select/#payload-symbolselectdata","title":"Payload: <code>SymbolSelectData</code>","text":"Field Proto Type Description <code>success</code> <code>bool</code> <code>True</code> if the operation succeeded. <p>Wire reply: <code>SymbolSelectReply { data: SymbolSelectData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Ensure the symbols you care about are visible and streaming.</li> <li>Drive UX (e.g., add/remove from watchlists from within your app).</li> <li>Prep before quote/market book subscriptions.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For batch flows, check existence first (<code>symbol_exist</code>) to avoid noisy ops.</li> <li>Idempotent usage: calling <code>select=True</code> when already selected will still return <code>success=True</code>.</li> </ul> <p>See also: symbol_is_synchronized.md, symbol_name.md, symbols_total.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbol_select/#1-ensure-selected-before-subscribing","title":"1) Ensure selected before subscribing","text":"<pre><code>if (await acct.symbol_exist(\"BTCUSD\")).exists:\n    state = await acct.symbol_select(\"BTCUSD\", True)\n    assert state.success\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#2-remove-from-market-watch","title":"2) Remove from Market Watch","text":"<pre><code>state = await acct.symbol_select(\"USDRUB\", False)\nprint(\"Operation ok?\", state.success)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbol_select/#3-batch-ensure-a-list-is-present","title":"3) Batch ensure a list is present","text":"<pre><code>wanted = [\"EURUSD\", \"GBPUSD\", \"XAUUSD\"]\nfor s in wanted:\n    if (await acct.symbol_exist(s)).exists:\n        ok = (await acct.symbol_select(s, True)).success\n        if not ok:\n            print(\"Failed to select:\", s)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/","title":"\u2705 Symbols Total","text":"<p>Request: get the total number of symbols on the server, with an option to count only Market Watch (selected) symbols.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>symbols_total(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2.py</code> \u2014 <code>SymbolsTotal*</code> messages (<code>SymbolsTotalRequest</code>, <code>SymbolsTotalReply</code>, <code>SymbolsTotalData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_market_info_pb2_grpc.py</code> \u2014 service stub <code>MarketInfoStub</code></li> </ul> <p>Note (verified): <code>SymbolsTotal*</code> exist only in <code>mt5_term_api_market_info_pb2.py</code>. The request field is <code>mode: bool</code>; the reply data has <code>total: int32</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.MarketInfo</code></li> <li>Method: <code>SymbolsTotal(SymbolsTotalRequest) \u2192 SymbolsTotalReply</code></li> <li>Low-level client: <code>MarketInfoStub.SymbolsTotal(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.symbols_total(selected_only, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Count only symbols that are in Market Watch\nfrom MetaRpcMT5 import mt5_term_api_market_info_pb2 as mi_pb2\n\ntotal = await acct.symbols_total(selected_only=True)\nprint(total.total)  # integer count\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#method-signature","title":"Method Signature","text":"<pre><code>async def symbols_total(\n    self,\n    selected_only: bool,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; market_info_pb2.SymbolsTotalData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. A tiny, cheap call that returns how many symbols are available.</li> <li>Why you care. Useful for sanity checks, monitoring, and UI decisions (e.g., pagination, lazy loading).</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>selected_only=True</code> counts only the symbols in Market Watch. <code>False</code> counts all known symbols.</p> </li> <li>The SDK returns <code>.data</code> from the reply; you\u2019ll get a <code>SymbolsTotalData</code> object with a single <code>total</code> field.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>selected_only</code> <code>bool</code> (required) <code>True</code> \u2192 count only Market Watch; <code>False</code> \u2192 all. <code>deadline</code> `datetime None` Absolute per-call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper."},{"location":"MT5Account/Symbols_and_Market/symbols_total/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/symbols_total/#payload-symbolstotaldata","title":"Payload: <code>SymbolsTotalData</code>","text":"Field Proto Type Description <code>total</code> <code>int32</code> The resulting symbol count. <p>Wire reply: <code>SymbolsTotalReply { data: SymbolsTotalData, error: Error? }</code> SDK returns <code>reply.data</code>.</p> <p>See also: symbol_name.md, symbol_exist.md, symbol_select.md</p>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fast check for how big the symbol universe is (all vs. Market Watch).</li> <li>Drive UI/UX (e.g., disable \u201cShow All\u201d if counts are huge).</li> <li>Monitor environment changes (e.g., sudden drop in selected symbols).</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Prefer <code>selected_only=True</code> for user-facing views (keeps counts relevant to what the user actually sees).</li> <li>For inventory/ops dashboards, do both (selected &amp; all) to compare deltas.</li> <li>Wrapper uses <code>execute_with_reconnect(...)</code> \u2014 transient gRPC hiccups are retried under the hood.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/symbols_total/#1-count-all-symbols","title":"1) Count all symbols","text":"<pre><code>all_total = await acct.symbols_total(selected_only=False)\nprint(f\"All symbols: {all_total.total}\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#2-count-selected-market-watch-with-deadline-cancel","title":"2) Count selected (Market Watch) with deadline &amp; cancel","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nsel_total = await acct.symbols_total(\n    selected_only=True,\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=2),\n    cancellation_event=cancel_event,\n)\nprint(f\"Selected symbols: {sel_total.total}\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/symbols_total/#3-compare-selected-vs-all","title":"3) Compare selected vs. all","text":"<pre><code>selected = await acct.symbols_total(True)\nall_ = await acct.symbols_total(False)\nprint(f\"{selected.total}/{all_.total} symbols in Market Watch\")\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/","title":"\u2705 Tick Value With Size","text":"<p>Request: fetch tick value and tick size (plus contract size) for multiple symbols in one call.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>tick_value_with_size(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2.py</code> \u2014 <code>TickValueWithSize*</code> messages (<code>TickValueWithSizeRequest</code>, <code>TickValueWithSizeReply</code>, <code>TickValueWithSizeData</code>, <code>TickSizeSymbol</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_account_helper_pb2_grpc.py</code> \u2014 service stub <code>AccountHelperStub</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.AccountHelper</code></li> <li>Method: <code>TickValueWithSize(TickValueWithSizeRequest) \u2192 TickValueWithSizeReply</code></li> <li>Low-level client: <code>AccountHelperStub.TickValueWithSize(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.tick_value_with_size(symbols, deadline=None, cancellation_event=None)</code></li> </ul>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Get tick value/size/contract size for a batch of symbols\nsymbols = [\"EURUSD\", \"GBPUSD\", \"XAUUSD\"]\nres = await acct.tick_value_with_size(symbols)\n\n# Build a simple dict: name -&gt; (tick_value, tick_size, contract_size)\ninfo = {\n    row.Name: (row.TradeTickValue, row.TradeTickSize, row.TradeContractSize)\n    for row in res.symbol_tick_size_infos\n}\nprint(info)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#method-signature","title":"Method Signature","text":"<pre><code>async def tick_value_with_size(\n    self,\n    symbols: list[str],\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; account_helper_pb2.TickValueWithSizeData\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. Bulk retrieval of tick economics per symbol.</li> <li>Why you care. Avoids N separate calls when populating pricing/risk tables or validating strategy params.</li> <li> <p>Mind the traps.</p> </li> <li> <p>The request expects symbol names; unknown symbols will simply return no entry in the output list.</p> </li> <li>The wrapper returns <code>reply.data</code> \u2192 you get a <code>TickValueWithSizeData</code> with a list of rows.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>symbols</code> <code>list[str]</code> (required) List of symbol names (maps to request.<code>symbol_names[]</code>). <code>deadline</code> `datetime None` Absolute per\u2011call deadline \u2192 converted to timeout. <code>cancellation_event</code> `asyncio.Event None` Cooperative cancel for the retry wrapper. <p>Request message: <code>TickValueWithSizeRequest { symbol_names: repeated string }</code></p>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#payload-tickvaluewithsizedata","title":"Payload: <code>TickValueWithSizeData</code>","text":"Field Proto Type Description <code>symbol_tick_size_infos</code> <code>repeated TickSizeSymbol</code> Per\u2011symbol tick metrics rows."},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#ticksizesymbol","title":"<code>TickSizeSymbol</code>","text":"<p>Field names per pb (PascalCase):</p> Field Proto Type Meaning <code>Index</code> <code>int32</code> Row index (server-provided ordering). <code>Name</code> <code>string</code> Symbol name. <code>TradeTickValue</code> <code>double</code> Tick value (account currency). <code>TradeTickValueProfit</code> <code>double</code> Tick value used for profit calc (if distinct). <code>TradeTickValueLoss</code> <code>double</code> Tick value used for loss calc (if distinct). <code>TradeTickSize</code> <code>double</code> Price increment per tick. <code>TradeContractSize</code> <code>double</code> Contract size. <p>Wire reply: <code>TickValueWithSizeReply { data: TickValueWithSizeData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Populate pricing/lot calculators and risk dashboards.</li> <li>Precompute pip value and lot value per symbol for UI/strategies.</li> <li>Validate broker settings across a bulk symbol list.</li> </ul>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>If you need just one symbol, you can still call this with a single\u2011item list.</li> <li>Combine with <code>symbol_exist</code> and <code>symbol_is_synchronized</code> to ensure data readiness.</li> </ul> <p>See also: symbol_params_many.md, symbol_info_double.md, order_calc_margin.md</p>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#1-batch-calculate-perlot-pip-value-table","title":"1) Batch calculate per\u2011lot pip value table","text":"<pre><code># English-only comments per project style\nrows = await acct.tick_value_with_size([\"EURUSD\",\"GBPUSD\",\"XAUUSD\"])  \nfor r in rows.symbol_tick_size_infos:\n    print(r.Name, r.TradeTickValue, r.TradeTickSize, r.TradeContractSize)\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#2-with-deadline-cancellation","title":"2) With deadline &amp; cancellation","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta, timezone\n\ncancel_event = asyncio.Event()\nrows = await acct.tick_value_with_size(\n    [\"BTCUSD\", \"US500.cash\"],\n    deadline=datetime.now(timezone.utc) + timedelta(seconds=3),\n    cancellation_event=cancel_event,\n)\nprint(len(rows.symbol_tick_size_infos))\n</code></pre>"},{"location":"MT5Account/Symbols_and_Market/tick_value_with_size/#3-build-a-dict-for-quick-lookups","title":"3) Build a dict for quick lookups","text":"<pre><code>rows = await acct.tick_value_with_size([\"EURUSD\",\"XAUUSD\"])\nby_name = {r.Name: r for r in rows.symbol_tick_size_infos}\nprint(by_name[\"EURUSD\"].TradeTickValue)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/","title":"MT5Account \u00b7 Trading Operations \u2014 Overview","text":"<p>Quick map of the trading ops APIs: send/modify/close orders, pre\u2011flight checks, and margin calc. Use this page to pick the right call fast.</p>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/#what-lives-here","title":"\ud83d\udcc1 What lives here","text":"<ul> <li>order_send \u2014 place market or pending orders; returns deal/order IDs &amp; return code.</li> <li>order_modify \u2014 edit SL/TP, pending price, expiration, stop\u2011limit trigger.</li> <li>order_close \u2014 close a position (full/partial) or cancel a pending order.</li> <li>order_check \u2014 dry\u2011run a trade request \u2192 return code + projected margins.</li> <li>order_calc_margin \u2014 compute required margin for a hypothetical order.</li> </ul>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/#plain-english","title":"\ud83e\udded Plain English","text":"<ul> <li>order_send \u2192 the \u201cplace it\u201d button.</li> <li>order_modify \u2192 the \u201cedit ticket\u201d wrench.</li> <li>order_close \u2192 the \u201cexit/cancel\u201d switch.</li> <li>order_check \u2192 the \u201cpreflight\u201d: will it pass? how much margin after?</li> <li>order_calc_margin \u2192 the \u201cwhat\u2011if margin\u201d calculator for a single order.</li> </ul> <p>Rule of thumb: need to know before you place \u2192 <code>order_check</code> / <code>order_calc_margin</code>. Ready to act \u2192 <code>order_send</code> / <code>order_modify</code> / <code>order_close</code>.</p>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/#quick-choose","title":"Quick choose","text":"If you need\u2026 Use Returns Key inputs (enums) Place market/pending order <code>order_send</code> <code>OrderSendData</code> <code>symbol</code>, <code>operation:TMT5_ENUM_ORDER_TYPE</code>, <code>volume</code>, <code>price</code>, <code>slippage</code>, <code>SL/TP</code>, <code>expiration_time_type:TMT5_ENUM_ORDER_TYPE_TIME</code>, <code>expiration</code> Edit SL/TP, price, expiration, stop\u2011limit <code>order_modify</code> <code>OrderModifyData</code> <code>ticket</code>, <code>stop_loss</code>, <code>take_profit</code>, <code>price</code>, <code>stop_limit</code>, <code>expiration_time_type</code>, <code>expiration</code> Close position / cancel pending <code>order_close</code> <code>OrderCloseData</code> <code>ticket</code>, <code>volume</code> (optional), <code>price</code> (0.0 \u2192 market), <code>slippage</code>, <code>comment</code> Pre\u2011flight: return code &amp; margins <code>order_check</code> <code>OrderCheckData</code> <code>MrpcMqlTradeRequest{ action:MRPC_ENUM_TRADE_REQUEST_ACTIONS, order_type:ENUM_ORDER_TYPE_TF, symbol, volume, price, deviation, type_filling, type_time, expiration }</code> Required margin for a hypothetical order <code>order_calc_margin</code> <code>OrderCalcMarginData</code> <code>order_type:ENUM_ORDER_TYPE_TF</code>, <code>symbol</code>, <code>volume</code>, <code>price</code>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/#crossrefs-gotchas","title":"\u274c Cross\u2011refs &amp; gotchas","text":"<ul> <li>Market vs pending. Market ops usually use <code>price=0.0</code> + <code>slippage</code>. Pending ops require a price (and <code>stop_limit</code> for *_STOP_LIMIT).</li> <li>UTC timestamps for expirations. Choose <code>*_TIME_*</code> enums deliberately (GTC/DAY/SPECIFIED/SPECIFIED_DAY).</li> <li>Filling modes matter (FOK/IOC/RETURN/BOC) in <code>order_send</code> and <code>order_check</code> \u2014 brokers differ.</li> <li>Return codes. All trading ops return numeric + string codes; render user\u2011friendly messages in UI.</li> <li>For partial closes, ensure lot step/min via symbol params before calling <code>order_close</code>.</li> </ul>"},{"location":"MT5Account/Trading_Operations/TradingOperations_Overview/#minimal-snippets","title":"\ud83d\udfe2 Minimal snippets","text":"<pre><code># order_send \u2014 market BUY 0.10 with slippage\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\nreq = th_pb2.OrderSendRequest(symbol=\"EURUSD\", operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_BUY, volume=0.10, price=0.0, slippage=20, expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC)\nres = await acct.order_send(req); print(res.deal, res.returned_string_code)\n</code></pre> <pre><code># order_modify \u2014 adjust SL/TP\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\nreq = th_pb2.OrderModifyRequest(ticket=1234567890, stop_loss=1.07200, take_profit=1.07800, expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC)\nprint((await acct.order_modify(req)).returned_string_code)\n</code></pre> <pre><code># order_close \u2014 partial close at market\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\nreq = th_pb2.OrderCloseRequest(ticket=1234567890, volume=0.05, price=0.0, slippage=15)\nprint((await acct.order_close(req)).deal)\n</code></pre> <pre><code># order_check \u2014 preflight for BUY_LIMIT\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\nrq = tf_pb2.MrpcMqlTradeRequest(action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_PENDING, order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY_LIMIT, symbol=\"XAUUSD\", volume=0.10, price=2300.0)\nprint((await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))).mql_trade_check_result.margin)\n</code></pre> <pre><code># order_calc_margin \u2014 what-if margin for SELL @ market\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\nreq = tf_pb2.OrderCalcMarginRequest(order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_SELL, symbol=\"BTCUSD\", volume=0.02, price=0.0)\nprint((await acct.order_calc_margin(req)).margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/","title":"\u2705 Order Calc Margin","text":"<p>Request: calculate the required margin for a hypothetical order (market or pending) \u2014 without placing it.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_calc_margin(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trade_functions_pb2.py</code> \u2014 <code>OrderCalcMargin*</code> messages (<code>OrderCalcMarginRequest</code>, <code>OrderCalcMarginReply</code>, <code>OrderCalcMarginData</code>) and enum <code>ENUM_ORDER_TYPE_TF</code></li> <li><code>MetaRpcMT5/mt5_term_api_trade_functions_pb2_grpc.py</code> \u2014 service stub <code>TradeFunctionsStub</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradeFunctions</code></li> <li>Method: <code>OrderCalcMargin(OrderCalcMarginRequest) \u2192 OrderCalcMarginReply</code></li> <li>Low-level client: <code>TradeFunctionsStub.OrderCalcMargin(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_calc_margin(request, deadline=None, cancellation_event=None) \u2192 OrderCalcMarginData</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: margin for BUY 0.10 @ market\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\n\nreq = tf_pb2.OrderCalcMarginRequest(\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY,\n    symbol=\"EURUSD\",\n    volume=0.10,\n    open_price=0.0,  # market: server uses current price\n)\nres = await acct.order_calc_margin(req)\nprint(res.margin)\n</code></pre> <pre><code># Pending BUY_LIMIT at a specific price\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\n\nreq = tf_pb2.OrderCalcMarginRequest(\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY_LIMIT,\n    symbol=\"XAUUSD\",\n    volume=0.05,\n    open_price=2300.00,\n)\nres = await acct.order_calc_margin(req)\nprint(\"required margin:\", res.margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#method-signature","title":"Method Signature","text":"<pre><code>async def order_calc_margin(\n    self,\n    request: trade_functions_pb2.OrderCalcMarginRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trade_functions_pb2.OrderCalcMarginData\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What is it. Server\u2011side calculation of required margin for an order you could place.</li> <li>Why. Show margin requirements in order tickets and in strategies before sending.</li> <li> <p>Be careful.</p> </li> <li> <p><code>order_type</code> controls direction &amp; kind (BUY/SELL/LIMIT/STOP/STOP_LIMIT/etc.).</p> </li> <li>For market scenarios, <code>open_price=0.0</code> is fine \u2014 server uses current price; for pendings, pass the entry price.</li> <li>The result is sensitive to account type, leverage, symbol settings, and current quotes.</li> <li>When to call. Right before <code>OrderSend</code>, or when a user edits volume or price in the ticket.</li> <li>Quick check. You should get <code>OrderCalcMarginData</code> with a single <code>margin: double</code>.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#input","title":"\ud83d\udd3d Input","text":""},{"location":"MT5Account/Trading_Operations/order_calc_margin/#message-ordercalcmarginrequest","title":"Message: <code>OrderCalcMarginRequest</code>","text":"# Field Proto Type Required Description 1 <code>order_type</code> <code>enum ENUM_ORDER_TYPE_TF</code> yes BUY/SELL/_LIMIT/_STOP/*_STOP_LIMIT/etc. 2 <code>symbol</code> <code>string</code> yes Symbol name. 3 <code>volume</code> <code>double</code> yes Volume in lots. 4 <code>open_price</code> <code>double</code> yes <code>0.0</code> for market; entry price for pending orders. <p>Request message: <code>OrderCalcMarginRequest { order_type, symbol, volume, open_price }</code></p>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Trading_Operations/order_calc_margin/#message-ordercalcmargindata","title":"Message: <code>OrderCalcMarginData</code>","text":"# Field Proto Type Description 1 <code>margin</code> <code>double</code> Required margin for the given request. <p>Wire reply: <code>OrderCalcMarginReply { data: OrderCalcMarginData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#enum-enum_order_type_tf","title":"Enum: <code>ENUM_ORDER_TYPE_TF</code>","text":"Number Value 0 <code>ORDER_TYPE_TF_BUY</code> 1 <code>ORDER_TYPE_TF_SELL</code> 2 <code>ORDER_TYPE_TF_BUY_LIMIT</code> 3 <code>ORDER_TYPE_TF_SELL_LIMIT</code> 4 <code>ORDER_TYPE_TF_BUY_STOP</code> 5 <code>ORDER_TYPE_TF_SELL_STOP</code> 6 <code>ORDER_TYPE_TF_BUY_STOP_LIMIT</code> 7 <code>ORDER_TYPE_TF_SELL_STOP_LIMIT</code> 8 <code>ORDER_TYPE_TF_CLOSE_BY</code>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Display margin requirements in order tickets.</li> <li>Validate user volumes against available free margin.</li> <li>What\u2011if analysis in risk dashboards.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For detailed feasibility (free margin after / retcode), see <code>OrderCheck</code>.</li> <li>Combine with <code>symbol_info_margin_rate</code> and <code>symbol_info_double(SYMBOL_TRADE_CONTRACT_SIZE)</code> for cross\u2011checks.</li> <li>Market vs pending pricing can change results \u2014 recalc after price edits.</li> </ul> <p>See also: symbol_info_margin_rate.md, order_check.md, symbol_info_double.md</p>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Trading_Operations/order_calc_margin/#1-quick-ui-ticket-calculation","title":"1) Quick UI ticket calculation","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\n\nreq = tf_pb2.OrderCalcMarginRequest(\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_SELL,\n    symbol=\"BTCUSD\",\n    volume=0.02,\n    open_price=0.0,\n)\nprint((await acct.order_calc_margin(req)).margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#2-pending-limit-at-user-price","title":"2) Pending limit at user price","text":"<pre><code>req = tf_pb2.OrderCalcMarginRequest(\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_SELL_LIMIT,\n    symbol=\"EURUSD\",\n    volume=1.0,\n    open_price=1.12345,\n)\nres = await acct.order_calc_margin(req)\nprint(res.margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_calc_margin/#3-refresh-on-every-change-volumeprice","title":"3) Refresh on every change (volume/price)","text":"<pre><code>async def calc(symbol, order_type, volume, price):\n    from MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\n    req = tf_pb2.OrderCalcMarginRequest(order_type=order_type, symbol=symbol, volume=volume, open_price=price)\n    return (await acct.order_calc_margin(req)).margin\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_check/","title":"\u2705 Order Check","text":"<p>Request: dry\u2011run a trade request (market/pending/modify/close_by) and get required margin, free margin after, and a return code \u2014 without actually placing anything.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_check(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trade_functions_pb2.py</code> \u2014 <code>OrderCheck*</code>, <code>MrpcMqlTradeRequest</code>, <code>MrpcMqlTradeCheckResult</code>, enums: <code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>, <code>ENUM_ORDER_TYPE_TF</code>, <code>MRPC_ENUM_ORDER_TYPE_FILLING</code>, <code>MRPC_ENUM_ORDER_TYPE_TIME</code></li> <li><code>MetaRpcMT5/mt5_term_api_trade_functions_pb2_grpc.py</code> \u2014 service stub <code>TradeFunctionsStub</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_check/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradeFunctions</code></li> <li>Method: <code>OrderCheck(OrderCheckRequest) \u2192 OrderCheckReply</code></li> <li>Low-level client: <code>TradeFunctionsStub.OrderCheck(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_check(request, deadline=None, cancellation_event=None) \u2192 OrderCheckData</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_check/#method-signature","title":"Method Signature","text":"<pre><code>async def order_check(\n    self,\n    request: trade_functions_pb2.OrderCheckRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trade_functions_pb2.OrderCheckData\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_check/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What it is. Server\u2011side pre\u2011validation of a trade request (like MT5 <code>OrderCheck</code>): returns margins &amp; a code.</li> <li>Why. Use it to fail fast in UI/strategies before <code>OrderSend</code> \u2014 avoid rejections and needless noise.</li> <li> <p>Be careful.</p> </li> <li> <p>You must build <code>MrpcMqlTradeRequest</code> correctly (action/type/volume/price/SL/TP/filling/time/etc.).</p> </li> <li>It does not place or modify anything \u2014 numbers are estimates for current market state.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_check/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal: check if a market BUY 0.10 is ok, with 20pt deviation\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\nfrom google.protobuf.timestamp_pb2 import Timestamp\n\nrq = tf_pb2.MrpcMqlTradeRequest(\n    action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_DEAL,\n    symbol=\"EURUSD\",\n    volume=0.10,\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY,\n    price=0.0,              # market; server will use current price\n    deviation=20,\n    type_filling=tf_pb2.MRPC_ENUM_ORDER_TYPE_FILLING.ORDER_FILLING_IOC,\n    type_time=tf_pb2.MRPC_ENUM_ORDER_TYPE_TIME.ORDER_TIME_GTC,\n    comment=\"preflight\",\n)\nres = await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))\nchk = res.mql_trade_check_result\nprint(chk.retcode, chk.margin, chk.free_margin)  # numeric code + margins\n</code></pre> <pre><code># Pending BUY_LIMIT with expiration today (SPECIFIED_DAY)\nfrom datetime import datetime, timezone\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\n\nexp = Timestamp(); exp.FromDatetime(datetime.now(timezone.utc).replace(hour=21, minute=0, second=0, microsecond=0))\n\nrq = tf_pb2.MrpcMqlTradeRequest(\n    action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_PENDING,\n    symbol=\"XAUUSD\",\n    volume=0.10,\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY_LIMIT,\n    price=2300.00,\n    stop_loss=2290.00,\n    take_profit=2320.00,\n    type_time=tf_pb2.MRPC_ENUM_ORDER_TYPE_TIME.ORDER_TIME_SPECIFIED_DAY,\n    expiration=exp,\n    comment=\"limit preflight\",\n)\nres = await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))\nprint(res.mql_trade_check_result.retcode)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_check/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Description <code>request</code> <code>OrderCheckRequest</code> (required) Wraps your <code>MrpcMqlTradeRequest</code> (see below). <code>deadline</code> <code>datetime \\| None</code> Absolute per\u2011call deadline \u2192 timeout. <code>cancellation_event</code> <code>asyncio.Event \\| None</code> Cooperative cancel for the retry wrapper. <p>Request message: <code>OrderCheckRequest { mql_trade_request: MrpcMqlTradeRequest }</code></p>"},{"location":"MT5Account/Trading_Operations/order_check/#message-mrpcmqltraderequest","title":"Message: <code>MrpcMqlTradeRequest</code>","text":"# Field Proto Type Notes 1 <code>action</code> <code>enum MRPC_ENUM_TRADE_REQUEST_ACTIONS</code> DEAL/PENDING/SLTP/MODIFY/REMOVE/CLOSE_BY 2 <code>magic</code> <code>uint64</code> Expert Advisor magic id 3 <code>order</code> <code>uint64</code> Order ticket (when applicable) 4 <code>symbol</code> <code>string</code> Symbol name 5 <code>volume</code> <code>double</code> Lots 6 <code>price</code> <code>double</code> Entry/close price; <code>0.0</code> for market 7 <code>stop_limit</code> <code>double</code> Stop\u2011limit trigger (for *_STOP_LIMIT) 8 <code>stop_loss</code> <code>double</code> SL 9 <code>take_profit</code> <code>double</code> TP 10 <code>deviation</code> <code>uint32</code> Max deviation in points (market ops) 11 <code>order_type</code> <code>enum ENUM_ORDER_TYPE_TF</code> BUY/SELL/LIMIT/STOP/STOP_LIMIT/CLOSE_BY 12 <code>type_filling</code> <code>enum MRPC_ENUM_ORDER_TYPE_FILLING</code> FOK/IOC/RETURN/BOC 13 <code>type_time</code> <code>enum MRPC_ENUM_ORDER_TYPE_TIME</code> GTC/DAY/SPECIFIED/SPECIFIED_DAY 14 <code>expiration</code> <code>google.protobuf.Timestamp</code> Expiration (UTC) 15 <code>comment</code> <code>string</code> Optional note 16 <code>position</code> <code>uint64</code> Position ticket (when applicable) 17 <code>position_by</code> <code>uint64</code> Close\u2011by ticket"},{"location":"MT5Account/Trading_Operations/order_check/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Trading_Operations/order_check/#payload-ordercheckdata","title":"Payload: <code>OrderCheckData</code>","text":"Field Proto Type Description <code>mql_trade_check_result</code> <code>MrpcMqlTradeCheckResult</code> Result bundle below"},{"location":"MT5Account/Trading_Operations/order_check/#message-mrpcmqltradecheckresult","title":"Message: <code>MrpcMqlTradeCheckResult</code>","text":"# Field Proto Type Description 1 <code>retcode</code> <code>uint32</code> Numeric return code (0 = ok; non\u2011zero \u2192 error/warning). 2 <code>balance_after_deal</code> <code>double</code> Balance projected after execution. 3 <code>equity_after_deal</code> <code>double</code> Equity projected after execution. 4 <code>profit</code> <code>double</code> Expected P/L (may be 0 for opens). 5 <code>margin</code> <code>double</code> Required margin for this request. 6 <code>free_margin</code> <code>double</code> Free margin projected after execution. 7 <code>margin_level</code> <code>double</code> Margin level % after execution. 8 <code>comment</code> <code>string</code> Text explanation from server. <p>Wire reply: <code>OrderCheckReply { data: OrderCheckData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Trading_Operations/order_check/#enums","title":"Enums","text":""},{"location":"MT5Account/Trading_Operations/order_check/#mrpc_enum_trade_request_actions","title":"<code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>","text":"Number Value Meaning 0 <code>TRADE_ACTION_DEAL</code> Market operation (open/close). 1 <code>TRADE_ACTION_PENDING</code> Place/alter pending order. 2 <code>TRADE_ACTION_SLTP</code> SL/TP change. 3 <code>TRADE_ACTION_MODIFY</code> Generic modify. 4 <code>TRADE_ACTION_REMOVE</code> Remove pending. 5 <code>TRADE_ACTION_CLOSE_BY</code> Close by opposite position."},{"location":"MT5Account/Trading_Operations/order_check/#enum_order_type_tf","title":"<code>ENUM_ORDER_TYPE_TF</code>","text":"Number Value 0 <code>ORDER_TYPE_TF_BUY</code> 1 <code>ORDER_TYPE_TF_SELL</code> 2 <code>ORDER_TYPE_TF_BUY_LIMIT</code> 3 <code>ORDER_TYPE_TF_SELL_LIMIT</code> 4 <code>ORDER_TYPE_TF_BUY_STOP</code> 5 <code>ORDER_TYPE_TF_SELL_STOP</code> 6 <code>ORDER_TYPE_TF_BUY_STOP_LIMIT</code> 7 <code>ORDER_TYPE_TF_SELL_STOP_LIMIT</code> 8 <code>ORDER_TYPE_TF_CLOSE_BY</code>"},{"location":"MT5Account/Trading_Operations/order_check/#mrpc_enum_order_type_filling","title":"<code>MRPC_ENUM_ORDER_TYPE_FILLING</code>","text":"Number Value 0 <code>ORDER_FILLING_FOK</code> 1 <code>ORDER_FILLING_IOC</code> 2 <code>ORDER_FILLING_RETURN</code> 3 <code>ORDER_FILLING_BOC</code>"},{"location":"MT5Account/Trading_Operations/order_check/#mrpc_enum_order_type_time","title":"<code>MRPC_ENUM_ORDER_TYPE_TIME</code>","text":"Number Value 0 <code>ORDER_TIME_GTC</code> 1 <code>ORDER_TIME_DAY</code> 2 <code>ORDER_TIME_SPECIFIED</code> 3 <code>ORDER_TIME_SPECIFIED_DAY</code>"},{"location":"MT5Account/Trading_Operations/order_check/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pre\u2011flight validation for OrderSend/OrderModify in UI and algos.</li> <li>Show required margin/free margin after before committing.</li> <li>Explain failures to users via <code>retcode</code> + <code>comment</code>.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_check/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use <code>symbol_info_margin_rate</code>/<code>symbol_info_double(SYMBOL_TRADE_CONTRACT_SIZE)</code> to cross\u2011check expectations.</li> <li>Always set <code>type_filling</code>/<code>type_time</code> deliberately; brokers differ.</li> </ul> <p>See also: order_check.md, order_calc_margin.md, symbol_info_margin_rate.md</p>"},{"location":"MT5Account/Trading_Operations/order_check/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Trading_Operations/order_check/#1-check-partial-close-feasibility","title":"1) Check partial close feasibility","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_trade_functions_pb2 as tf_pb2\nrq = tf_pb2.MrpcMqlTradeRequest(\n    action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_DEAL,\n    symbol=\"EURUSD\",\n    volume=0.05,\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_SELL,  # closing BUY position\n    price=0.0,\n    deviation=15,\n)\nres = await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))\nprint(res.mql_trade_check_result.free_margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_check/#2-validate-sltp-modification","title":"2) Validate SL/TP modification","text":"<pre><code>rq = tf_pb2.MrpcMqlTradeRequest(\n    action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_SLTP,\n    symbol=\"XAUUSD\",\n    stop_loss=2288.0,\n    take_profit=2325.0,\n)\nres = await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))\nprint(res.mql_trade_check_result.retcode, res.mql_trade_check_result.comment)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_check/#3-pending-stop_limit-with-stop-trigger","title":"3) Pending STOP_LIMIT with stop trigger","text":"<pre><code>rq = tf_pb2.MrpcMqlTradeRequest(\n    action=tf_pb2.MRPC_ENUM_TRADE_REQUEST_ACTIONS.TRADE_ACTION_PENDING,\n    symbol=\"BTCUSD\",\n    volume=0.03,\n    order_type=tf_pb2.ENUM_ORDER_TYPE_TF.ORDER_TYPE_TF_BUY_STOP_LIMIT,\n    price=65000.0,          # limit price\n    stop_limit=64950.0,     # stop trigger\n)\nres = await acct.order_check(tf_pb2.OrderCheckRequest(mql_trade_request=rq))\nprint(res.mql_trade_check_result.margin)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_close/","title":"\u2705 Order Close","text":"<p>Request: close a position (full or partial) or cancel a pending order by ticket.</p> <p>Source files (SDK):</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_close(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2.py</code> \u2014 <code>OrderClose*</code> messages (<code>OrderCloseRequest</code>, <code>OrderCloseReply</code>, <code>OrderCloseData</code>)</li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2_grpc.py</code> \u2014 service stub <code>TradingHelperStub</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_close/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradingHelper</code></li> <li>Method: <code>OrderClose(OrderCloseRequest) \u2192 OrderCloseReply</code></li> <li>Low-level client: <code>TradingHelperStub.OrderClose(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_close(request, deadline=None, cancellation_event=None) \u2192 OrderCloseData</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_close/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Minimal canonical example: close 0.10 lots at market with max 20pt slippage\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderCloseRequest(\n    ticket=1234567890,\n    volume=0.10,      # partial or full size\n    price=0.0,        # market close \u2192 server uses current price\n    slippage=20,      # max deviation in points\n    comment=\"SDK close\",\n    expert_id=1001,\n)\nres = await acct.order_close(req)\nprint(res.deal, res.returned_string_code)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_close/#method-signature","title":"Method Signature","text":"<pre><code>async def order_close(\n    self,\n    request: trading_helper_pb2.OrderCloseRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trading_helper_pb2.OrderCloseData\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_close/#just-about-the-main-thing","title":"\ud83d\udcac Just about the main thing","text":"<ul> <li>What is it. Closes an open position (optionally partial) or cancels a pending order by its ticket.</li> <li>Why. One RPC to execute exits from strategies/UI with precise control over volume, slippage, and price.</li> <li> <p>Be careful.</p> </li> <li> <p><code>ticket</code> must point to an existing position or pending order.</p> </li> <li>For market closes, set <code>price=0.0</code> and use <code>slippage</code> to cap deviation.</li> <li>For pending orders, many brokers ignore <code>volume</code>/<code>price</code>; passing just the <code>ticket</code> cancels it.</li> <li>Times returned in the reply (if any) are UTC.</li> <li>When to call. Any time you need to exit or cancel without crafting a new order.</li> <li>Quick check. You should get <code>OrderCloseData</code> with deal/order IDs and a return code; non\u2011zero error codes mean failure.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_close/#input","title":"\ud83d\udd3d Input","text":""},{"location":"MT5Account/Trading_Operations/order_close/#message-ordercloserequest","title":"Message: <code>OrderCloseRequest</code>","text":"# Field Proto Type Required Description 1 <code>ticket</code> <code>uint64</code> yes Ticket of the position or pending order. 2 <code>volume</code> <code>double</code> no Lots to close (ignored for many pending cancels). 3 <code>price</code> <code>double</code> no Close price (use <code>0.0</code> for market). 4 <code>slippage</code> <code>uint64</code> no Max deviation in points for market close. 5 <code>comment</code> <code>string</code> no Optional user/broker comment. 6 <code>expert_id</code> <code>uint64</code> no Magic/EA identifier. <p>Request message: <code>OrderCloseRequest { ticket, volume, price, slippage, comment, expert_id }</code></p>"},{"location":"MT5Account/Trading_Operations/order_close/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Trading_Operations/order_close/#message-orderclosedata","title":"Message: <code>OrderCloseData</code>","text":"# Field Proto Type Description 1 <code>returned_code</code> <code>uint32</code> Server return code (numeric). 2 <code>deal</code> <code>uint64</code> Deal ticket generated by the close (if any). 3 <code>order</code> <code>uint64</code> Order ticket affected/cancelled. 4 <code>volume</code> <code>double</code> Closed volume. 5 <code>price</code> <code>double</code> Execution price. 6 <code>bid</code> <code>double</code> Bid at processing time. 7 <code>ask</code> <code>double</code> Ask at processing time. 8 <code>comment</code> <code>string</code> Server comment. 9 <code>request_id</code> <code>uint32</code> Request identifier. 10 <code>ret_code_external</code> <code>int32</code> External/bridge code if provided. 11 <code>returned_string_code</code> <code>string</code> Return code (string). 12 <code>returned_code_description</code> <code>string</code> Human\u2011readable description. <p>Wire reply: <code>OrderCloseReply { data: OrderCloseData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Trading_Operations/order_close/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Execute exits (full/partial) or cancel pendings programmatically.</li> <li>Provide clear UI feedback via deal/order IDs and return codes.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_close/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Validate min lot and step via <code>symbol_params_many</code> or <code>symbol_info_double(SYMBOL_TRADE_TICK_SIZE)</code> before partial close.</li> <li>Use <code>symbol_info_integer(SYMBOL_TRADE_FREEZE_LEVEL)</code> to avoid freeze violations when closing near price.</li> <li>For hedged accounts, partial closes reduce position volume; for netting, close offsets existing exposure.</li> </ul> <p>See also: order_send.md, on_trade.md, opened_orders.md</p>"},{"location":"MT5Account/Trading_Operations/order_close/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Trading_Operations/order_close/#1-full-close-at-market","title":"1) Full close at market","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderCloseRequest(ticket=1234567890, volume=0.0, price=0.0, slippage=20)\nres = await acct.order_close(req)\nprint(res.deal, res.returned_string_code)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_close/#2-partial-close-005-lots","title":"2) Partial close 0.05 lots","text":"<pre><code>req = th_pb2.OrderCloseRequest(ticket=1234567890, volume=0.05, price=0.0, slippage=15)\nres = await acct.order_close(req)\nprint(\"closed:\", res.volume)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_close/#3-cancel-a-pending-order-by-ticket","title":"3) Cancel a pending order by ticket","text":"<pre><code>req = th_pb2.OrderCloseRequest(ticket=22334455)  # volume/price typically ignored\nres = await acct.order_close(req)\nprint(res.order, res.returned_code_description)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_modify/","title":"\u2705 Order Modify","text":"<p>Request: modify an existing order/position (SL/TP, price, expiration, stop\u2011limit trigger).</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_modify(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2.py</code> \u2014 <code>OrderModify*</code> messages (<code>OrderModifyRequest</code>, <code>OrderModifyReply</code>, <code>OrderModifyData</code>) and enum <code>TMT5_ENUM_ORDER_TYPE_TIME</code></li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2_grpc.py</code> \u2014 service stub <code>TradingHelperStub</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_modify/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradingHelper</code></li> <li>Method: <code>OrderModify(OrderModifyRequest) \u2192 OrderModifyReply</code></li> <li>Low-level client: <code>TradingHelperStub.OrderModify(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_modify(request, deadline=None, cancellation_event=None)</code> \u2192 returns <code>OrderModifyData</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_modify/#method-signature","title":"Method Signature","text":"<pre><code>async def order_modify(\n    self,\n    request: trading_helper_pb2.OrderModifyRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trading_helper_pb2.OrderModifyData\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_modify/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. One call to adjust SL/TP, pending price, expiration (GTC/DAY/SPECIFIED/SPECIFIED_DAY), and stop\u2011limit trigger.</li> <li>Why you care. Lightweight edit without cancel+recreate; returns updated order/deal references and server return code.</li> <li> <p>Mind the traps.</p> </li> <li> <p><code>ticket</code> must reference the target order or position.</p> </li> <li>Pending orders: set a non\u2011zero <code>price</code> when changing the entry price.</li> <li>For <code>*_STOP_LIMIT</code> use <code>stop_limit</code> to set the stop trigger</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_modify/#input","title":"\ud83d\udd3d Input","text":""},{"location":"MT5Account/Trading_Operations/order_modify/#message-ordermodifyrequest","title":"Message: <code>OrderModifyRequest</code>","text":"# Field Proto Type Required Description 1 <code>ticket</code> <code>uint64</code> yes Ticket of order/position to modify. 2 <code>stop_loss</code> <code>double</code> no New SL price (0.0 to keep unchanged). 3 <code>take_profit</code> <code>double</code> no New TP price (0.0 to keep unchanged). 4 <code>price</code> <code>double</code> no New price for pending orders; 0.0 to keep. 5 <code>expiration_time_type</code> <code>enum TMT5_ENUM_ORDER_TYPE_TIME</code> no GTC/DAY/SPECIFIED/SPECIFIED_DAY. 6 <code>expiration_time</code> <code>google.protobuf.Timestamp</code> when set Expiration instant (UTC). 8 <code>stop_limit</code> <code>double</code> no Stop trigger for STOP_LIMIT orders. <p>Request message: <code>OrderModifyRequest { ticket, stop_loss, take_profit, price, expiration_time_type, expiration_time, stop_limit }</code></p>"},{"location":"MT5Account/Trading_Operations/order_modify/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Trading_Operations/order_modify/#message-ordermodifydata","title":"Message: <code>OrderModifyData</code>","text":"# Field Proto Type Description 1 <code>returned_code</code> <code>uint32</code> Server return code (numeric). 2 <code>deal</code> <code>uint64</code> Deal ticket (if a deal was generated). 3 <code>order</code> <code>uint64</code> Order ticket (affected). 4 <code>volume</code> <code>double</code> Affected volume. 5 <code>price</code> <code>double</code> Effective price used. 6 <code>bid</code> <code>double</code> Bid at processing time. 7 <code>ask</code> <code>double</code> Ask at processing time. 8 <code>comment</code> <code>string</code> Server comment. 9 <code>request_id</code> <code>uint32</code> Request identifier. 10 <code>ret_code_external</code> <code>int32</code> External/bridge code if provided. 11 <code>returned_string_code</code> <code>string</code> Return code (string). 12 <code>returned_code_description</code> <code>string</code> Human\u2011readable description of result. <p>Wire reply: <code>OrderModifyReply { data: OrderModifyData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Trading_Operations/order_modify/#enum-tmt5_enum_order_type_time","title":"Enum: <code>TMT5_ENUM_ORDER_TYPE_TIME</code>","text":"Number Value 0 <code>TMT5_ORDER_TIME_GTC</code> 1 <code>TMT5_ORDER_TIME_DAY</code> 2 <code>TMT5_ORDER_TIME_SPECIFIED</code> 3 <code>TMT5_ORDER_TIME_SPECIFIED_DAY</code>"},{"location":"MT5Account/Trading_Operations/order_modify/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Adjust protective levels and pending parameters in place.</li> <li>Drive order\u2011ticket edits in UI with precise return codes and IDs.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_modify/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use <code>symbol_info_integer(SYMBOL_TRADE_STOPS_LEVEL)</code> and freeze levels to validate SL/TP distances before modify.</li> <li>For positions vs pending orders, your UI should adapt fields (no <code>price</code> for market positions).</li> <li>Combine with <code>order_send</code> and <code>order_close</code> for full trade lifecycle.</li> </ul> <p>See also: order_send.md, order_close.md, on_trade_transaction.md</p>"},{"location":"MT5Account/Trading_Operations/order_modify/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Example 1: Only change SL/TP on an existing ticket\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderModifyRequest(\n    ticket=1234567890,\n    stop_loss=1.07200,\n    take_profit=1.07800,\n    price=0.0,  # leave unchanged for market/position\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC,\n)\nres = await acct.order_modify(req)\nprint(res.returned_string_code, res.order)\n</code></pre> <pre><code># Example 2: Modify pending order price and expiration (DAY)\nfrom datetime import datetime, timezone\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nexpire = Timestamp(); expire.FromDatetime(datetime.now(timezone.utc).replace(hour=21, minute=0, second=0, microsecond=0))\n\nreq = th_pb2.OrderModifyRequest(\n    ticket=222333444,\n    price=1.23450,\n    stop_loss=1.23300,\n    take_profit=1.23900,\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_SPECIFIED,\n    expiration_time=expire,\n)\nres = await acct.order_modify(req)\nprint(res.order, res.returned_code_description)\n</code></pre> <pre><code># Example 3: Stop\u2011limit pending order \u2014 adjust stop trigger\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderModifyRequest(\n    ticket=987654321,\n    stop_limit=64950.0,  # stop trigger for *_STOP_LIMIT orders\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC,\n)\nres = await acct.order_modify(req)\nprint(res.returned_code)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_send/","title":"\u2705 Order Send","text":"<p>Request: send a market or pending order to the trading server.</p> <p>Source files:</p> <ul> <li><code>MetaRpcMT5/mt5_account.py</code> \u2014 method <code>order_send(...)</code></li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2.py</code> \u2014 <code>OrderSend*</code> messages (<code>OrderSendRequest</code>, <code>OrderSendReply</code>, <code>OrderSendData</code>) and enums <code>TMT5_ENUM_ORDER_TYPE</code>, <code>TMT5_ENUM_ORDER_TYPE_TIME</code></li> <li><code>MetaRpcMT5/mt5_term_api_trading_helper_pb2_grpc.py</code> \u2014 service stub <code>TradingHelperStub</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_send/#rpc","title":"RPC","text":"<ul> <li>Service: <code>mt5_term_api.TradingHelper</code></li> <li>Method: <code>OrderSend(OrderSendRequest) \u2192 OrderSendReply</code></li> <li>Low-level client: <code>TradingHelperStub.OrderSend(request, metadata, timeout)</code></li> <li>SDK wrapper: <code>MT5Account.order_send(request, deadline=None, cancellation_event=None)</code> \u2192 returns <code>OrderSendData</code></li> </ul>"},{"location":"MT5Account/Trading_Operations/order_send/#code-example","title":"\ud83d\udd17 Code Example","text":"<pre><code># Example 1: Market BUY 0.10 \u2014 max slippage 10 points\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderSendRequest(\n    symbol=\"EURUSD\",\n    operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_BUY,\n    volume=0.10,\n    price=0.0,            # market orders: server will fill at current price\n    slippage=10,          # max price deviation in points\n    stop_loss=0.0,        # set if needed\n    take_profit=0.0,      # set if needed\n    comment=\"SDK demo\",\n    expert_id=0,\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC,\n)\nres = await acct.order_send(req)\nprint(res.returned_code, res.deal, res.order)\n</code></pre> <pre><code># Example 2: Pending BUY_LIMIT with expiration today\nfrom datetime import datetime, timezone, timedelta\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nexp_ts = Timestamp()\nexp_ts.FromDatetime(datetime.now(timezone.utc).replace(hour=21, minute=0, second=0, microsecond=0))\n\nreq = th_pb2.OrderSendRequest(\n    symbol=\"XAUUSD\",\n    operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_BUY_LIMIT,\n    volume=0.10,\n    price=2300.00,            # required for *LIMIT/*STOP orders\n    slippage=0,               # not used for pending orders\n    stop_loss=2290.00,\n    take_profit=2320.00,\n    comment=\"limit until 21:00\",\n    expert_id=42,\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_SPECIFIED_DAY,\n    expiration_time=exp_ts,\n)\nres = await acct.order_send(req)\nprint(res.order, res.returned_string_code)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_send/#method-signature","title":"Method Signature","text":"<pre><code>async def order_send(\n    self,\n    request: trading_helper_pb2.OrderSendRequest,\n    deadline: datetime | None = None,\n    cancellation_event: asyncio.Event | None = None,\n) -&gt; trading_helper_pb2.OrderSendData\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_send/#plain-english","title":"\ud83d\udcac Plain English","text":"<ul> <li>What it is. One call to place market or pending orders (incl. stop\u2011limit).</li> <li>Why you care. Returns a compact confirmation with deal/order IDs and server return code.</li> <li> <p>Mind the traps.</p> </li> <li> <p>For market orders, <code>price</code> can be <code>0.0</code>; server uses current price; <code>slippage</code> limits deviation.</p> </li> <li>For pending orders (<code>*_LIMIT</code>/<code>*_STOP</code>/<code>*_STOP_LIMIT</code>), you must set <code>price</code> (and <code>stop_limit_price</code> for stop\u2011limit).</li> <li><code>expiration_time_type</code> controls GTC/DAY/SPECIFIED/SPECIFIED_DAY; set <code>expiration_time</code> accordingly.</li> <li>All times are UTC (<code>google.protobuf.Timestamp</code>).</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_send/#input","title":"\ud83d\udd3d Input","text":""},{"location":"MT5Account/Trading_Operations/order_send/#message-ordersendrequest","title":"Message: <code>OrderSendRequest</code>","text":"# Field Proto Type Required Description 1 <code>symbol</code> <code>string</code> yes Symbol name. 2 <code>operation</code> <code>enum TMT5_ENUM_ORDER_TYPE</code> yes Order type (see enum). 3 <code>volume</code> <code>double</code> yes Volume in lots. 4 <code>price</code> <code>double</code> market? Price for pending orders; <code>0.0</code> for market. 5 <code>slippage</code> <code>uint64</code> market? Max deviation (points) for market orders. 6 <code>stop_loss</code> <code>double</code> no SL price. 7 <code>take_profit</code> <code>double</code> no TP price. 8 <code>comment</code> <code>string</code> no Client comment. 9 <code>expert_id</code> <code>uint64</code> no Magic/EA ID. 10 <code>stop_limit_price</code> <code>double</code> when SL Price of the stop\u2011limit trigger (for *_STOP_LIMIT). 11 <code>expiration_time_type</code> <code>enum TMT5_ENUM_ORDER_TYPE_TIME</code> yes GTC/DAY/SPECIFIED/SPECIFIED_DAY. 12 <code>expiration_time</code> <code>google.protobuf.Timestamp</code> when set Expiration instant (UTC). <p>Request message: <code>OrderSendRequest { symbol, operation, volume, price, slippage, stop_loss, take_profit, comment, expert_id, stop_limit_price, expiration_time_type, expiration_time }</code></p>"},{"location":"MT5Account/Trading_Operations/order_send/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"MT5Account/Trading_Operations/order_send/#message-ordersenddata","title":"Message: <code>OrderSendData</code>","text":"# Field Proto Type Description 1 <code>returned_code</code> <code>uint32</code> Server return code (numeric). 2 <code>deal</code> <code>uint64</code> Deal ticket (for market fills). 3 <code>order</code> <code>uint64</code> Order ticket (created/placed). 4 <code>volume</code> <code>double</code> Executed or placed volume. 5 <code>price</code> <code>double</code> Executed/placed price. 6 <code>bid</code> <code>double</code> Server bid at processing time. 7 <code>ask</code> <code>double</code> Server ask at processing time. 8 <code>comment</code> <code>string</code> Server comment. 9 <code>request_id</code> <code>uint32</code> Request identifier. 10 <code>ret_code_external</code> <code>int32</code> External/bridge code if provided. 11 <code>returned_string_code</code> <code>string</code> Return code (string). 12 <code>returned_code_description</code> <code>string</code> Human\u2011readable description. <p>Wire reply: <code>OrderSendReply { data: OrderSendData, error: Error? }</code> SDK returns <code>reply.data</code>.</p>"},{"location":"MT5Account/Trading_Operations/order_send/#enum-tmt5_enum_order_type","title":"Enum: <code>TMT5_ENUM_ORDER_TYPE</code>","text":"Number Value 0 <code>TMT5_ORDER_TYPE_BUY</code> 1 <code>TMT5_ORDER_TYPE_SELL</code> 2 <code>TMT5_ORDER_TYPE_BUY_LIMIT</code> 3 <code>TMT5_ORDER_TYPE_SELL_LIMIT</code> 4 <code>TMT5_ORDER_TYPE_BUY_STOP</code> 5 <code>TMT5_ORDER_TYPE_SELL_STOP</code> 6 <code>TMT5_ORDER_TYPE_BUY_STOP_LIMIT</code> 7 <code>TMT5_ORDER_TYPE_SELL_STOP_LIMIT</code> 8 <code>TMT5_ORDER_TYPE_CLOSE_BY</code>"},{"location":"MT5Account/Trading_Operations/order_send/#enum-tmt5_enum_order_type_time","title":"Enum: <code>TMT5_ENUM_ORDER_TYPE_TIME</code>","text":"Number Value 0 <code>TMT5_ORDER_TIME_GTC</code> 1 <code>TMT5_ORDER_TIME_DAY</code> 2 <code>TMT5_ORDER_TIME_SPECIFIED</code> 3 <code>TMT5_ORDER_TIME_SPECIFIED_DAY</code>"},{"location":"MT5Account/Trading_Operations/order_send/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Submit orders programmatically with precise control over type, volume, price, SL/TP, and expiration.</li> <li>Drive order tickets in UI and support strategy order placement.</li> </ul>"},{"location":"MT5Account/Trading_Operations/order_send/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pending vs market: Pending orders require <code>price</code>; market orders typically use <code>price=0.0</code> + <code>slippage</code>.</li> <li>Stop\u2011limit: For <code>*_STOP_LIMIT</code>, set both <code>price</code> and <code>stop_limit_price</code>.</li> <li>Return codes: Use <code>returned_code</code>/<code>returned_string_code</code>/<code>returned_code_description</code> to render user\u2011friendly results.</li> <li>Pair with <code>symbol_is_synchronized</code> &amp; <code>symbol_select</code> to avoid stale data issues before sending.</li> </ul> <p>See also: order_check.md, order_modify.md, order_close.md</p>"},{"location":"MT5Account/Trading_Operations/order_send/#usage-examples","title":"Usage Examples","text":""},{"location":"MT5Account/Trading_Operations/order_send/#1-simple-market-buy-with-sltp","title":"1) Simple market BUY with SL/TP","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderSendRequest(\n    symbol=\"EURUSD\",\n    operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_BUY,\n    volume=0.10,\n    price=0.0,\n    slippage=20,\n    stop_loss=0.0,\n    take_profit=0.0,\n    comment=\"buy@market\",\n    expert_id=1001,\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_GTC,\n)\nres = await acct.order_send(req)\nprint(\"deal:\", res.deal, \"ret:\", res.returned_string_code)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_send/#2-stoplimit-example","title":"2) Stop\u2011limit example","text":"<pre><code>from MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nreq = th_pb2.OrderSendRequest(\n    symbol=\"BTCUSD\",\n    operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_BUY_STOP_LIMIT,\n    volume=0.05,\n    price=65000.0,        # limit price\n    stop_limit_price=64950.0,  # stop trigger\n    slippage=0,\n    comment=\"stop-limit demo\",\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_DAY,\n)\nres = await acct.order_send(req)\nprint(res.order)\n</code></pre>"},{"location":"MT5Account/Trading_Operations/order_send/#3-expire-at-specific-utc-time","title":"3) Expire at specific UTC time","text":"<pre><code>from datetime import datetime, timezone\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom MetaRpcMT5 import mt5_term_api_trading_helper_pb2 as th_pb2\n\nts = Timestamp(); ts.FromDatetime(datetime.now(timezone.utc).replace(minute=0, second=0, microsecond=0))\nreq = th_pb2.OrderSendRequest(\n    symbol=\"XAUUSD\",\n    operation=th_pb2.TMT5_ENUM_ORDER_TYPE.TMT5_ORDER_TYPE_SELL_LIMIT,\n    volume=0.1,\n    price=2310.0,\n    slippage=0,\n    expiration_time_type=th_pb2.TMT5_ENUM_ORDER_TYPE_TIME.TMT5_ORDER_TIME_SPECIFIED,\n    expiration_time=ts,\n)\nres = await acct.order_send(req)\nprint(res.order, res.returned_code_description)\n</code></pre>"}]}